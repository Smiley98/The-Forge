     0: cbuffer              ( 0 -     34)
     1: cbExtendCamera       ( 0 -     34)
     2: :                    ( 0 -     34)
     3: register             ( 0 -     34)
     4: (                    ( 0 -     34)
     5: b0                   ( 0 -     34)
     6: ,                    ( 0 -     34)
     7: space1               ( 0 -     34)
     8: )                    ( 0 -     34)
     9: {                    ( 0 -     35)
    10: float4x4             ( 0 -     36)
    11: viewMat              ( 0 -     36)
    12: ;                    ( 0 -     36)
    13: float4x4             ( 0 -     37)
    14: projMat              ( 0 -     37)
    15: ;                    ( 0 -     37)
    16: float4x4             ( 0 -     38)
    17: viewProjMat          ( 0 -     38)
    18: ;                    ( 0 -     38)
    19: float4x4             ( 0 -     39)
    20: InvViewProjMat       ( 0 -     39)
    21: ;                    ( 0 -     39)
    22: float4               ( 0 -     41)
    23: cameraWorldPos       ( 0 -     41)
    24: ;                    ( 0 -     41)
    25: float4               ( 0 -     42)
    26: viewPortSize         ( 0 -     42)
    27: ;                    ( 0 -     42)
    28: }                    ( 0 -     43)
    29: Texture2D            ( 0 -     46)
    30: SceneTexture         ( 0 -     46)
    31: :                    ( 0 -     46)
    32: register             ( 0 -     46)
    33: (                    ( 0 -     46)
    34: t1                   ( 0 -     46)
    35: )                    ( 0 -     46)
    36: ;                    ( 0 -     46)
    37: RWStructuredBuffer   ( 0 -     47)
    38: <                    ( 0 -     47)
    39: uint                 ( 0 -     47)
    40: >                    ( 0 -     47)
    41: IntermediateBuffer   ( 0 -     47)
    42: :                    ( 0 -     47)
    43: register             ( 0 -     47)
    44: (                    ( 0 -     47)
    45: u2                   ( 0 -     47)
    46: )                    ( 0 -     47)
    47: ;                    ( 0 -     47)
    48: Texture2D            ( 0 -     51)
    49: DepthTexture         ( 0 -     51)
    50: :                    ( 0 -     51)
    51: register             ( 0 -     51)
    52: (                    ( 0 -     51)
    53: t3                   ( 0 -     51)
    54: )                    ( 0 -     51)
    55: ;                    ( 0 -     51)
    56: struct               ( 0 -     53)
    57: PlaneInfo            ( 0 -     53)
    58: {                    ( 0 -     54)
    59: float4x4             ( 0 -     55)
    60: rotMat               ( 0 -     55)
    61: ;                    ( 0 -     55)
    62: float4               ( 0 -     56)
    63: centerPoint          ( 0 -     56)
    64: ;                    ( 0 -     56)
    65: float4               ( 0 -     57)
    66: size                 ( 0 -     57)
    67: ;                    ( 0 -     57)
    68: }                    ( 0 -     58)
    69: ;                    ( 0 -     58)
    70: cbuffer              ( 0 -     60)
    71: planeInfoBuffer      ( 0 -     60)
    72: :                    ( 0 -     60)
    73: register             ( 0 -     60)
    74: (                    ( 0 -     60)
    75: b4                   ( 0 -     60)
    76: ,                    ( 0 -     60)
    77: space1               ( 0 -     60)
    78: )                    ( 0 -     60)
    79: {                    ( 0 -     61)
    80: PlaneInfo            ( 0 -     62)
    81: planeInfo            ( 0 -     62)
    82: [                    ( 0 -     62)
    83: 4                    ( 0 -     62)
    84: ]                    ( 0 -     62)
    85: ;                    ( 0 -     62)
    86: uint                 ( 0 -     63)
    87: numPlanes            ( 0 -     63)
    88: ;                    ( 0 -     63)
    89: uint                 ( 0 -     64)
    90: pad00                ( 0 -     64)
    91: ;                    ( 0 -     64)
    92: uint                 ( 0 -     65)
    93: pad01                ( 0 -     65)
    94: ;                    ( 0 -     65)
    95: uint                 ( 0 -     66)
    96: pad02                ( 0 -     66)
    97: ;                    ( 0 -     66)
    98: }                    ( 0 -     67)
    99: cbuffer              ( 0 -     69)
   100: cbProperties         ( 0 -     69)
   101: :                    ( 0 -     69)
   102: register             ( 0 -     69)
   103: (                    ( 0 -     69)
   104: b5                   ( 0 -     69)
   105: ,                    ( 0 -     69)
   106: space1               ( 0 -     69)
   107: )                    ( 0 -     69)
   108: {                    ( 0 -     70)
   109: uint                 ( 0 -     71)
   110: renderMode           ( 0 -     71)
   111: ;                    ( 0 -     71)
   112: float                ( 0 -     72)
   113: useHolePatching      ( 0 -     72)
   114: ;                    ( 0 -     72)
   115: float                ( 0 -     73)
   116: useExpensiveHolePatching ( 0 -     73)
   117: ;                    ( 0 -     73)
   118: float                ( 0 -     74)
   119: useNormalMap         ( 0 -     74)
   120: ;                    ( 0 -     74)
   121: float                ( 0 -     76)
   122: intensity            ( 0 -     76)
   123: ;                    ( 0 -     76)
   124: float                ( 0 -     77)
   125: useFadeEffect        ( 0 -     77)
   126: ;                    ( 0 -     77)
   127: float                ( 0 -     78)
   128: padding01            ( 0 -     78)
   129: ;                    ( 0 -     78)
   130: float                ( 0 -     79)
   131: padding02            ( 0 -     79)
   132: ;                    ( 0 -     79)
   133: }                    ( 0 -     80)
   134: SamplerState         ( 0 -     82)
   135: defaultSampler       ( 0 -     82)
   136: :                    ( 0 -     82)
   137: register             ( 0 -     82)
   138: (                    ( 0 -     82)
   139: s6                   ( 0 -     82)
   140: )                    ( 0 -     82)
   141: ;                    ( 0 -     82)
   142: bool                 ( 0 -     85)
   143: intersectPlane       ( 0 -     85)
   144: (                    ( 0 -     85)
   145: in                   ( 0 -     85)
   146: uint                 ( 0 -     85)
   147: index                ( 0 -     85)
   148: ,                    ( 0 -     85)
   149: in                   ( 0 -     85)
   150: float3               ( 0 -     85)
   151: worldPos             ( 0 -     85)
   152: ,                    ( 0 -     85)
   153: in                   ( 0 -     85)
   154: float2               ( 0 -     85)
   155: fragUV               ( 0 -     85)
   156: ,                    ( 0 -     85)
   157: out                  ( 0 -     85)
   158: float4               ( 0 -     85)
   159: hitPos               ( 0 -     85)
   160: ,                    ( 0 -     85)
   161: out                  ( 0 -     85)
   162: float2               ( 0 -     85)
   163: relfectedUVonPlanar  ( 0 -     85)
   164: )                    ( 0 -     85)
   165: {                    ( 0 -     86)
   166: PlaneInfo            ( 0 -     90)
   167: thisPlane            ( 0 -     90)
   168: =                    ( 0 -     90)
   169: planeInfo            ( 0 -     90)
   170: [                    ( 0 -     90)
   171: index                ( 0 -     90)
   172: ]                    ( 0 -     90)
   173: ;                    ( 0 -     90)
   174: float4x4             ( 0 -     95)
   175: thisPlanesMat        ( 0 -     95)
   176: =                    ( 0 -     95)
   177: thisPlane            ( 0 -     95)
   178: .                    ( 0 -     95)
   179: rotMat               ( 0 -     95)
   180: ;                    ( 0 -     95)
   181: thisPlanesMat        ( 0 -     96)
   182: =                    ( 0 -     96)
   183: transpose            ( 0 -     96)
   184: (                    ( 0 -     96)
   185: thisPlanesMat        ( 0 -     96)
   186: )                    ( 0 -     96)
   187: ;                    ( 0 -     96)
   188: float3               ( 0 -     98)
   189: normalVec            ( 0 -     98)
   190: =                    ( 0 -     98)
   191: thisPlane            ( 0 -     98)
   192: .                    ( 0 -     98)
   193: rotMat               ( 0 -     98)
   194: [                    ( 0 -     98)
   195: 2                    ( 0 -     98)
   196: ]                    ( 0 -     98)
   197: .                    ( 0 -     98)
   198: xyz                  ( 0 -     98)
   199: ;                    ( 0 -     98)
   200: float3               ( 0 -    103)
   201: centerPoint          ( 0 -    103)
   202: =                    ( 0 -    103)
   203: thisPlane            ( 0 -    103)
   204: .                    ( 0 -    103)
   205: centerPoint          ( 0 -    103)
   206: .                    ( 0 -    103)
   207: xyz                  ( 0 -    103)
   208: ;                    ( 0 -    103)
   209: float3               ( 0 -    105)
   210: rO                   ( 0 -    105)
   211: =                    ( 0 -    105)
   212: cameraWorldPos       ( 0 -    105)
   213: .                    ( 0 -    105)
   214: xyz                  ( 0 -    105)
   215: ;                    ( 0 -    105)
   216: float3               ( 0 -    106)
   217: rD                   ( 0 -    106)
   218: =                    ( 0 -    106)
   219: normalize            ( 0 -    106)
   220: (                    ( 0 -    106)
   221: worldPos             ( 0 -    106)
   222: -                    ( 0 -    106)
   223: rO                   ( 0 -    106)
   224: )                    ( 0 -    106)
   225: ;                    ( 0 -    106)
   226: float3               ( 0 -    107)
   227: rD_VS                ( 0 -    107)
   228: =                    ( 0 -    107)
   229: mul                  ( 0 -    107)
   230: (                    ( 0 -    107)
   231: (                    ( 0 -    107)
   232: float3x3             ( 0 -    107)
   233: )                    ( 0 -    107)
   234: viewMat              ( 0 -    107)
   235: ,                    ( 0 -    107)
   236: rD                   ( 0 -    107)
   237: )                    ( 0 -    107)
   238: ;                    ( 0 -    107)
   239: if                   ( 0 -    112)
   240: (                    ( 0 -    112)
   241: rD_VS                ( 0 -    112)
   242: .                    ( 0 -    112)
   243: z                    ( 0 -    112)
   244: <                    ( 0 -    112)
   245: 0.000000             ( 0 -    112)
   246: )                    ( 0 -    112)
   247: return               ( 0 -    113)
   248: false                ( 0 -    113)
   249: ;                    ( 0 -    113)
   250: float                ( 0 -    115)
   251: denom                ( 0 -    115)
   252: =                    ( 0 -    115)
   253: dot                  ( 0 -    115)
   254: (                    ( 0 -    115)
   255: normalVec            ( 0 -    115)
   256: ,                    ( 0 -    115)
   257: rD                   ( 0 -    115)
   258: )                    ( 0 -    115)
   259: ;                    ( 0 -    115)
   260: if                   ( 0 -    117)
   261: (                    ( 0 -    117)
   262: denom                ( 0 -    117)
   263: <                    ( 0 -    117)
   264: 0.000000             ( 0 -    117)
   265: )                    ( 0 -    117)
   266: {                    ( 0 -    118)
   267: float3               ( 0 -    121)
   268: p0l0                 ( 0 -    121)
   269: =                    ( 0 -    121)
   270: centerPoint          ( 0 -    121)
   271: -                    ( 0 -    121)
   272: rO                   ( 0 -    121)
   273: ;                    ( 0 -    121)
   274: float                ( 0 -    122)
   275: t                    ( 0 -    122)
   276: =                    ( 0 -    122)
   277: dot                  ( 0 -    122)
   278: (                    ( 0 -    122)
   279: normalVec            ( 0 -    122)
   280: ,                    ( 0 -    122)
   281: p0l0                 ( 0 -    122)
   282: )                    ( 0 -    122)
   283: /                    ( 0 -    122)
   284: denom                ( 0 -    122)
   285: ;                    ( 0 -    122)
   286: if                   ( 0 -    124)
   287: (                    ( 0 -    124)
   288: t                    ( 0 -    124)
   289: unknown              ( 0 -    124)
   290: 0.000000             ( 0 -    124)
   291: )                    ( 0 -    124)
   292: return               ( 0 -    125)
   293: false                ( 0 -    125)
   294: ;                    ( 0 -    125)
   295: float3               ( 0 -    127)
   296: hitPoint             ( 0 -    127)
   297: =                    ( 0 -    127)
   298: rO                   ( 0 -    127)
   299: +                    ( 0 -    127)
   300: rD                   ( 0 -    127)
   301: *                    ( 0 -    127)
   302: t                    ( 0 -    127)
   303: ;                    ( 0 -    127)
   304: float3               ( 0 -    129)
   305: gap                  ( 0 -    129)
   306: =                    ( 0 -    129)
   307: hitPoint             ( 0 -    129)
   308: -                    ( 0 -    129)
   309: centerPoint          ( 0 -    129)
   310: ;                    ( 0 -    129)
   311: float                ( 0 -    131)
   312: xGap                 ( 0 -    131)
   313: =                    ( 0 -    131)
   314: dot                  ( 0 -    131)
   315: (                    ( 0 -    131)
   316: gap                  ( 0 -    131)
   317: ,                    ( 0 -    131)
   318: thisPlane            ( 0 -    131)
   319: .                    ( 0 -    131)
   320: rotMat               ( 0 -    131)
   321: [                    ( 0 -    131)
   322: 0                    ( 0 -    131)
   323: ]                    ( 0 -    131)
   324: .                    ( 0 -    131)
   325: xyz                  ( 0 -    131)
   326: )                    ( 0 -    131)
   327: ;                    ( 0 -    131)
   328: float                ( 0 -    132)
   329: yGap                 ( 0 -    132)
   330: =                    ( 0 -    132)
   331: dot                  ( 0 -    132)
   332: (                    ( 0 -    132)
   333: gap                  ( 0 -    132)
   334: ,                    ( 0 -    132)
   335: thisPlane            ( 0 -    132)
   336: .                    ( 0 -    132)
   337: rotMat               ( 0 -    132)
   338: [                    ( 0 -    132)
   339: 1                    ( 0 -    132)
   340: ]                    ( 0 -    132)
   341: .                    ( 0 -    132)
   342: xyz                  ( 0 -    132)
   343: )                    ( 0 -    132)
   344: ;                    ( 0 -    132)
   345: float                ( 0 -    138)
   346: width                ( 0 -    138)
   347: =                    ( 0 -    138)
   348: thisPlane            ( 0 -    138)
   349: .                    ( 0 -    138)
   350: size                 ( 0 -    138)
   351: .                    ( 0 -    138)
   352: x                    ( 0 -    138)
   353: *                    ( 0 -    138)
   354: 0.500000             ( 0 -    138)
   355: ;                    ( 0 -    138)
   356: float                ( 0 -    139)
   357: height               ( 0 -    139)
   358: =                    ( 0 -    139)
   359: thisPlane            ( 0 -    139)
   360: .                    ( 0 -    139)
   361: size                 ( 0 -    139)
   362: .                    ( 0 -    139)
   363: y                    ( 0 -    139)
   364: *                    ( 0 -    139)
   365: 0.500000             ( 0 -    139)
   366: ;                    ( 0 -    139)
   367: float4               ( 0 -    141)
   368: reflectedPos         ( 0 -    141)
   369: ;                    ( 0 -    141)
   370: if                   ( 0 -    143)
   371: (                    ( 0 -    143)
   372: (                    ( 0 -    143)
   373: abs                  ( 0 -    143)
   374: (                    ( 0 -    143)
   375: xGap                 ( 0 -    143)
   376: )                    ( 0 -    143)
   377: unknown              ( 0 -    143)
   378: width                ( 0 -    143)
   379: )                    ( 0 -    143)
   380: unknown              ( 0 -    143)
   381: (                    ( 0 -    143)
   382: abs                  ( 0 -    143)
   383: (                    ( 0 -    143)
   384: yGap                 ( 0 -    143)
   385: )                    ( 0 -    143)
   386: unknown              ( 0 -    143)
   387: height               ( 0 -    143)
   388: )                    ( 0 -    143)
   389: )                    ( 0 -    143)
   390: {                    ( 0 -    144)
   391: hitPos               ( 0 -    145)
   392: =                    ( 0 -    145)
   393: float4               ( 0 -    145)
   394: (                    ( 0 -    145)
   395: hitPoint             ( 0 -    145)
   396: ,                    ( 0 -    145)
   397: 1.000000             ( 0 -    145)
   398: )                    ( 0 -    145)
   399: ;                    ( 0 -    145)
   400: reflectedPos         ( 0 -    146)
   401: =                    ( 0 -    146)
   402: mul                  ( 0 -    146)
   403: (                    ( 0 -    146)
   404: viewProjMat          ( 0 -    146)
   405: ,                    ( 0 -    146)
   406: hitPos               ( 0 -    146)
   407: )                    ( 0 -    146)
   408: ;                    ( 0 -    146)
   409: reflectedPos         ( 0 -    147)
   410: /=                   ( 0 -    147)
   411: reflectedPos         ( 0 -    147)
   412: .                    ( 0 -    147)
   413: w                    ( 0 -    147)
   414: ;                    ( 0 -    147)
   415: reflectedPos         ( 0 -    149)
   416: .                    ( 0 -    149)
   417: xy                   ( 0 -    149)
   418: =                    ( 0 -    149)
   419: float2               ( 0 -    149)
   420: (                    ( 0 -    149)
   421: (                    ( 0 -    149)
   422: reflectedPos         ( 0 -    149)
   423: .                    ( 0 -    149)
   424: x                    ( 0 -    149)
   425: +                    ( 0 -    149)
   426: 1.000000             ( 0 -    149)
   427: )                    ( 0 -    149)
   428: *                    ( 0 -    149)
   429: 0.500000             ( 0 -    149)
   430: ,                    ( 0 -    149)
   431: (                    ( 0 -    149)
   432: 1.000000             ( 0 -    149)
   433: -                    ( 0 -    149)
   434: reflectedPos         ( 0 -    149)
   435: .                    ( 0 -    149)
   436: y                    ( 0 -    149)
   437: )                    ( 0 -    149)
   438: *                    ( 0 -    149)
   439: 0.500000             ( 0 -    149)
   440: )                    ( 0 -    149)
   441: ;                    ( 0 -    149)
   442: float                ( 0 -    151)
   443: depth                ( 0 -    151)
   444: =                    ( 0 -    151)
   445: DepthTexture         ( 0 -    151)
   446: .                    ( 0 -    151)
   447: Sample               ( 0 -    151)
   448: (                    ( 0 -    151)
   449: defaultSampler       ( 0 -    151)
   450: ,                    ( 0 -    151)
   451: reflectedPos         ( 0 -    151)
   452: .                    ( 0 -    151)
   453: xy                   ( 0 -    151)
   454: )                    ( 0 -    151)
   455: .                    ( 0 -    151)
   456: r                    ( 0 -    151)
   457: ;                    ( 0 -    151)
   458: if                   ( 0 -    153)
   459: (                    ( 0 -    153)
   460: depth                ( 0 -    153)
   461: unknown              ( 0 -    153)
   462: reflectedPos         ( 0 -    153)
   463: .                    ( 0 -    153)
   464: z                    ( 0 -    153)
   465: )                    ( 0 -    153)
   466: return               ( 0 -    154)
   467: false                ( 0 -    154)
   468: ;                    ( 0 -    154)
   469: if                   ( 0 -    156)
   470: (                    ( 0 -    156)
   471: reflectedPos         ( 0 -    156)
   472: .                    ( 0 -    156)
   473: x                    ( 0 -    156)
   474: <                    ( 0 -    156)
   475: 0.000000             ( 0 -    156)
   476: unknown              ( 0 -    156)
   477: reflectedPos         ( 0 -    156)
   478: .                    ( 0 -    156)
   479: y                    ( 0 -    156)
   480: <                    ( 0 -    156)
   481: 0.000000             ( 0 -    156)
   482: unknown              ( 0 -    156)
   483: reflectedPos         ( 0 -    156)
   484: .                    ( 0 -    156)
   485: x                    ( 0 -    156)
   486: >                    ( 0 -    156)
   487: 1.000000             ( 0 -    156)
   488: unknown              ( 0 -    156)
   489: reflectedPos         ( 0 -    156)
   490: .                    ( 0 -    156)
   491: y                    ( 0 -    156)
   492: >                    ( 0 -    156)
   493: 1.000000             ( 0 -    156)
   494: )                    ( 0 -    156)
   495: return               ( 0 -    157)
   496: false                ( 0 -    157)
   497: ;                    ( 0 -    157)
   498: else                 ( 0 -    158)
   499: {                    ( 0 -    159)
   500: relfectedUVonPlanar  ( 0 -    160)
   501: =                    ( 0 -    160)
   502: float2               ( 0 -    160)
   503: (                    ( 0 -    160)
   504: xGap                 ( 0 -    160)
   505: /                    ( 0 -    160)
   506: width                ( 0 -    160)
   507: ,                    ( 0 -    160)
   508: yGap                 ( 0 -    160)
   509: /                    ( 0 -    160)
   510: height               ( 0 -    160)
   511: )                    ( 0 -    160)
   512: *                    ( 0 -    160)
   513: 0.500000             ( 0 -    160)
   514: +                    ( 0 -    160)
   515: float2               ( 0 -    160)
   516: (                    ( 0 -    160)
   517: 0.500000             ( 0 -    160)
   518: ,                    ( 0 -    160)
   519: 0.500000             ( 0 -    160)
   520: )                    ( 0 -    160)
   521: ;                    ( 0 -    160)
   522: relfectedUVonPlanar  ( 0 -    161)
   523: *=                   ( 0 -    161)
   524: float2               ( 0 -    161)
   525: (                    ( 0 -    161)
   526: thisPlane            ( 0 -    161)
   527: .                    ( 0 -    161)
   528: size                 ( 0 -    161)
   529: .                    ( 0 -    161)
   530: zw                   ( 0 -    161)
   531: )                    ( 0 -    161)
   532: ;                    ( 0 -    161)
   533: return               ( 0 -    163)
   534: true                 ( 0 -    163)
   535: ;                    ( 0 -    163)
   536: }                    ( 0 -    164)
   537: }                    ( 0 -    165)
   538: else                 ( 0 -    166)
   539: return               ( 0 -    167)
   540: false                ( 0 -    167)
   541: ;                    ( 0 -    167)
   542: }                    ( 0 -    168)
   543: else                 ( 0 -    169)
   544: return               ( 0 -    170)
   545: false                ( 0 -    170)
   546: ;                    ( 0 -    170)
   547: }                    ( 0 -    171)
   548: float4               ( 0 -    173)
   549: unPacked             ( 0 -    173)
   550: (                    ( 0 -    173)
   551: in                   ( 0 -    173)
   552: uint                 ( 0 -    173)
   553: unpacedInfo          ( 0 -    173)
   554: ,                    ( 0 -    173)
   555: in                   ( 0 -    173)
   556: float2               ( 0 -    173)
   557: dividedViewSize      ( 0 -    173)
   558: ,                    ( 0 -    173)
   559: out                  ( 0 -    173)
   560: uint                 ( 0 -    173)
   561: CoordSys             ( 0 -    173)
   562: )                    ( 0 -    173)
   563: {                    ( 0 -    174)
   564: float                ( 0 -    175)
   565: YInt                 ( 0 -    175)
   566: =                    ( 0 -    175)
   567: float                ( 0 -    175)
   568: (                    ( 0 -    175)
   569: unpacedInfo          ( 0 -    175)
   570: unknown              ( 0 -    175)
   571: 20                   ( 0 -    175)
   572: )                    ( 0 -    175)
   573: ;                    ( 0 -    175)
   574: int                  ( 0 -    176)
   575: YFrac                ( 0 -    176)
   576: =                    ( 0 -    176)
   577: int                  ( 0 -    176)
   578: (                    ( 0 -    176)
   579: (                    ( 0 -    176)
   580: unpacedInfo          ( 0 -    176)
   581: &                    ( 0 -    176)
   582: 917504               ( 0 -    176)
   583: )                    ( 0 -    176)
   584: unknown              ( 0 -    176)
   585: 17                   ( 0 -    176)
   586: )                    ( 0 -    176)
   587: ;                    ( 0 -    176)
   588: uint                 ( 0 -    178)
   589: uXInt                ( 0 -    178)
   590: =                    ( 0 -    178)
   591: (                    ( 0 -    178)
   592: unpacedInfo          ( 0 -    178)
   593: &                    ( 0 -    178)
   594: 65536                ( 0 -    178)
   595: )                    ( 0 -    178)
   596: unknown              ( 0 -    178)
   597: 16                   ( 0 -    178)
   598: ;                    ( 0 -    178)
   599: float                ( 0 -    180)
   600: XInt                 ( 0 -    180)
   601: =                    ( 0 -    180)
   602: 0.000000             ( 0 -    180)
   603: ;                    ( 0 -    180)
   604: if                   ( 0 -    182)
   605: (                    ( 0 -    182)
   606: uXInt                ( 0 -    182)
   607: unknown              ( 0 -    182)
   608: 0                    ( 0 -    182)
   609: )                    ( 0 -    182)
   610: {                    ( 0 -    183)
   611: XInt                 ( 0 -    184)
   612: =                    ( 0 -    184)
   613: float                ( 0 -    184)
   614: (                    ( 0 -    184)
   615: int                  ( 0 -    184)
   616: (                    ( 0 -    184)
   617: (                    ( 0 -    184)
   618: unpacedInfo          ( 0 -    184)
   619: &                    ( 0 -    184)
   620: 131040               ( 0 -    184)
   621: )                    ( 0 -    184)
   622: unknown              ( 0 -    184)
   623: 5                    ( 0 -    184)
   624: )                    ( 0 -    184)
   625: )                    ( 0 -    184)
   626: ;                    ( 0 -    184)
   627: }                    ( 0 -    185)
   628: else                 ( 0 -    186)
   629: {                    ( 0 -    187)
   630: XInt                 ( 0 -    188)
   631: =                    ( 0 -    188)
   632: float                ( 0 -    188)
   633: (                    ( 0 -    188)
   634: int                  ( 0 -    188)
   635: (                    ( 0 -    188)
   636: (                    ( 0 -    188)
   637: (                    ( 0 -    188)
   638: unpacedInfo          ( 0 -    188)
   639: &                    ( 0 -    188)
   640: 131040               ( 0 -    188)
   641: )                    ( 0 -    188)
   642: unknown              ( 0 -    188)
   643: 5                    ( 0 -    188)
   644: )                    ( 0 -    188)
   645: |                    ( 0 -    188)
   646: 4294963200           ( 0 -    188)
   647: )                    ( 0 -    188)
   648: )                    ( 0 -    188)
   649: ;                    ( 0 -    188)
   650: }                    ( 0 -    189)
   651: int                  ( 0 -    191)
   652: XFrac                ( 0 -    191)
   653: =                    ( 0 -    191)
   654: int                  ( 0 -    191)
   655: (                    ( 0 -    191)
   656: (                    ( 0 -    191)
   657: unpacedInfo          ( 0 -    191)
   658: &                    ( 0 -    191)
   659: 28                   ( 0 -    191)
   660: )                    ( 0 -    191)
   661: unknown              ( 0 -    191)
   662: 2                    ( 0 -    191)
   663: )                    ( 0 -    191)
   664: ;                    ( 0 -    191)
   665: float                ( 0 -    193)
   666: Yfrac                ( 0 -    193)
   667: =                    ( 0 -    193)
   668: YFrac                ( 0 -    193)
   669: *                    ( 0 -    193)
   670: 0.125000             ( 0 -    193)
   671: ;                    ( 0 -    193)
   672: float                ( 0 -    194)
   673: Xfrac                ( 0 -    194)
   674: =                    ( 0 -    194)
   675: XFrac                ( 0 -    194)
   676: *                    ( 0 -    194)
   677: 0.125000             ( 0 -    194)
   678: ;                    ( 0 -    194)
   679: CoordSys             ( 0 -    196)
   680: =                    ( 0 -    196)
   681: unpacedInfo          ( 0 -    196)
   682: &                    ( 0 -    196)
   683: 3                    ( 0 -    196)
   684: ;                    ( 0 -    196)
   685: float2               ( 0 -    198)
   686: offset               ( 0 -    198)
   687: =                    ( 0 -    198)
   688: float2               ( 0 -    198)
   689: (                    ( 0 -    198)
   690: 0.000000             ( 0 -    198)
   691: ,                    ( 0 -    198)
   692: 0.000000             ( 0 -    198)
   693: )                    ( 0 -    198)
   694: ;                    ( 0 -    198)
   695: if                   ( 0 -    200)
   696: (                    ( 0 -    200)
   697: CoordSys             ( 0 -    200)
   698: unknown              ( 0 -    200)
   699: 0                    ( 0 -    200)
   700: )                    ( 0 -    200)
   701: {                    ( 0 -    201)
   702: offset               ( 0 -    202)
   703: =                    ( 0 -    202)
   704: float2               ( 0 -    202)
   705: (                    ( 0 -    202)
   706: (                    ( 0 -    202)
   707: XInt                 ( 0 -    202)
   708: )                    ( 0 -    202)
   709: /                    ( 0 -    202)
   710: dividedViewSize      ( 0 -    202)
   711: .                    ( 0 -    202)
   712: x                    ( 0 -    202)
   713: ,                    ( 0 -    202)
   714: (                    ( 0 -    202)
   715: YInt                 ( 0 -    202)
   716: )                    ( 0 -    202)
   717: /                    ( 0 -    202)
   718: dividedViewSize      ( 0 -    202)
   719: .                    ( 0 -    202)
   720: y                    ( 0 -    202)
   721: )                    ( 0 -    202)
   722: ;                    ( 0 -    202)
   723: }                    ( 0 -    204)
   724: else if              ( 0 -    205)
   725: (                    ( 0 -    205)
   726: CoordSys             ( 0 -    205)
   727: unknown              ( 0 -    205)
   728: 1                    ( 0 -    205)
   729: )                    ( 0 -    205)
   730: {                    ( 0 -    206)
   731: offset               ( 0 -    207)
   732: =                    ( 0 -    207)
   733: float2               ( 0 -    207)
   734: (                    ( 0 -    207)
   735: (                    ( 0 -    207)
   736: YInt                 ( 0 -    207)
   737: )                    ( 0 -    207)
   738: /                    ( 0 -    207)
   739: dividedViewSize      ( 0 -    207)
   740: .                    ( 0 -    207)
   741: x                    ( 0 -    207)
   742: ,                    ( 0 -    207)
   743: (                    ( 0 -    207)
   744: XInt                 ( 0 -    207)
   745: )                    ( 0 -    207)
   746: /                    ( 0 -    207)
   747: dividedViewSize      ( 0 -    207)
   748: .                    ( 0 -    207)
   749: y                    ( 0 -    207)
   750: )                    ( 0 -    207)
   751: ;                    ( 0 -    207)
   752: }                    ( 0 -    209)
   753: else if              ( 0 -    210)
   754: (                    ( 0 -    210)
   755: CoordSys             ( 0 -    210)
   756: unknown              ( 0 -    210)
   757: 2                    ( 0 -    210)
   758: )                    ( 0 -    210)
   759: {                    ( 0 -    211)
   760: offset               ( 0 -    212)
   761: =                    ( 0 -    212)
   762: float2               ( 0 -    212)
   763: (                    ( 0 -    212)
   764: (                    ( 0 -    212)
   765: XInt                 ( 0 -    212)
   766: )                    ( 0 -    212)
   767: /                    ( 0 -    212)
   768: dividedViewSize      ( 0 -    212)
   769: .                    ( 0 -    212)
   770: x                    ( 0 -    212)
   771: ,                    ( 0 -    212)
   772: -                    ( 0 -    212)
   773: (                    ( 0 -    212)
   774: YInt                 ( 0 -    212)
   775: )                    ( 0 -    212)
   776: /                    ( 0 -    212)
   777: dividedViewSize      ( 0 -    212)
   778: .                    ( 0 -    212)
   779: y                    ( 0 -    212)
   780: )                    ( 0 -    212)
   781: ;                    ( 0 -    212)
   782: }                    ( 0 -    214)
   783: else if              ( 0 -    215)
   784: (                    ( 0 -    215)
   785: CoordSys             ( 0 -    215)
   786: unknown              ( 0 -    215)
   787: 3                    ( 0 -    215)
   788: )                    ( 0 -    215)
   789: {                    ( 0 -    216)
   790: offset               ( 0 -    217)
   791: =                    ( 0 -    217)
   792: float2               ( 0 -    217)
   793: (                    ( 0 -    217)
   794: -                    ( 0 -    217)
   795: (                    ( 0 -    217)
   796: YInt                 ( 0 -    217)
   797: )                    ( 0 -    217)
   798: /                    ( 0 -    217)
   799: dividedViewSize      ( 0 -    217)
   800: .                    ( 0 -    217)
   801: x                    ( 0 -    217)
   802: ,                    ( 0 -    217)
   803: (                    ( 0 -    217)
   804: XInt                 ( 0 -    217)
   805: )                    ( 0 -    217)
   806: /                    ( 0 -    217)
   807: dividedViewSize      ( 0 -    217)
   808: .                    ( 0 -    217)
   809: y                    ( 0 -    217)
   810: )                    ( 0 -    217)
   811: ;                    ( 0 -    217)
   812: }                    ( 0 -    219)
   813: return               ( 0 -    221)
   814: float4               ( 0 -    221)
   815: (                    ( 0 -    221)
   816: offset               ( 0 -    221)
   817: ,                    ( 0 -    221)
   818: Xfrac                ( 0 -    221)
   819: ,                    ( 0 -    221)
   820: Yfrac                ( 0 -    221)
   821: )                    ( 0 -    221)
   822: ;                    ( 0 -    221)
   823: }                    ( 0 -    222)
   824: float4               ( 0 -    224)
   825: getWorldPosition     ( 0 -    224)
   826: (                    ( 0 -    224)
   827: float2               ( 0 -    224)
   828: UV                   ( 0 -    224)
   829: ,                    ( 0 -    224)
   830: float                ( 0 -    224)
   831: depth                ( 0 -    224)
   832: )                    ( 0 -    224)
   833: {                    ( 0 -    225)
   834: float4               ( 0 -    226)
   835: worldPos             ( 0 -    226)
   836: =                    ( 0 -    226)
   837: mul                  ( 0 -    226)
   838: (                    ( 0 -    226)
   839: InvViewProjMat       ( 0 -    226)
   840: ,                    ( 0 -    226)
   841: float4               ( 0 -    226)
   842: (                    ( 0 -    226)
   843: UV                   ( 0 -    226)
   844: .                    ( 0 -    226)
   845: x                    ( 0 -    226)
   846: *                    ( 0 -    226)
   847: 2.000000             ( 0 -    226)
   848: -                    ( 0 -    226)
   849: 1.000000             ( 0 -    226)
   850: ,                    ( 0 -    226)
   851: (                    ( 0 -    226)
   852: 1.000000             ( 0 -    226)
   853: -                    ( 0 -    226)
   854: UV                   ( 0 -    226)
   855: .                    ( 0 -    226)
   856: y                    ( 0 -    226)
   857: )                    ( 0 -    226)
   858: *                    ( 0 -    226)
   859: 2.000000             ( 0 -    226)
   860: -                    ( 0 -    226)
   861: 1.000000             ( 0 -    226)
   862: ,                    ( 0 -    226)
   863: depth                ( 0 -    226)
   864: ,                    ( 0 -    226)
   865: 1.000000             ( 0 -    226)
   866: )                    ( 0 -    226)
   867: )                    ( 0 -    226)
   868: ;                    ( 0 -    226)
   869: worldPos             ( 0 -    227)
   870: /=                   ( 0 -    227)
   871: worldPos             ( 0 -    227)
   872: .                    ( 0 -    227)
   873: w                    ( 0 -    227)
   874: ;                    ( 0 -    227)
   875: return               ( 0 -    229)
   876: worldPos             ( 0 -    229)
   877: ;                    ( 0 -    229)
   878: }                    ( 0 -    230)
   879: float                ( 0 -    232)
   880: fade                 ( 0 -    232)
   881: (                    ( 0 -    232)
   882: float2               ( 0 -    232)
   883: UV                   ( 0 -    232)
   884: )                    ( 0 -    232)
   885: {                    ( 0 -    233)
   886: float2               ( 0 -    234)
   887: NDC                  ( 0 -    234)
   888: =                    ( 0 -    234)
   889: UV                   ( 0 -    234)
   890: *                    ( 0 -    234)
   891: 2.000000             ( 0 -    234)
   892: -                    ( 0 -    234)
   893: float2               ( 0 -    234)
   894: (                    ( 0 -    234)
   895: 1.000000             ( 0 -    234)
   896: ,                    ( 0 -    234)
   897: 1.000000             ( 0 -    234)
   898: )                    ( 0 -    234)
   899: ;                    ( 0 -    234)
   900: return               ( 0 -    236)
   901: clamp                ( 0 -    236)
   902: (                    ( 0 -    236)
   903: 1.000000             ( 0 -    236)
   904: -                    ( 0 -    236)
   905: max                  ( 0 -    236)
   906: (                    ( 0 -    236)
   907: pow                  ( 0 -    236)
   908: (                    ( 0 -    236)
   909: NDC                  ( 0 -    236)
   910: .                    ( 0 -    236)
   911: y                    ( 0 -    236)
   912: *                    ( 0 -    236)
   913: NDC                  ( 0 -    236)
   914: .                    ( 0 -    236)
   915: y                    ( 0 -    236)
   916: ,                    ( 0 -    236)
   917: 4.000000             ( 0 -    236)
   918: )                    ( 0 -    236)
   919: ,                    ( 0 -    236)
   920: pow                  ( 0 -    236)
   921: (                    ( 0 -    236)
   922: NDC                  ( 0 -    236)
   923: .                    ( 0 -    236)
   924: x                    ( 0 -    236)
   925: *                    ( 0 -    236)
   926: NDC                  ( 0 -    236)
   927: .                    ( 0 -    236)
   928: x                    ( 0 -    236)
   929: ,                    ( 0 -    236)
   930: 4.000000             ( 0 -    236)
   931: )                    ( 0 -    236)
   932: )                    ( 0 -    236)
   933: ,                    ( 0 -    236)
   934: 0.000000             ( 0 -    236)
   935: ,                    ( 0 -    236)
   936: 1.000000             ( 0 -    236)
   937: )                    ( 0 -    236)
   938: ;                    ( 0 -    236)
   939: }                    ( 0 -    237)
   940: struct               ( 0 -    239)
   941: VSOutput             ( 0 -    239)
   942: {                    ( 0 -    240)
   943: float4               ( 0 -    241)
   944: Position             ( 0 -    241)
   945: :                    ( 0 -    241)
   946: SV_POSITION          ( 0 -    241)
   947: ;                    ( 0 -    241)
   948: float2               ( 0 -    242)
   949: uv                   ( 0 -    242)
   950: :                    ( 0 -    242)
   951: TEXCOORD0            ( 0 -    242)
   952: ;                    ( 0 -    242)
   953: }                    ( 0 -    243)
   954: ;                    ( 0 -    243)
   955: float4               ( 0 -    246)
   956: main                 ( 0 -    246)
   957: (                    ( 0 -    246)
   958: VSOutput             ( 0 -    246)
   959: input                ( 0 -    246)
   960: )                    ( 0 -    246)
   961: :                    ( 0 -    246)
   962: SV_TARGET            ( 0 -    246)
   963: {                    ( 0 -    247)
   964: float4               ( 0 -    248)
   965: outColor             ( 0 -    248)
   966: =                    ( 0 -    248)
   967: float4               ( 0 -    248)
   968: (                    ( 0 -    248)
   969: 0.000000             ( 0 -    248)
   970: ,                    ( 0 -    248)
   971: 0.000000             ( 0 -    248)
   972: ,                    ( 0 -    248)
   973: 0.000000             ( 0 -    248)
   974: ,                    ( 0 -    248)
   975: 0.000000             ( 0 -    248)
   976: )                    ( 0 -    248)
   977: ;                    ( 0 -    248)
   978: uint                 ( 0 -    250)
   979: screenWidth          ( 0 -    250)
   980: =                    ( 0 -    250)
   981: uint                 ( 0 -    250)
   982: (                    ( 0 -    250)
   983: viewPortSize         ( 0 -    250)
   984: .                    ( 0 -    250)
   985: x                    ( 0 -    250)
   986: )                    ( 0 -    250)
   987: ;                    ( 0 -    250)
   988: uint                 ( 0 -    251)
   989: screenHeight         ( 0 -    251)
   990: =                    ( 0 -    251)
   991: uint                 ( 0 -    251)
   992: (                    ( 0 -    251)
   993: viewPortSize         ( 0 -    251)
   994: .                    ( 0 -    251)
   995: y                    ( 0 -    251)
   996: )                    ( 0 -    251)
   997: ;                    ( 0 -    251)
   998: uint                 ( 0 -    253)
   999: indexY               ( 0 -    253)
  1000: =                    ( 0 -    253)
  1001: uint                 ( 0 -    253)
  1002: (                    ( 0 -    253)
  1003: input                ( 0 -    253)
  1004: .                    ( 0 -    253)
  1005: uv                   ( 0 -    253)
  1006: .                    ( 0 -    253)
  1007: y                    ( 0 -    253)
  1008: *                    ( 0 -    253)
  1009: viewPortSize         ( 0 -    253)
  1010: .                    ( 0 -    253)
  1011: y                    ( 0 -    253)
  1012: )                    ( 0 -    253)
  1013: ;                    ( 0 -    253)
  1014: uint                 ( 0 -    254)
  1015: indexX               ( 0 -    254)
  1016: =                    ( 0 -    254)
  1017: uint                 ( 0 -    254)
  1018: (                    ( 0 -    254)
  1019: input                ( 0 -    254)
  1020: .                    ( 0 -    254)
  1021: uv                   ( 0 -    254)
  1022: .                    ( 0 -    254)
  1023: x                    ( 0 -    254)
  1024: *                    ( 0 -    254)
  1025: viewPortSize         ( 0 -    254)
  1026: .                    ( 0 -    254)
  1027: x                    ( 0 -    254)
  1028: )                    ( 0 -    254)
  1029: ;                    ( 0 -    254)
  1030: uint                 ( 0 -    256)
  1031: index                ( 0 -    256)
  1032: =                    ( 0 -    256)
  1033: indexY               ( 0 -    256)
  1034: *                    ( 0 -    256)
  1035: screenWidth          ( 0 -    256)
  1036: +                    ( 0 -    256)
  1037: indexX               ( 0 -    256)
  1038: ;                    ( 0 -    256)
  1039: uint                 ( 0 -    258)
  1040: bufferInfo           ( 0 -    258)
  1041: =                    ( 0 -    258)
  1042: IntermediateBuffer   ( 0 -    258)
  1043: [                    ( 0 -    258)
  1044: index                ( 0 -    258)
  1045: ]                    ( 0 -    258)
  1046: ;                    ( 0 -    258)
  1047: bool                 ( 0 -    261)
  1048: bIsInterect          ( 0 -    261)
  1049: =                    ( 0 -    261)
  1050: false                ( 0 -    261)
  1051: ;                    ( 0 -    261)
  1052: uint                 ( 0 -    263)
  1053: CoordSys             ( 0 -    263)
  1054: ;                    ( 0 -    263)
  1055: float2               ( 0 -    264)
  1056: offset               ( 0 -    264)
  1057: =                    ( 0 -    264)
  1058: unPacked             ( 0 -    264)
  1059: (                    ( 0 -    264)
  1060: bufferInfo           ( 0 -    264)
  1061: ,                    ( 0 -    264)
  1062: viewPortSize         ( 0 -    264)
  1063: .                    ( 0 -    264)
  1064: xy                   ( 0 -    264)
  1065: ,                    ( 0 -    264)
  1066: CoordSys             ( 0 -    264)
  1067: )                    ( 0 -    264)
  1068: .                    ( 0 -    264)
  1069: xy                   ( 0 -    264)
  1070: ;                    ( 0 -    264)
  1071: float                ( 0 -    266)
  1072: depth                ( 0 -    266)
  1073: =                    ( 0 -    266)
  1074: DepthTexture         ( 0 -    266)
  1075: .                    ( 0 -    266)
  1076: Sample               ( 0 -    266)
  1077: (                    ( 0 -    266)
  1078: defaultSampler       ( 0 -    266)
  1079: ,                    ( 0 -    266)
  1080: input                ( 0 -    266)
  1081: .                    ( 0 -    266)
  1082: uv                   ( 0 -    266)
  1083: )                    ( 0 -    266)
  1084: .                    ( 0 -    266)
  1085: r                    ( 0 -    266)
  1086: ;                    ( 0 -    266)
  1087: float4               ( 0 -    268)
  1088: worldPos             ( 0 -    268)
  1089: =                    ( 0 -    268)
  1090: getWorldPosition     ( 0 -    268)
  1091: (                    ( 0 -    268)
  1092: input                ( 0 -    268)
  1093: .                    ( 0 -    268)
  1094: uv                   ( 0 -    268)
  1095: ,                    ( 0 -    268)
  1096: depth                ( 0 -    268)
  1097: )                    ( 0 -    268)
  1098: ;                    ( 0 -    268)
  1099: float4               ( 0 -    270)
  1100: HitPos_WS            ( 0 -    270)
  1101: ;                    ( 0 -    270)
  1102: float2               ( 0 -    271)
  1103: UVforNormalMap       ( 0 -    271)
  1104: =                    ( 0 -    271)
  1105: float2               ( 0 -    271)
  1106: (                    ( 0 -    271)
  1107: 0.000000             ( 0 -    271)
  1108: ,                    ( 0 -    271)
  1109: 0.000000             ( 0 -    271)
  1110: )                    ( 0 -    271)
  1111: ;                    ( 0 -    271)
  1112: float4               ( 0 -    273)
  1113: minHitPos_WS         ( 0 -    273)
  1114: ;                    ( 0 -    273)
  1115: float2               ( 0 -    274)
  1116: minUVforNormalMap    ( 0 -    274)
  1117: =                    ( 0 -    274)
  1118: UVforNormalMap       ( 0 -    274)
  1119: ;                    ( 0 -    274)
  1120: bool                 ( 0 -    276)
  1121: bUseNormal           ( 0 -    276)
  1122: =                    ( 0 -    276)
  1123: useNormalMap         ( 0 -    276)
  1124: >                    ( 0 -    276)
  1125: 0.500000             ( 0 -    276)
  1126: ?                    ( 0 -    276)
  1127: true                 ( 0 -    276)
  1128: :                    ( 0 -    276)
  1129: false                ( 0 -    276)
  1130: ;                    ( 0 -    276)
  1131: float                ( 0 -    278)
  1132: minDist              ( 0 -    278)
  1133: =                    ( 0 -    278)
  1134: 1000000.000000       ( 0 -    278)
  1135: ;                    ( 0 -    278)
  1136: int                  ( 0 -    281)
  1137: shownedReflector     ( 0 -    281)
  1138: =                    ( 0 -    281)
  1139: -                    ( 0 -    281)
  1140: 1                    ( 0 -    281)
  1141: ;                    ( 0 -    281)
  1142: for                  ( 0 -    285)
  1143: (                    ( 0 -    285)
  1144: uint                 ( 0 -    285)
  1145: i                    ( 0 -    285)
  1146: =                    ( 0 -    285)
  1147: 0                    ( 0 -    285)
  1148: ;                    ( 0 -    285)
  1149: i                    ( 0 -    285)
  1150: <                    ( 0 -    285)
  1151: numPlanes            ( 0 -    285)
  1152: ;                    ( 0 -    285)
  1153: i                    ( 0 -    285)
  1154: ++                   ( 0 -    285)
  1155: )                    ( 0 -    285)
  1156: {                    ( 0 -    286)
  1157: if                   ( 0 -    287)
  1158: (                    ( 0 -    287)
  1159: intersectPlane       ( 0 -    287)
  1160: (                    ( 0 -    287)
  1161: i                    ( 0 -    287)
  1162: ,                    ( 0 -    287)
  1163: worldPos             ( 0 -    287)
  1164: .                    ( 0 -    287)
  1165: xyz                  ( 0 -    287)
  1166: ,                    ( 0 -    287)
  1167: input                ( 0 -    287)
  1168: .                    ( 0 -    287)
  1169: uv                   ( 0 -    287)
  1170: ,                    ( 0 -    287)
  1171: HitPos_WS            ( 0 -    287)
  1172: ,                    ( 0 -    287)
  1173: UVforNormalMap       ( 0 -    287)
  1174: )                    ( 0 -    287)
  1175: )                    ( 0 -    287)
  1176: {                    ( 0 -    288)
  1177: float                ( 0 -    289)
  1178: localDist            ( 0 -    289)
  1179: =                    ( 0 -    289)
  1180: distance             ( 0 -    289)
  1181: (                    ( 0 -    289)
  1182: HitPos_WS            ( 0 -    289)
  1183: .                    ( 0 -    289)
  1184: xyz                  ( 0 -    289)
  1185: ,                    ( 0 -    289)
  1186: cameraWorldPos       ( 0 -    289)
  1187: .                    ( 0 -    289)
  1188: xyz                  ( 0 -    289)
  1189: )                    ( 0 -    289)
  1190: ;                    ( 0 -    289)
  1191: if                   ( 0 -    290)
  1192: (                    ( 0 -    290)
  1193: localDist            ( 0 -    290)
  1194: <                    ( 0 -    290)
  1195: minDist              ( 0 -    290)
  1196: )                    ( 0 -    290)
  1197: {                    ( 0 -    291)
  1198: minDist              ( 0 -    292)
  1199: =                    ( 0 -    292)
  1200: localDist            ( 0 -    292)
  1201: ;                    ( 0 -    292)
  1202: minHitPos_WS         ( 0 -    293)
  1203: =                    ( 0 -    293)
  1204: HitPos_WS            ( 0 -    293)
  1205: ;                    ( 0 -    293)
  1206: minUVforNormalMap    ( 0 -    294)
  1207: =                    ( 0 -    294)
  1208: UVforNormalMap       ( 0 -    294)
  1209: ;                    ( 0 -    294)
  1210: shownedReflector     ( 0 -    295)
  1211: =                    ( 0 -    295)
  1212: i                    ( 0 -    295)
  1213: ;                    ( 0 -    295)
  1214: }                    ( 0 -    296)
  1215: bIsInterect          ( 0 -    297)
  1216: =                    ( 0 -    297)
  1217: true                 ( 0 -    297)
  1218: ;                    ( 0 -    297)
  1219: }                    ( 0 -    298)
  1220: }                    ( 0 -    299)
  1221: if                   ( 0 -    303)
  1222: (                    ( 0 -    303)
  1223: !                    ( 0 -    303)
  1224: bIsInterect          ( 0 -    303)
  1225: )                    ( 0 -    303)
  1226: {                    ( 0 -    304)
  1227: InterlockedMax       ( 0 -    306)
  1228: (                    ( 0 -    306)
  1229: IntermediateBuffer   ( 0 -    306)
  1230: [                    ( 0 -    306)
  1231: index                ( 0 -    306)
  1232: ]                    ( 0 -    306)
  1233: ,                    ( 0 -    306)
  1234: (                    ( 0 -    306)
  1235: uint                 ( 0 -    306)
  1236: )                    ( 0 -    306)
  1237: 4294967295           ( 0 -    306)
  1238: )                    ( 0 -    306)
  1239: ;                    ( 0 -    306)
  1240: return               ( 0 -    307)
  1241: outColor             ( 0 -    307)
  1242: ;                    ( 0 -    307)
  1243: }                    ( 0 -    308)
  1244: float2               ( 0 -    311)
  1245: relfectedUV          ( 0 -    311)
  1246: =                    ( 0 -    311)
  1247: input                ( 0 -    311)
  1248: .                    ( 0 -    311)
  1249: uv                   ( 0 -    311)
  1250: +                    ( 0 -    311)
  1251: offset               ( 0 -    311)
  1252: .                    ( 0 -    311)
  1253: xy                   ( 0 -    311)
  1254: ;                    ( 0 -    311)
  1255: float                ( 0 -    313)
  1256: offsetLen            ( 0 -    313)
  1257: =                    ( 0 -    313)
  1258: 340282346638528859811704183484516925440.000000 ( 0 -    313)
  1259: ;                    ( 0 -    313)
  1260: if                   ( 0 -    315)
  1261: (                    ( 0 -    315)
  1262: bufferInfo           ( 0 -    315)
  1263: <                    ( 0 -    315)
  1264: (                    ( 0 -    315)
  1265: uint                 ( 0 -    315)
  1266: )                    ( 0 -    315)
  1267: 4294967295           ( 0 -    315)
  1268: )                    ( 0 -    315)
  1269: {                    ( 0 -    316)
  1270: float                ( 0 -    318)
  1271: correctionPixel      ( 0 -    318)
  1272: =                    ( 0 -    318)
  1273: 1.000000             ( 0 -    318)
  1274: ;                    ( 0 -    318)
  1275: if                   ( 0 -    320)
  1276: (                    ( 0 -    320)
  1277: CoordSys             ( 0 -    320)
  1278: unknown              ( 0 -    320)
  1279: 0                    ( 0 -    320)
  1280: )                    ( 0 -    320)
  1281: relfectedUV          ( 0 -    321)
  1282: =                    ( 0 -    321)
  1283: relfectedUV          ( 0 -    321)
  1284: .                    ( 0 -    321)
  1285: xy                   ( 0 -    321)
  1286: +                    ( 0 -    321)
  1287: float2               ( 0 -    321)
  1288: (                    ( 0 -    321)
  1289: 0.000000             ( 0 -    321)
  1290: ,                    ( 0 -    321)
  1291: correctionPixel      ( 0 -    321)
  1292: /                    ( 0 -    321)
  1293: viewPortSize         ( 0 -    321)
  1294: .                    ( 0 -    321)
  1295: y                    ( 0 -    321)
  1296: )                    ( 0 -    321)
  1297: ;                    ( 0 -    321)
  1298: else if              ( 0 -    322)
  1299: (                    ( 0 -    322)
  1300: CoordSys             ( 0 -    322)
  1301: unknown              ( 0 -    322)
  1302: 1                    ( 0 -    322)
  1303: )                    ( 0 -    322)
  1304: relfectedUV          ( 0 -    323)
  1305: =                    ( 0 -    323)
  1306: relfectedUV          ( 0 -    323)
  1307: .                    ( 0 -    323)
  1308: xy                   ( 0 -    323)
  1309: +                    ( 0 -    323)
  1310: float2               ( 0 -    323)
  1311: (                    ( 0 -    323)
  1312: correctionPixel      ( 0 -    323)
  1313: /                    ( 0 -    323)
  1314: viewPortSize         ( 0 -    323)
  1315: .                    ( 0 -    323)
  1316: x                    ( 0 -    323)
  1317: ,                    ( 0 -    323)
  1318: 0.000000             ( 0 -    323)
  1319: )                    ( 0 -    323)
  1320: ;                    ( 0 -    323)
  1321: else if              ( 0 -    324)
  1322: (                    ( 0 -    324)
  1323: CoordSys             ( 0 -    324)
  1324: unknown              ( 0 -    324)
  1325: 2                    ( 0 -    324)
  1326: )                    ( 0 -    324)
  1327: relfectedUV          ( 0 -    325)
  1328: =                    ( 0 -    325)
  1329: relfectedUV          ( 0 -    325)
  1330: .                    ( 0 -    325)
  1331: xy                   ( 0 -    325)
  1332: -                    ( 0 -    325)
  1333: float2               ( 0 -    325)
  1334: (                    ( 0 -    325)
  1335: 0.000000             ( 0 -    325)
  1336: ,                    ( 0 -    325)
  1337: correctionPixel      ( 0 -    325)
  1338: /                    ( 0 -    325)
  1339: viewPortSize         ( 0 -    325)
  1340: .                    ( 0 -    325)
  1341: y                    ( 0 -    325)
  1342: )                    ( 0 -    325)
  1343: ;                    ( 0 -    325)
  1344: else if              ( 0 -    326)
  1345: (                    ( 0 -    326)
  1346: CoordSys             ( 0 -    326)
  1347: unknown              ( 0 -    326)
  1348: 3                    ( 0 -    326)
  1349: )                    ( 0 -    326)
  1350: relfectedUV          ( 0 -    327)
  1351: =                    ( 0 -    327)
  1352: relfectedUV          ( 0 -    327)
  1353: .                    ( 0 -    327)
  1354: xy                   ( 0 -    327)
  1355: -                    ( 0 -    327)
  1356: float2               ( 0 -    327)
  1357: (                    ( 0 -    327)
  1358: correctionPixel      ( 0 -    327)
  1359: /                    ( 0 -    327)
  1360: viewPortSize         ( 0 -    327)
  1361: .                    ( 0 -    327)
  1362: x                    ( 0 -    327)
  1363: ,                    ( 0 -    327)
  1364: 0.000000             ( 0 -    327)
  1365: )                    ( 0 -    327)
  1366: ;                    ( 0 -    327)
  1367: offsetLen            ( 0 -    329)
  1368: =                    ( 0 -    329)
  1369: length               ( 0 -    329)
  1370: (                    ( 0 -    329)
  1371: offset               ( 0 -    329)
  1372: .                    ( 0 -    329)
  1373: xy                   ( 0 -    329)
  1374: )                    ( 0 -    329)
  1375: ;                    ( 0 -    329)
  1376: outColor             ( 0 -    331)
  1377: =                    ( 0 -    331)
  1378: SceneTexture         ( 0 -    331)
  1379: .                    ( 0 -    331)
  1380: SampleLevel          ( 0 -    331)
  1381: (                    ( 0 -    331)
  1382: defaultSampler       ( 0 -    331)
  1383: ,                    ( 0 -    331)
  1384: relfectedUV          ( 0 -    331)
  1385: ,                    ( 0 -    331)
  1386: 0                    ( 0 -    331)
  1387: )                    ( 0 -    331)
  1388: ;                    ( 0 -    331)
  1389: if                   ( 0 -    333)
  1390: (                    ( 0 -    333)
  1391: useFadeEffect        ( 0 -    333)
  1392: >                    ( 0 -    333)
  1393: 0.500000             ( 0 -    333)
  1394: )                    ( 0 -    333)
  1395: outColor             ( 0 -    334)
  1396: *=                   ( 0 -    334)
  1397: fade                 ( 0 -    334)
  1398: (                    ( 0 -    334)
  1399: relfectedUV          ( 0 -    334)
  1400: )                    ( 0 -    334)
  1401: ;                    ( 0 -    334)
  1402: outColor             ( 0 -    336)
  1403: .                    ( 0 -    336)
  1404: w                    ( 0 -    336)
  1405: =                    ( 0 -    336)
  1406: offsetLen            ( 0 -    336)
  1407: ;                    ( 0 -    336)
  1408: }                    ( 0 -    338)
  1409: else                 ( 0 -    339)
  1410: {                    ( 0 -    340)
  1411: outColor             ( 0 -    341)
  1412: .                    ( 0 -    341)
  1413: w                    ( 0 -    341)
  1414: =                    ( 0 -    341)
  1415: 340282346638528859811704183484516925440.000000 ( 0 -    341)
  1416: ;                    ( 0 -    341)
  1417: }                    ( 0 -    342)
  1418: InterlockedMax       ( 0 -    345)
  1419: (                    ( 0 -    345)
  1420: IntermediateBuffer   ( 0 -    345)
  1421: [                    ( 0 -    345)
  1422: index                ( 0 -    345)
  1423: ]                    ( 0 -    345)
  1424: ,                    ( 0 -    345)
  1425: (                    ( 0 -    345)
  1426: uint                 ( 0 -    345)
  1427: )                    ( 0 -    345)
  1428: 4294967295           ( 0 -    345)
  1429: )                    ( 0 -    345)
  1430: ;                    ( 0 -    345)
  1431: return               ( 0 -    346)
  1432: outColor             ( 0 -    346)
  1433: ;                    ( 0 -    346)
  1434: }                    ( 0 -    347)
  1435: <eof>                ( 0 -    348)

 0: C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/10_PixelProjectedReflections/Shaders/D3D12/PPR_Reflection.frag

