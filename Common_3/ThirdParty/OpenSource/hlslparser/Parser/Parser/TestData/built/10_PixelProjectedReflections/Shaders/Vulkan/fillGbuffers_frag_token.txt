     0: cbuffer              ( 0 -     25)
     1: cbCamera             ( 0 -     25)
     2: :                    ( 0 -     25)
     3: register             ( 0 -     25)
     4: (                    ( 0 -     25)
     5: b0                   ( 0 -     25)
     6: ,                    ( 0 -     25)
     7: space1               ( 0 -     25)
     8: )                    ( 0 -     25)
     9: {                    ( 0 -     26)
    10: float4x4             ( 0 -     27)
    11: projView             ( 0 -     27)
    12: ;                    ( 0 -     27)
    13: float3               ( 0 -     28)
    14: camPos               ( 0 -     28)
    15: ;                    ( 0 -     28)
    16: }                    ( 0 -     29)
    17: cbuffer              ( 0 -     31)
    18: cbObject             ( 0 -     31)
    19: :                    ( 0 -     31)
    20: register             ( 0 -     31)
    21: (                    ( 0 -     31)
    22: b1                   ( 0 -     31)
    23: ,                    ( 0 -     31)
    24: space3               ( 0 -     31)
    25: )                    ( 0 -     31)
    26: {                    ( 0 -     32)
    27: float4x4             ( 0 -     33)
    28: worldMat             ( 0 -     33)
    29: ;                    ( 0 -     33)
    30: float                ( 0 -     34)
    31: roughness            ( 0 -     34)
    32: ;                    ( 0 -     34)
    33: float                ( 0 -     35)
    34: metalness            ( 0 -     35)
    35: ;                    ( 0 -     35)
    36: int                  ( 0 -     36)
    37: pbrMaterials         ( 0 -     36)
    38: ;                    ( 0 -     36)
    39: }                    ( 0 -     37)
    40: cbuffer              ( 0 -     39)
    41: cbTextureRootConstants ( 0 -     39)
    42: :                    ( 0 -     39)
    43: register             ( 0 -     39)
    44: (                    ( 0 -     39)
    45: b2                   ( 0 -     39)
    46: )                    ( 0 -     39)
    47: {                    ( 0 -     40)
    48: uint                 ( 0 -     41)
    49: albedoMap            ( 0 -     41)
    50: ;                    ( 0 -     41)
    51: uint                 ( 0 -     42)
    52: normalMap            ( 0 -     42)
    53: ;                    ( 0 -     42)
    54: uint                 ( 0 -     43)
    55: metallicMap          ( 0 -     43)
    56: ;                    ( 0 -     43)
    57: uint                 ( 0 -     44)
    58: roughnessMap         ( 0 -     44)
    59: ;                    ( 0 -     44)
    60: uint                 ( 0 -     45)
    61: aoMap                ( 0 -     45)
    62: ;                    ( 0 -     45)
    63: }                    ( 0 -     46)
    64: SamplerState         ( 0 -     48)
    65: defaultSampler       ( 0 -     48)
    66: :                    ( 0 -     48)
    67: register             ( 0 -     48)
    68: (                    ( 0 -     48)
    69: s2                   ( 0 -     48)
    70: )                    ( 0 -     48)
    71: ;                    ( 0 -     48)
    72: Texture2D            ( 0 -     51)
    73: textureMaps          ( 0 -     51)
    74: [                    ( 0 -     51)
    75: ]                    ( 0 -     51)
    76: :                    ( 0 -     51)
    77: register             ( 0 -     51)
    78: (                    ( 0 -     51)
    79: t3                   ( 0 -     51)
    80: ,                    ( 0 -     51)
    81: space10              ( 0 -     51)
    82: )                    ( 0 -     51)
    83: ;                    ( 0 -     51)
    84: float3               ( 0 -     53)
    85: reconstructNormal    ( 0 -     53)
    86: (                    ( 0 -     53)
    87: in                   ( 0 -     53)
    88: float4               ( 0 -     53)
    89: sampleNormal         ( 0 -     53)
    90: )                    ( 0 -     53)
    91: {                    ( 0 -     54)
    92: float3               ( 0 -     55)
    93: tangentNormal        ( 0 -     55)
    94: ;                    ( 0 -     55)
    95: tangentNormal        ( 0 -     56)
    96: .                    ( 0 -     56)
    97: xy                   ( 0 -     56)
    98: =                    ( 0 -     56)
    99: sampleNormal         ( 0 -     56)
   100: .                    ( 0 -     56)
   101: rg                   ( 0 -     56)
   102: *                    ( 0 -     56)
   103: 2                    ( 0 -     56)
   104: -                    ( 0 -     56)
   105: 1                    ( 0 -     56)
   106: ;                    ( 0 -     56)
   107: tangentNormal        ( 0 -     57)
   108: .                    ( 0 -     57)
   109: z                    ( 0 -     57)
   110: =                    ( 0 -     57)
   111: sqrt                 ( 0 -     57)
   112: (                    ( 0 -     57)
   113: 1                    ( 0 -     57)
   114: -                    ( 0 -     57)
   115: saturate             ( 0 -     57)
   116: (                    ( 0 -     57)
   117: dot                  ( 0 -     57)
   118: (                    ( 0 -     57)
   119: tangentNormal        ( 0 -     57)
   120: .                    ( 0 -     57)
   121: xy                   ( 0 -     57)
   122: ,                    ( 0 -     57)
   123: tangentNormal        ( 0 -     57)
   124: .                    ( 0 -     57)
   125: xy                   ( 0 -     57)
   126: )                    ( 0 -     57)
   127: )                    ( 0 -     57)
   128: )                    ( 0 -     57)
   129: ;                    ( 0 -     57)
   130: return               ( 0 -     58)
   131: tangentNormal        ( 0 -     58)
   132: ;                    ( 0 -     58)
   133: }                    ( 0 -     59)
   134: float3               ( 0 -     61)
   135: getNormalFromMap     ( 0 -     61)
   136: (                    ( 0 -     61)
   137: float3               ( 0 -     61)
   138: pos                  ( 0 -     61)
   139: ,                    ( 0 -     61)
   140: float3               ( 0 -     61)
   141: normal               ( 0 -     61)
   142: ,                    ( 0 -     61)
   143: float2               ( 0 -     61)
   144: uv                   ( 0 -     61)
   145: )                    ( 0 -     61)
   146: {                    ( 0 -     62)
   147: float3               ( 0 -     63)
   148: tangentNormal        ( 0 -     63)
   149: =                    ( 0 -     63)
   150: reconstructNormal    ( 0 -     63)
   151: (                    ( 0 -     63)
   152: textureMaps          ( 0 -     63)
   153: [                    ( 0 -     63)
   154: normalMap            ( 0 -     63)
   155: ]                    ( 0 -     63)
   156: .                    ( 0 -     63)
   157: Sample               ( 0 -     63)
   158: (                    ( 0 -     63)
   159: defaultSampler       ( 0 -     63)
   160: ,                    ( 0 -     63)
   161: uv                   ( 0 -     63)
   162: )                    ( 0 -     63)
   163: )                    ( 0 -     63)
   164: ;                    ( 0 -     63)
   165: float3               ( 0 -     65)
   166: Q1                   ( 0 -     65)
   167: =                    ( 0 -     65)
   168: ddx                  ( 0 -     65)
   169: (                    ( 0 -     65)
   170: pos                  ( 0 -     65)
   171: )                    ( 0 -     65)
   172: ;                    ( 0 -     65)
   173: float3               ( 0 -     66)
   174: Q2                   ( 0 -     66)
   175: =                    ( 0 -     66)
   176: ddy                  ( 0 -     66)
   177: (                    ( 0 -     66)
   178: pos                  ( 0 -     66)
   179: )                    ( 0 -     66)
   180: ;                    ( 0 -     66)
   181: float2               ( 0 -     67)
   182: st1                  ( 0 -     67)
   183: =                    ( 0 -     67)
   184: ddx                  ( 0 -     67)
   185: (                    ( 0 -     67)
   186: uv                   ( 0 -     67)
   187: )                    ( 0 -     67)
   188: ;                    ( 0 -     67)
   189: float2               ( 0 -     68)
   190: st2                  ( 0 -     68)
   191: =                    ( 0 -     68)
   192: ddy                  ( 0 -     68)
   193: (                    ( 0 -     68)
   194: uv                   ( 0 -     68)
   195: )                    ( 0 -     68)
   196: ;                    ( 0 -     68)
   197: float3               ( 0 -     70)
   198: N                    ( 0 -     70)
   199: =                    ( 0 -     70)
   200: normalize            ( 0 -     70)
   201: (                    ( 0 -     70)
   202: normal               ( 0 -     70)
   203: )                    ( 0 -     70)
   204: ;                    ( 0 -     70)
   205: float3               ( 0 -     71)
   206: T                    ( 0 -     71)
   207: =                    ( 0 -     71)
   208: normalize            ( 0 -     71)
   209: (                    ( 0 -     71)
   210: Q1                   ( 0 -     71)
   211: *                    ( 0 -     71)
   212: st2                  ( 0 -     71)
   213: .                    ( 0 -     71)
   214: y                    ( 0 -     71)
   215: -                    ( 0 -     71)
   216: Q2                   ( 0 -     71)
   217: *                    ( 0 -     71)
   218: st1                  ( 0 -     71)
   219: .                    ( 0 -     71)
   220: y                    ( 0 -     71)
   221: )                    ( 0 -     71)
   222: ;                    ( 0 -     71)
   223: float3               ( 0 -     72)
   224: B                    ( 0 -     72)
   225: =                    ( 0 -     72)
   226: -                    ( 0 -     72)
   227: normalize            ( 0 -     72)
   228: (                    ( 0 -     72)
   229: cross                ( 0 -     72)
   230: (                    ( 0 -     72)
   231: N                    ( 0 -     72)
   232: ,                    ( 0 -     72)
   233: T                    ( 0 -     72)
   234: )                    ( 0 -     72)
   235: )                    ( 0 -     72)
   236: ;                    ( 0 -     72)
   237: float3x3             ( 0 -     73)
   238: TBN                  ( 0 -     73)
   239: =                    ( 0 -     73)
   240: float3x3             ( 0 -     73)
   241: (                    ( 0 -     73)
   242: T                    ( 0 -     73)
   243: ,                    ( 0 -     73)
   244: B                    ( 0 -     73)
   245: ,                    ( 0 -     73)
   246: N                    ( 0 -     73)
   247: )                    ( 0 -     73)
   248: ;                    ( 0 -     73)
   249: float3               ( 0 -     75)
   250: res                  ( 0 -     75)
   251: =                    ( 0 -     75)
   252: mul                  ( 0 -     75)
   253: (                    ( 0 -     75)
   254: tangentNormal        ( 0 -     75)
   255: ,                    ( 0 -     75)
   256: TBN                  ( 0 -     75)
   257: )                    ( 0 -     75)
   258: ;                    ( 0 -     75)
   259: return               ( 0 -     76)
   260: res                  ( 0 -     76)
   261: ;                    ( 0 -     76)
   262: }                    ( 0 -     77)
   263: struct               ( 0 -     79)
   264: PsIn                 ( 0 -     79)
   265: {                    ( 0 -     80)
   266: float4               ( 0 -     81)
   267: position             ( 0 -     81)
   268: :                    ( 0 -     81)
   269: SV_Position          ( 0 -     81)
   270: ;                    ( 0 -     81)
   271: float3               ( 0 -     83)
   272: normal               ( 0 -     83)
   273: :                    ( 0 -     83)
   274: TEXCOORD0            ( 0 -     83)
   275: ;                    ( 0 -     83)
   276: float3               ( 0 -     84)
   277: pos                  ( 0 -     84)
   278: :                    ( 0 -     84)
   279: TEXCOORD1            ( 0 -     84)
   280: ;                    ( 0 -     84)
   281: float2               ( 0 -     85)
   282: uv                   ( 0 -     85)
   283: :                    ( 0 -     85)
   284: TEXCOORD2            ( 0 -     85)
   285: ;                    ( 0 -     85)
   286: }                    ( 0 -     86)
   287: ;                    ( 0 -     86)
   288: struct               ( 0 -     88)
   289: PSOut                ( 0 -     88)
   290: {                    ( 0 -     89)
   291: float4               ( 0 -     90)
   292: albedo               ( 0 -     90)
   293: :                    ( 0 -     90)
   294: SV_Target0           ( 0 -     90)
   295: ;                    ( 0 -     90)
   296: float4               ( 0 -     91)
   297: normal               ( 0 -     91)
   298: :                    ( 0 -     91)
   299: SV_Target1           ( 0 -     91)
   300: ;                    ( 0 -     91)
   301: float4               ( 0 -     92)
   302: specular             ( 0 -     92)
   303: :                    ( 0 -     92)
   304: SV_Target2           ( 0 -     92)
   305: ;                    ( 0 -     92)
   306: }                    ( 0 -     93)
   307: ;                    ( 0 -     93)
   308: PSOut                ( 0 -     96)
   309: main                 ( 0 -     96)
   310: (                    ( 0 -     96)
   311: PsIn                 ( 0 -     96)
   312: input                ( 0 -     96)
   313: )                    ( 0 -     96)
   314: :                    ( 0 -     96)
   315: SV_TARGET            ( 0 -     96)
   316: {                    ( 0 -     97)
   317: PSOut                ( 0 -     98)
   318: Out                  ( 0 -     98)
   319: ;                    ( 0 -     98)
   320: float                ( 0 -    101)
   321: alpha                ( 0 -    101)
   322: =                    ( 0 -    101)
   323: textureMaps          ( 0 -    101)
   324: [                    ( 0 -    101)
   325: albedoMap            ( 0 -    101)
   326: ]                    ( 0 -    101)
   327: .                    ( 0 -    101)
   328: Sample               ( 0 -    101)
   329: (                    ( 0 -    101)
   330: defaultSampler       ( 0 -    101)
   331: ,                    ( 0 -    101)
   332: input                ( 0 -    101)
   333: .                    ( 0 -    101)
   334: uv                   ( 0 -    101)
   335: )                    ( 0 -    101)
   336: .                    ( 0 -    101)
   337: a                    ( 0 -    101)
   338: ;                    ( 0 -    101)
   339: if                   ( 0 -    103)
   340: (                    ( 0 -    103)
   341: alpha                ( 0 -    103)
   342: <                    ( 0 -    103)
   343: 0.500000             ( 0 -    103)
   344: )                    ( 0 -    103)
   345: discard              ( 0 -    104)
   346: ;                    ( 0 -    104)
   347: float3               ( 0 -    107)
   348: albedo               ( 0 -    107)
   349: =                    ( 0 -    107)
   350: float3               ( 0 -    107)
   351: (                    ( 0 -    107)
   352: 0.500000             ( 0 -    107)
   353: ,                    ( 0 -    107)
   354: 0.000000             ( 0 -    107)
   355: ,                    ( 0 -    107)
   356: 0.000000             ( 0 -    107)
   357: )                    ( 0 -    107)
   358: ;                    ( 0 -    107)
   359: float                ( 0 -    109)
   360: _roughness           ( 0 -    109)
   361: =                    ( 0 -    109)
   362: roughness            ( 0 -    109)
   363: ;                    ( 0 -    109)
   364: float                ( 0 -    110)
   365: _metalness           ( 0 -    110)
   366: =                    ( 0 -    110)
   367: metalness            ( 0 -    110)
   368: ;                    ( 0 -    110)
   369: float                ( 0 -    111)
   370: ao                   ( 0 -    111)
   371: =                    ( 0 -    111)
   372: 1.000000             ( 0 -    111)
   373: ;                    ( 0 -    111)
   374: float3               ( 0 -    113)
   375: N                    ( 0 -    113)
   376: =                    ( 0 -    113)
   377: normalize            ( 0 -    113)
   378: (                    ( 0 -    113)
   379: input                ( 0 -    113)
   380: .                    ( 0 -    113)
   381: normal               ( 0 -    113)
   382: )                    ( 0 -    113)
   383: ;                    ( 0 -    113)
   384: if                   ( 0 -    117)
   385: (                    ( 0 -    117)
   386: pbrMaterials         ( 0 -    117)
   387: unknown              ( 0 -    117)
   388: -                    ( 0 -    117)
   389: 1                    ( 0 -    117)
   390: )                    ( 0 -    117)
   391: {                    ( 0 -    117)
   392: N                    ( 0 -    119)
   393: =                    ( 0 -    119)
   394: getNormalFromMap     ( 0 -    119)
   395: (                    ( 0 -    119)
   396: input                ( 0 -    119)
   397: .                    ( 0 -    119)
   398: pos                  ( 0 -    119)
   399: ,                    ( 0 -    119)
   400: input                ( 0 -    119)
   401: .                    ( 0 -    119)
   402: normal               ( 0 -    119)
   403: ,                    ( 0 -    119)
   404: input                ( 0 -    119)
   405: .                    ( 0 -    119)
   406: uv                   ( 0 -    119)
   407: )                    ( 0 -    119)
   408: ;                    ( 0 -    119)
   409: albedo               ( 0 -    120)
   410: =                    ( 0 -    120)
   411: pow                  ( 0 -    120)
   412: (                    ( 0 -    120)
   413: textureMaps          ( 0 -    120)
   414: [                    ( 0 -    120)
   415: albedoMap            ( 0 -    120)
   416: ]                    ( 0 -    120)
   417: .                    ( 0 -    120)
   418: Sample               ( 0 -    120)
   419: (                    ( 0 -    120)
   420: defaultSampler       ( 0 -    120)
   421: ,                    ( 0 -    120)
   422: input                ( 0 -    120)
   423: .                    ( 0 -    120)
   424: uv                   ( 0 -    120)
   425: )                    ( 0 -    120)
   426: .                    ( 0 -    120)
   427: rgb                  ( 0 -    120)
   428: ,                    ( 0 -    120)
   429: float3               ( 0 -    120)
   430: (                    ( 0 -    120)
   431: 2.200000             ( 0 -    120)
   432: ,                    ( 0 -    120)
   433: 2.200000             ( 0 -    120)
   434: ,                    ( 0 -    120)
   435: 2.200000             ( 0 -    120)
   436: )                    ( 0 -    120)
   437: )                    ( 0 -    120)
   438: ;                    ( 0 -    120)
   439: _metalness           ( 0 -    121)
   440: =                    ( 0 -    121)
   441: textureMaps          ( 0 -    121)
   442: [                    ( 0 -    121)
   443: metallicMap          ( 0 -    121)
   444: ]                    ( 0 -    121)
   445: .                    ( 0 -    121)
   446: Sample               ( 0 -    121)
   447: (                    ( 0 -    121)
   448: defaultSampler       ( 0 -    121)
   449: ,                    ( 0 -    121)
   450: input                ( 0 -    121)
   451: .                    ( 0 -    121)
   452: uv                   ( 0 -    121)
   453: )                    ( 0 -    121)
   454: .                    ( 0 -    121)
   455: r                    ( 0 -    121)
   456: ;                    ( 0 -    121)
   457: _roughness           ( 0 -    122)
   458: =                    ( 0 -    122)
   459: textureMaps          ( 0 -    122)
   460: [                    ( 0 -    122)
   461: roughnessMap         ( 0 -    122)
   462: ]                    ( 0 -    122)
   463: .                    ( 0 -    122)
   464: Sample               ( 0 -    122)
   465: (                    ( 0 -    122)
   466: defaultSampler       ( 0 -    122)
   467: ,                    ( 0 -    122)
   468: input                ( 0 -    122)
   469: .                    ( 0 -    122)
   470: uv                   ( 0 -    122)
   471: )                    ( 0 -    122)
   472: .                    ( 0 -    122)
   473: r                    ( 0 -    122)
   474: ;                    ( 0 -    122)
   475: ao                   ( 0 -    123)
   476: =                    ( 0 -    123)
   477: textureMaps          ( 0 -    123)
   478: [                    ( 0 -    123)
   479: aoMap                ( 0 -    123)
   480: ]                    ( 0 -    123)
   481: .                    ( 0 -    123)
   482: SampleLevel          ( 0 -    123)
   483: (                    ( 0 -    123)
   484: defaultSampler       ( 0 -    123)
   485: ,                    ( 0 -    123)
   486: input                ( 0 -    123)
   487: .                    ( 0 -    123)
   488: uv                   ( 0 -    123)
   489: ,                    ( 0 -    123)
   490: 0                    ( 0 -    123)
   491: )                    ( 0 -    123)
   492: .                    ( 0 -    123)
   493: r                    ( 0 -    123)
   494: ;                    ( 0 -    123)
   495: }                    ( 0 -    124)
   496: if                   ( 0 -    126)
   497: (                    ( 0 -    126)
   498: pbrMaterials         ( 0 -    126)
   499: unknown              ( 0 -    126)
   500: 2                    ( 0 -    126)
   501: )                    ( 0 -    126)
   502: {                    ( 0 -    126)
   503: albedo               ( 0 -    129)
   504: =                    ( 0 -    129)
   505: float3               ( 0 -    129)
   506: (                    ( 0 -    129)
   507: 0.700000             ( 0 -    129)
   508: ,                    ( 0 -    129)
   509: 0.700000             ( 0 -    129)
   510: ,                    ( 0 -    129)
   511: 0.700000             ( 0 -    129)
   512: )                    ( 0 -    129)
   513: ;                    ( 0 -    129)
   514: _roughness           ( 0 -    130)
   515: =                    ( 0 -    130)
   516: roughness            ( 0 -    130)
   517: ;                    ( 0 -    130)
   518: _metalness           ( 0 -    131)
   519: =                    ( 0 -    131)
   520: metalness            ( 0 -    131)
   521: ;                    ( 0 -    131)
   522: ao                   ( 0 -    132)
   523: =                    ( 0 -    132)
   524: 1.000000             ( 0 -    132)
   525: ;                    ( 0 -    132)
   526: }                    ( 0 -    133)
   527: Out                  ( 0 -    135)
   528: .                    ( 0 -    135)
   529: albedo               ( 0 -    135)
   530: =                    ( 0 -    135)
   531: float4               ( 0 -    135)
   532: (                    ( 0 -    135)
   533: albedo               ( 0 -    135)
   534: ,                    ( 0 -    135)
   535: alpha                ( 0 -    135)
   536: )                    ( 0 -    135)
   537: ;                    ( 0 -    135)
   538: Out                  ( 0 -    136)
   539: .                    ( 0 -    136)
   540: normal               ( 0 -    136)
   541: =                    ( 0 -    136)
   542: float4               ( 0 -    136)
   543: (                    ( 0 -    136)
   544: N                    ( 0 -    136)
   545: ,                    ( 0 -    136)
   546: _metalness           ( 0 -    136)
   547: )                    ( 0 -    136)
   548: ;                    ( 0 -    136)
   549: Out                  ( 0 -    137)
   550: .                    ( 0 -    137)
   551: specular             ( 0 -    137)
   552: =                    ( 0 -    137)
   553: float4               ( 0 -    137)
   554: (                    ( 0 -    137)
   555: _roughness           ( 0 -    137)
   556: ,                    ( 0 -    137)
   557: ao                   ( 0 -    137)
   558: ,                    ( 0 -    137)
   559: input                ( 0 -    137)
   560: .                    ( 0 -    137)
   561: uv                   ( 0 -    137)
   562: )                    ( 0 -    137)
   563: ;                    ( 0 -    137)
   564: return               ( 0 -    139)
   565: Out                  ( 0 -    139)
   566: ;                    ( 0 -    139)
   567: }                    ( 0 -    140)
   568: <eof>                ( 0 -    141)

 0: C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/10_PixelProjectedReflections/Shaders/D3D12/fillGbuffers.frag

