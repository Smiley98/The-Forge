     0: struct               ( 0 -     48)
     1: AOITNode             ( 0 -     48)
     2: {                    ( 0 -     49)
     3: float                ( 0 -     50)
     4: depth                ( 0 -     50)
     5: ;                    ( 0 -     50)
     6: float                ( 0 -     51)
     7: trans                ( 0 -     51)
     8: ;                    ( 0 -     51)
     9: uint                 ( 0 -     52)
    10: color                ( 0 -     52)
    11: ;                    ( 0 -     52)
    12: }                    ( 0 -     53)
    13: ;                    ( 0 -     53)
    14: struct               ( 0 -     55)
    15: AOITControlSurface   ( 0 -     55)
    16: {                    ( 0 -     56)
    17: bool                 ( 0 -     57)
    18: clear                ( 0 -     57)
    19: ;                    ( 0 -     57)
    20: bool                 ( 0 -     58)
    21: opaque               ( 0 -     58)
    22: ;                    ( 0 -     58)
    23: float                ( 0 -     59)
    24: depth                ( 0 -     59)
    25: ;                    ( 0 -     59)
    26: }                    ( 0 -     60)
    27: ;                    ( 0 -     60)
    28: struct               ( 0 -     62)
    29: AOITData             ( 0 -     62)
    30: {                    ( 0 -     63)
    31: float4               ( 0 -     64)
    32: depth                ( 0 -     64)
    33: [                    ( 0 -     64)
    34: (                    ( 0 -     64)
    35: (                    ( 0 -     64)
    36: 4                    ( 0 -     64)
    37: )                    ( 0 -     64)
    38: /                    ( 0 -     64)
    39: 4                    ( 0 -     64)
    40: )                    ( 0 -     64)
    41: ]                    ( 0 -     64)
    42: ;                    ( 0 -     64)
    43: uint4                ( 0 -     65)
    44: color                ( 0 -     65)
    45: [                    ( 0 -     65)
    46: (                    ( 0 -     65)
    47: (                    ( 0 -     65)
    48: 4                    ( 0 -     65)
    49: )                    ( 0 -     65)
    50: /                    ( 0 -     65)
    51: 4                    ( 0 -     65)
    52: )                    ( 0 -     65)
    53: ]                    ( 0 -     65)
    54: ;                    ( 0 -     65)
    55: }                    ( 0 -     66)
    56: ;                    ( 0 -     66)
    57: struct               ( 0 -     68)
    58: AOITDepthData        ( 0 -     68)
    59: {                    ( 0 -     69)
    60: float4               ( 0 -     70)
    61: depth                ( 0 -     70)
    62: [                    ( 0 -     70)
    63: (                    ( 0 -     70)
    64: (                    ( 0 -     70)
    65: 4                    ( 0 -     70)
    66: )                    ( 0 -     70)
    67: /                    ( 0 -     70)
    68: 4                    ( 0 -     70)
    69: )                    ( 0 -     70)
    70: ]                    ( 0 -     70)
    71: ;                    ( 0 -     70)
    72: }                    ( 0 -     71)
    73: ;                    ( 0 -     71)
    74: struct               ( 0 -     73)
    75: AOITColorData        ( 0 -     73)
    76: {                    ( 0 -     74)
    77: uint4                ( 0 -     75)
    78: color                ( 0 -     75)
    79: [                    ( 0 -     75)
    80: (                    ( 0 -     75)
    81: (                    ( 0 -     75)
    82: 4                    ( 0 -     75)
    83: )                    ( 0 -     75)
    84: /                    ( 0 -     75)
    85: 4                    ( 0 -     75)
    86: )                    ( 0 -     75)
    87: ]                    ( 0 -     75)
    88: ;                    ( 0 -     75)
    89: }                    ( 0 -     76)
    90: ;                    ( 0 -     76)
    91: RasterizerOrderedTexture2D ( 0 -     90)
    92: <                    ( 0 -     90)
    93: uint                 ( 0 -     90)
    94: >                    ( 0 -     90)
    95: AOITClearMaskUAV     ( 0 -     90)
    96: :                    ( 0 -     90)
    97: register             ( 0 -     90)
    98: (                    ( 0 -     90)
    99: u0                   ( 0 -     90)
   100: ,                    ( 0 -     90)
   101: space0               ( 0 -     90)
   102: )                    ( 0 -     90)
   103: ;                    ( 0 -     90)
   104: RWStructuredBuffer   ( 0 -     91)
   105: <                    ( 0 -     91)
   106: AOITDepthData        ( 0 -     91)
   107: >                    ( 0 -     91)
   108: AOITDepthDataUAV     ( 0 -     91)
   109: :                    ( 0 -     91)
   110: register             ( 0 -     91)
   111: (                    ( 0 -     91)
   112: u1                   ( 0 -     91)
   113: ,                    ( 0 -     91)
   114: space0               ( 0 -     91)
   115: )                    ( 0 -     91)
   116: ;                    ( 0 -     91)
   117: RWStructuredBuffer   ( 0 -     92)
   118: <                    ( 0 -     92)
   119: AOITColorData        ( 0 -     92)
   120: >                    ( 0 -     92)
   121: AOITColorDataUAV     ( 0 -     92)
   122: :                    ( 0 -     92)
   123: register             ( 0 -     92)
   124: (                    ( 0 -     92)
   125: u2                   ( 0 -     92)
   126: ,                    ( 0 -     92)
   127: space0               ( 0 -     92)
   128: )                    ( 0 -     92)
   129: ;                    ( 0 -     92)
   130: uint                 ( 0 -    103)
   131: PackRGB              ( 0 -    103)
   132: (                    ( 0 -    103)
   133: float3               ( 0 -    103)
   134: color                ( 0 -    103)
   135: )                    ( 0 -    103)
   136: {                    ( 0 -    104)
   137: uint3                ( 0 -    105)
   138: u                    ( 0 -    105)
   139: =                    ( 0 -    105)
   140: (                    ( 0 -    105)
   141: uint3                ( 0 -    105)
   142: )                    ( 0 -    105)
   143: (                    ( 0 -    105)
   144: saturate             ( 0 -    105)
   145: (                    ( 0 -    105)
   146: color                ( 0 -    105)
   147: )                    ( 0 -    105)
   148: *                    ( 0 -    105)
   149: 255                  ( 0 -    105)
   150: +                    ( 0 -    105)
   151: 0.500000             ( 0 -    105)
   152: )                    ( 0 -    105)
   153: ;                    ( 0 -    105)
   154: uint                 ( 0 -    106)
   155: packedOutput         ( 0 -    106)
   156: =                    ( 0 -    106)
   157: (                    ( 0 -    106)
   158: u                    ( 0 -    106)
   159: .                    ( 0 -    106)
   160: z                    ( 0 -    106)
   161: unknown              ( 0 -    106)
   162: 16                   ( 0 -    106)
   163: )                    ( 0 -    106)
   164: |                    ( 0 -    106)
   165: (                    ( 0 -    106)
   166: u                    ( 0 -    106)
   167: .                    ( 0 -    106)
   168: y                    ( 0 -    106)
   169: unknown              ( 0 -    106)
   170: 8                    ( 0 -    106)
   171: )                    ( 0 -    106)
   172: |                    ( 0 -    106)
   173: u                    ( 0 -    106)
   174: .                    ( 0 -    106)
   175: x                    ( 0 -    106)
   176: ;                    ( 0 -    106)
   177: return               ( 0 -    107)
   178: packedOutput         ( 0 -    107)
   179: ;                    ( 0 -    107)
   180: }                    ( 0 -    108)
   181: float3               ( 0 -    110)
   182: UnpackRGB            ( 0 -    110)
   183: (                    ( 0 -    110)
   184: uint                 ( 0 -    110)
   185: packedInput          ( 0 -    110)
   186: )                    ( 0 -    110)
   187: {                    ( 0 -    111)
   188: float3               ( 0 -    112)
   189: unpackedOutput       ( 0 -    112)
   190: ;                    ( 0 -    112)
   191: uint3                ( 0 -    113)
   192: p                    ( 0 -    113)
   193: =                    ( 0 -    113)
   194: uint3                ( 0 -    113)
   195: (                    ( 0 -    113)
   196: (                    ( 0 -    113)
   197: packedInput          ( 0 -    113)
   198: &                    ( 0 -    113)
   199: 255                  ( 0 -    113)
   200: )                    ( 0 -    113)
   201: ,                    ( 0 -    113)
   202: (                    ( 0 -    114)
   203: packedInput          ( 0 -    114)
   204: unknown              ( 0 -    114)
   205: 8                    ( 0 -    114)
   206: )                    ( 0 -    114)
   207: &                    ( 0 -    114)
   208: 255                  ( 0 -    114)
   209: ,                    ( 0 -    114)
   210: (                    ( 0 -    115)
   211: packedInput          ( 0 -    115)
   212: unknown              ( 0 -    115)
   213: 16                   ( 0 -    115)
   214: )                    ( 0 -    115)
   215: &                    ( 0 -    115)
   216: 255                  ( 0 -    115)
   217: )                    ( 0 -    115)
   218: ;                    ( 0 -    115)
   219: unpackedOutput       ( 0 -    117)
   220: =                    ( 0 -    117)
   221: (                    ( 0 -    117)
   222: (                    ( 0 -    117)
   223: float3               ( 0 -    117)
   224: )                    ( 0 -    117)
   225: p                    ( 0 -    117)
   226: )                    ( 0 -    117)
   227: /                    ( 0 -    117)
   228: 255                  ( 0 -    117)
   229: ;                    ( 0 -    117)
   230: return               ( 0 -    118)
   231: unpackedOutput       ( 0 -    118)
   232: ;                    ( 0 -    118)
   233: }                    ( 0 -    119)
   234: uint                 ( 0 -    121)
   235: PackRGBA             ( 0 -    121)
   236: (                    ( 0 -    121)
   237: float4               ( 0 -    121)
   238: color                ( 0 -    121)
   239: )                    ( 0 -    121)
   240: {                    ( 0 -    122)
   241: uint4                ( 0 -    123)
   242: u                    ( 0 -    123)
   243: =                    ( 0 -    123)
   244: (                    ( 0 -    123)
   245: uint4                ( 0 -    123)
   246: )                    ( 0 -    123)
   247: (                    ( 0 -    123)
   248: saturate             ( 0 -    123)
   249: (                    ( 0 -    123)
   250: color                ( 0 -    123)
   251: )                    ( 0 -    123)
   252: *                    ( 0 -    123)
   253: 255                  ( 0 -    123)
   254: +                    ( 0 -    123)
   255: 0.500000             ( 0 -    123)
   256: )                    ( 0 -    123)
   257: ;                    ( 0 -    123)
   258: uint                 ( 0 -    124)
   259: packedOutput         ( 0 -    124)
   260: =                    ( 0 -    124)
   261: (                    ( 0 -    124)
   262: u                    ( 0 -    124)
   263: .                    ( 0 -    124)
   264: w                    ( 0 -    124)
   265: unknown              ( 0 -    124)
   266: 24                   ( 0 -    124)
   267: )                    ( 0 -    124)
   268: |                    ( 0 -    124)
   269: (                    ( 0 -    124)
   270: u                    ( 0 -    124)
   271: .                    ( 0 -    124)
   272: z                    ( 0 -    124)
   273: unknown              ( 0 -    124)
   274: 16                   ( 0 -    124)
   275: )                    ( 0 -    124)
   276: |                    ( 0 -    124)
   277: (                    ( 0 -    124)
   278: u                    ( 0 -    124)
   279: .                    ( 0 -    124)
   280: y                    ( 0 -    124)
   281: unknown              ( 0 -    124)
   282: 8                    ( 0 -    124)
   283: )                    ( 0 -    124)
   284: |                    ( 0 -    124)
   285: u                    ( 0 -    124)
   286: .                    ( 0 -    124)
   287: x                    ( 0 -    124)
   288: ;                    ( 0 -    124)
   289: return               ( 0 -    125)
   290: packedOutput         ( 0 -    125)
   291: ;                    ( 0 -    125)
   292: }                    ( 0 -    126)
   293: float4               ( 0 -    128)
   294: UnpackRGBA           ( 0 -    128)
   295: (                    ( 0 -    128)
   296: uint                 ( 0 -    128)
   297: packedInput          ( 0 -    128)
   298: )                    ( 0 -    128)
   299: {                    ( 0 -    129)
   300: float4               ( 0 -    130)
   301: unpackedOutput       ( 0 -    130)
   302: ;                    ( 0 -    130)
   303: uint4                ( 0 -    131)
   304: p                    ( 0 -    131)
   305: =                    ( 0 -    131)
   306: uint4                ( 0 -    131)
   307: (                    ( 0 -    131)
   308: (                    ( 0 -    131)
   309: packedInput          ( 0 -    131)
   310: &                    ( 0 -    131)
   311: 255                  ( 0 -    131)
   312: )                    ( 0 -    131)
   313: ,                    ( 0 -    131)
   314: (                    ( 0 -    132)
   315: packedInput          ( 0 -    132)
   316: unknown              ( 0 -    132)
   317: 8                    ( 0 -    132)
   318: )                    ( 0 -    132)
   319: &                    ( 0 -    132)
   320: 255                  ( 0 -    132)
   321: ,                    ( 0 -    132)
   322: (                    ( 0 -    133)
   323: packedInput          ( 0 -    133)
   324: unknown              ( 0 -    133)
   325: 16                   ( 0 -    133)
   326: )                    ( 0 -    133)
   327: &                    ( 0 -    133)
   328: 255                  ( 0 -    133)
   329: ,                    ( 0 -    133)
   330: (                    ( 0 -    134)
   331: packedInput          ( 0 -    134)
   332: unknown              ( 0 -    134)
   333: 24                   ( 0 -    134)
   334: )                    ( 0 -    134)
   335: )                    ( 0 -    134)
   336: ;                    ( 0 -    134)
   337: unpackedOutput       ( 0 -    136)
   338: =                    ( 0 -    136)
   339: (                    ( 0 -    136)
   340: (                    ( 0 -    136)
   341: float4               ( 0 -    136)
   342: )                    ( 0 -    136)
   343: p                    ( 0 -    136)
   344: )                    ( 0 -    136)
   345: /                    ( 0 -    136)
   346: 255                  ( 0 -    136)
   347: ;                    ( 0 -    136)
   348: return               ( 0 -    137)
   349: unpackedOutput       ( 0 -    137)
   350: ;                    ( 0 -    137)
   351: }                    ( 0 -    138)
   352: float                ( 0 -    140)
   353: UnpackUnnormAlpha    ( 0 -    140)
   354: (                    ( 0 -    140)
   355: uint                 ( 0 -    140)
   356: packedInput          ( 0 -    140)
   357: )                    ( 0 -    140)
   358: {                    ( 0 -    141)
   359: return               ( 0 -    142)
   360: (                    ( 0 -    142)
   361: float                ( 0 -    142)
   362: )                    ( 0 -    142)
   363: (                    ( 0 -    142)
   364: packedInput          ( 0 -    142)
   365: unknown              ( 0 -    142)
   366: 24                   ( 0 -    142)
   367: )                    ( 0 -    142)
   368: ;                    ( 0 -    142)
   369: }                    ( 0 -    143)
   370: uint                 ( 0 -    145)
   371: AOITAddrGen          ( 0 -    145)
   372: (                    ( 0 -    145)
   373: uint2                ( 0 -    145)
   374: addr2D               ( 0 -    145)
   375: ,                    ( 0 -    145)
   376: uint                 ( 0 -    145)
   377: width                ( 0 -    145)
   378: )                    ( 0 -    145)
   379: {                    ( 0 -    146)
   380: width                ( 0 -    148)
   381: =                    ( 0 -    148)
   382: width                ( 0 -    148)
   383: unknown              ( 0 -    148)
   384: 1                    ( 0 -    148)
   385: ;                    ( 0 -    148)
   386: uint2                ( 0 -    149)
   387: tileAddr2D           ( 0 -    149)
   388: =                    ( 0 -    149)
   389: addr2D               ( 0 -    149)
   390: unknown              ( 0 -    149)
   391: 1                    ( 0 -    149)
   392: ;                    ( 0 -    149)
   393: uint                 ( 0 -    150)
   394: tileAddr1D           ( 0 -    150)
   395: =                    ( 0 -    150)
   396: (                    ( 0 -    150)
   397: tileAddr2D           ( 0 -    150)
   398: [                    ( 0 -    150)
   399: 0                    ( 0 -    150)
   400: ]                    ( 0 -    150)
   401: +                    ( 0 -    150)
   402: width                ( 0 -    150)
   403: *                    ( 0 -    150)
   404: tileAddr2D           ( 0 -    150)
   405: [                    ( 0 -    150)
   406: 1                    ( 0 -    150)
   407: ]                    ( 0 -    150)
   408: )                    ( 0 -    150)
   409: unknown              ( 0 -    150)
   410: 2                    ( 0 -    150)
   411: ;                    ( 0 -    150)
   412: uint2                ( 0 -    151)
   413: pixelAddr2D          ( 0 -    151)
   414: =                    ( 0 -    151)
   415: addr2D               ( 0 -    151)
   416: &                    ( 0 -    151)
   417: 1                    ( 0 -    151)
   418: ;                    ( 0 -    151)
   419: uint                 ( 0 -    152)
   420: pixelAddr1D          ( 0 -    152)
   421: =                    ( 0 -    152)
   422: (                    ( 0 -    152)
   423: pixelAddr2D          ( 0 -    152)
   424: [                    ( 0 -    152)
   425: 1                    ( 0 -    152)
   426: ]                    ( 0 -    152)
   427: unknown              ( 0 -    152)
   428: 1                    ( 0 -    152)
   429: )                    ( 0 -    152)
   430: +                    ( 0 -    152)
   431: pixelAddr2D          ( 0 -    152)
   432: [                    ( 0 -    152)
   433: 0                    ( 0 -    152)
   434: ]                    ( 0 -    152)
   435: ;                    ( 0 -    152)
   436: return               ( 0 -    153)
   437: tileAddr1D           ( 0 -    153)
   438: |                    ( 0 -    153)
   439: pixelAddr1D          ( 0 -    153)
   440: ;                    ( 0 -    153)
   441: }                    ( 0 -    157)
   442: uint                 ( 0 -    160)
   443: AOITAddrGenUAV       ( 0 -    160)
   444: (                    ( 0 -    160)
   445: uint2                ( 0 -    160)
   446: addr2D               ( 0 -    160)
   447: )                    ( 0 -    160)
   448: {                    ( 0 -    161)
   449: uint2                ( 0 -    162)
   450: dim                  ( 0 -    162)
   451: ;                    ( 0 -    162)
   452: AOITClearMaskUAV     ( 0 -    163)
   453: .                    ( 0 -    163)
   454: GetDimensions        ( 0 -    163)
   455: (                    ( 0 -    163)
   456: dim                  ( 0 -    163)
   457: [                    ( 0 -    163)
   458: 0                    ( 0 -    163)
   459: ]                    ( 0 -    163)
   460: ,                    ( 0 -    163)
   461: dim                  ( 0 -    163)
   462: [                    ( 0 -    163)
   463: 1                    ( 0 -    163)
   464: ]                    ( 0 -    163)
   465: )                    ( 0 -    163)
   466: ;                    ( 0 -    163)
   467: return               ( 0 -    164)
   468: AOITAddrGen          ( 0 -    164)
   469: (                    ( 0 -    164)
   470: addr2D               ( 0 -    164)
   471: ,                    ( 0 -    164)
   472: dim                  ( 0 -    164)
   473: [                    ( 0 -    164)
   474: 0                    ( 0 -    164)
   475: ]                    ( 0 -    164)
   476: )                    ( 0 -    164)
   477: ;                    ( 0 -    164)
   478: }                    ( 0 -    165)
   479: void                 ( 0 -    177)
   480: AOITLoadControlSurface ( 0 -    177)
   481: (                    ( 0 -    177)
   482: in                   ( 0 -    177)
   483: uint                 ( 0 -    177)
   484: data                 ( 0 -    177)
   485: ,                    ( 0 -    177)
   486: inout                ( 0 -    177)
   487: AOITControlSurface   ( 0 -    177)
   488: surface              ( 0 -    177)
   489: )                    ( 0 -    177)
   490: {                    ( 0 -    178)
   491: surface              ( 0 -    179)
   492: .                    ( 0 -    179)
   493: clear                ( 0 -    179)
   494: =                    ( 0 -    179)
   495: data                 ( 0 -    179)
   496: &                    ( 0 -    179)
   497: 1                    ( 0 -    179)
   498: ?                    ( 0 -    179)
   499: true                 ( 0 -    179)
   500: :                    ( 0 -    179)
   501: false                ( 0 -    179)
   502: ;                    ( 0 -    179)
   503: surface              ( 0 -    180)
   504: .                    ( 0 -    180)
   505: opaque               ( 0 -    180)
   506: =                    ( 0 -    180)
   507: data                 ( 0 -    180)
   508: &                    ( 0 -    180)
   509: 2                    ( 0 -    180)
   510: ?                    ( 0 -    180)
   511: true                 ( 0 -    180)
   512: :                    ( 0 -    180)
   513: false                ( 0 -    180)
   514: ;                    ( 0 -    180)
   515: surface              ( 0 -    181)
   516: .                    ( 0 -    181)
   517: depth                ( 0 -    181)
   518: =                    ( 0 -    181)
   519: asfloat              ( 0 -    181)
   520: (                    ( 0 -    181)
   521: (                    ( 0 -    181)
   522: data                 ( 0 -    181)
   523: &                    ( 0 -    181)
   524: 4294967292           ( 0 -    181)
   525: )                    ( 0 -    181)
   526: |                    ( 0 -    181)
   527: 3                    ( 0 -    181)
   528: )                    ( 0 -    181)
   529: ;                    ( 0 -    181)
   530: }                    ( 0 -    182)
   531: void                 ( 0 -    188)
   532: AOITLoadControlSurfaceUAV ( 0 -    188)
   533: (                    ( 0 -    188)
   534: in                   ( 0 -    188)
   535: uint2                ( 0 -    188)
   536: pixelAddr            ( 0 -    188)
   537: ,                    ( 0 -    188)
   538: inout                ( 0 -    188)
   539: AOITControlSurface   ( 0 -    188)
   540: surface              ( 0 -    188)
   541: )                    ( 0 -    188)
   542: {                    ( 0 -    189)
   543: uint                 ( 0 -    190)
   544: data                 ( 0 -    190)
   545: =                    ( 0 -    190)
   546: AOITClearMaskUAV     ( 0 -    190)
   547: [                    ( 0 -    190)
   548: pixelAddr            ( 0 -    190)
   549: ]                    ( 0 -    190)
   550: ;                    ( 0 -    190)
   551: AOITLoadControlSurface ( 0 -    191)
   552: (                    ( 0 -    191)
   553: data                 ( 0 -    191)
   554: ,                    ( 0 -    191)
   555: surface              ( 0 -    191)
   556: )                    ( 0 -    191)
   557: ;                    ( 0 -    191)
   558: }                    ( 0 -    192)
   559: void                 ( 0 -    194)
   560: AOITStoreControlSurfaceUAV ( 0 -    194)
   561: (                    ( 0 -    194)
   562: uint2                ( 0 -    194)
   563: pixelAddr            ( 0 -    194)
   564: ,                    ( 0 -    194)
   565: in                   ( 0 -    194)
   566: AOITControlSurface   ( 0 -    194)
   567: surface              ( 0 -    194)
   568: )                    ( 0 -    194)
   569: {                    ( 0 -    195)
   570: uint                 ( 0 -    196)
   571: data                 ( 0 -    196)
   572: ;                    ( 0 -    196)
   573: data                 ( 0 -    197)
   574: =                    ( 0 -    197)
   575: asuint               ( 0 -    197)
   576: (                    ( 0 -    197)
   577: surface              ( 0 -    197)
   578: .                    ( 0 -    197)
   579: depth                ( 0 -    197)
   580: )                    ( 0 -    197)
   581: &                    ( 0 -    197)
   582: 4294967292           ( 0 -    197)
   583: ;                    ( 0 -    197)
   584: data                 ( 0 -    198)
   585: |=                   ( 0 -    198)
   586: surface              ( 0 -    198)
   587: .                    ( 0 -    198)
   588: opaque               ( 0 -    198)
   589: ?                    ( 0 -    198)
   590: 2                    ( 0 -    198)
   591: :                    ( 0 -    198)
   592: 0                    ( 0 -    198)
   593: ;                    ( 0 -    198)
   594: data                 ( 0 -    199)
   595: |=                   ( 0 -    199)
   596: surface              ( 0 -    199)
   597: .                    ( 0 -    199)
   598: clear                ( 0 -    199)
   599: ?                    ( 0 -    199)
   600: 1                    ( 0 -    199)
   601: :                    ( 0 -    199)
   602: 0                    ( 0 -    199)
   603: ;                    ( 0 -    199)
   604: AOITClearMaskUAV     ( 0 -    200)
   605: [                    ( 0 -    200)
   606: pixelAddr            ( 0 -    200)
   607: ]                    ( 0 -    200)
   608: =                    ( 0 -    200)
   609: data                 ( 0 -    200)
   610: ;                    ( 0 -    200)
   611: }                    ( 0 -    201)
   612: void                 ( 0 -    203)
   613: AOITLoadDataUAV      ( 0 -    203)
   614: (                    ( 0 -    203)
   615: in                   ( 0 -    203)
   616: uint2                ( 0 -    203)
   617: pixelAddr            ( 0 -    203)
   618: ,                    ( 0 -    203)
   619: out                  ( 0 -    203)
   620: AOITNode             ( 0 -    203)
   621: nodeArray            ( 0 -    203)
   622: [                    ( 0 -    203)
   623: (                    ( 0 -    203)
   624: 4                    ( 0 -    203)
   625: )                    ( 0 -    203)
   626: ]                    ( 0 -    203)
   627: )                    ( 0 -    203)
   628: {                    ( 0 -    204)
   629: AOITData             ( 0 -    205)
   630: data                 ( 0 -    205)
   631: ;                    ( 0 -    205)
   632: uint                 ( 0 -    206)
   633: addr                 ( 0 -    206)
   634: =                    ( 0 -    206)
   635: AOITAddrGenUAV       ( 0 -    206)
   636: (                    ( 0 -    206)
   637: pixelAddr            ( 0 -    206)
   638: )                    ( 0 -    206)
   639: ;                    ( 0 -    206)
   640: data                 ( 0 -    207)
   641: .                    ( 0 -    207)
   642: color                ( 0 -    207)
   643: =                    ( 0 -    207)
   644: AOITColorDataUAV     ( 0 -    207)
   645: [                    ( 0 -    207)
   646: addr                 ( 0 -    207)
   647: ]                    ( 0 -    207)
   648: ;                    ( 0 -    207)
   649: data                 ( 0 -    216)
   650: .                    ( 0 -    216)
   651: depth                ( 0 -    216)
   652: =                    ( 0 -    216)
   653: AOITDepthDataUAV     ( 0 -    216)
   654: [                    ( 0 -    216)
   655: addr                 ( 0 -    216)
   656: ]                    ( 0 -    216)
   657: ;                    ( 0 -    216)
   658: [                    ( 0 -    217)
   659: unroll               ( 0 -    217)
   660: ]                    ( 0 -    217)
   661: for                  ( 0 -    217)
   662: (                    ( 0 -    217)
   663: uint                 ( 0 -    217)
   664: i                    ( 0 -    217)
   665: =                    ( 0 -    217)
   666: 0                    ( 0 -    217)
   667: ;                    ( 0 -    217)
   668: i                    ( 0 -    217)
   669: <                    ( 0 -    217)
   670: (                    ( 0 -    217)
   671: (                    ( 0 -    217)
   672: 4                    ( 0 -    217)
   673: )                    ( 0 -    217)
   674: /                    ( 0 -    217)
   675: 4                    ( 0 -    217)
   676: )                    ( 0 -    217)
   677: ;                    ( 0 -    217)
   678: ++                   ( 0 -    217)
   679: i                    ( 0 -    217)
   680: )                    ( 0 -    217)
   681: {                    ( 0 -    218)
   682: [                    ( 0 -    219)
   683: unroll               ( 0 -    219)
   684: ]                    ( 0 -    219)
   685: for                  ( 0 -    219)
   686: (                    ( 0 -    219)
   687: uint                 ( 0 -    219)
   688: j                    ( 0 -    219)
   689: =                    ( 0 -    219)
   690: 0                    ( 0 -    219)
   691: ;                    ( 0 -    219)
   692: j                    ( 0 -    219)
   693: <                    ( 0 -    219)
   694: 4                    ( 0 -    219)
   695: ;                    ( 0 -    219)
   696: ++                   ( 0 -    219)
   697: j                    ( 0 -    219)
   698: )                    ( 0 -    219)
   699: {                    ( 0 -    220)
   700: AOITNode             ( 0 -    221)
   701: node                 ( 0 -    221)
   702: =                    ( 0 -    221)
   703: {                    ( 0 -    221)
   704: data                 ( 0 -    221)
   705: .                    ( 0 -    221)
   706: depth                ( 0 -    221)
   707: [                    ( 0 -    221)
   708: i                    ( 0 -    221)
   709: ]                    ( 0 -    221)
   710: [                    ( 0 -    221)
   711: j                    ( 0 -    221)
   712: ]                    ( 0 -    221)
   713: ,                    ( 0 -    221)
   714: UnpackUnnormAlpha    ( 0 -    222)
   715: (                    ( 0 -    222)
   716: data                 ( 0 -    222)
   717: .                    ( 0 -    222)
   718: color                ( 0 -    222)
   719: [                    ( 0 -    222)
   720: i                    ( 0 -    222)
   721: ]                    ( 0 -    222)
   722: [                    ( 0 -    222)
   723: j                    ( 0 -    222)
   724: ]                    ( 0 -    222)
   725: )                    ( 0 -    222)
   726: ,                    ( 0 -    222)
   727: data                 ( 0 -    223)
   728: .                    ( 0 -    223)
   729: color                ( 0 -    223)
   730: [                    ( 0 -    223)
   731: i                    ( 0 -    223)
   732: ]                    ( 0 -    223)
   733: [                    ( 0 -    223)
   734: j                    ( 0 -    223)
   735: ]                    ( 0 -    223)
   736: &                    ( 0 -    223)
   737: 16777215             ( 0 -    223)
   738: }                    ( 0 -    223)
   739: ;                    ( 0 -    223)
   740: nodeArray            ( 0 -    224)
   741: [                    ( 0 -    224)
   742: 4                    ( 0 -    224)
   743: *                    ( 0 -    224)
   744: i                    ( 0 -    224)
   745: +                    ( 0 -    224)
   746: j                    ( 0 -    224)
   747: ]                    ( 0 -    224)
   748: =                    ( 0 -    224)
   749: node                 ( 0 -    224)
   750: ;                    ( 0 -    224)
   751: }                    ( 0 -    225)
   752: }                    ( 0 -    226)
   753: }                    ( 0 -    228)
   754: void                 ( 0 -    230)
   755: AOITStoreDataUAV     ( 0 -    230)
   756: (                    ( 0 -    230)
   757: in                   ( 0 -    230)
   758: uint2                ( 0 -    230)
   759: pixelAddr            ( 0 -    230)
   760: ,                    ( 0 -    230)
   761: AOITNode             ( 0 -    230)
   762: nodeArray            ( 0 -    230)
   763: [                    ( 0 -    230)
   764: (                    ( 0 -    230)
   765: 4                    ( 0 -    230)
   766: )                    ( 0 -    230)
   767: ]                    ( 0 -    230)
   768: )                    ( 0 -    230)
   769: {                    ( 0 -    231)
   770: AOITData             ( 0 -    232)
   771: data                 ( 0 -    232)
   772: ;                    ( 0 -    232)
   773: uint                 ( 0 -    233)
   774: addr                 ( 0 -    233)
   775: =                    ( 0 -    233)
   776: AOITAddrGenUAV       ( 0 -    233)
   777: (                    ( 0 -    233)
   778: pixelAddr            ( 0 -    233)
   779: )                    ( 0 -    233)
   780: ;                    ( 0 -    233)
   781: [                    ( 0 -    242)
   782: unroll               ( 0 -    242)
   783: ]                    ( 0 -    242)
   784: for                  ( 0 -    242)
   785: (                    ( 0 -    242)
   786: uint                 ( 0 -    242)
   787: i                    ( 0 -    242)
   788: =                    ( 0 -    242)
   789: 0                    ( 0 -    242)
   790: ;                    ( 0 -    242)
   791: i                    ( 0 -    242)
   792: <                    ( 0 -    242)
   793: (                    ( 0 -    242)
   794: (                    ( 0 -    242)
   795: 4                    ( 0 -    242)
   796: )                    ( 0 -    242)
   797: /                    ( 0 -    242)
   798: 4                    ( 0 -    242)
   799: )                    ( 0 -    242)
   800: ;                    ( 0 -    242)
   801: ++                   ( 0 -    242)
   802: i                    ( 0 -    242)
   803: )                    ( 0 -    242)
   804: {                    ( 0 -    243)
   805: [                    ( 0 -    244)
   806: unroll               ( 0 -    244)
   807: ]                    ( 0 -    244)
   808: for                  ( 0 -    244)
   809: (                    ( 0 -    244)
   810: uint                 ( 0 -    244)
   811: j                    ( 0 -    244)
   812: =                    ( 0 -    244)
   813: 0                    ( 0 -    244)
   814: ;                    ( 0 -    244)
   815: j                    ( 0 -    244)
   816: <                    ( 0 -    244)
   817: 4                    ( 0 -    244)
   818: ;                    ( 0 -    244)
   819: ++                   ( 0 -    244)
   820: j                    ( 0 -    244)
   821: )                    ( 0 -    244)
   822: {                    ( 0 -    245)
   823: data                 ( 0 -    246)
   824: .                    ( 0 -    246)
   825: depth                ( 0 -    246)
   826: [                    ( 0 -    246)
   827: i                    ( 0 -    246)
   828: ]                    ( 0 -    246)
   829: [                    ( 0 -    246)
   830: j                    ( 0 -    246)
   831: ]                    ( 0 -    246)
   832: =                    ( 0 -    246)
   833: nodeArray            ( 0 -    246)
   834: [                    ( 0 -    246)
   835: 4                    ( 0 -    246)
   836: *                    ( 0 -    246)
   837: i                    ( 0 -    246)
   838: +                    ( 0 -    246)
   839: j                    ( 0 -    246)
   840: ]                    ( 0 -    246)
   841: .                    ( 0 -    246)
   842: depth                ( 0 -    246)
   843: ;                    ( 0 -    246)
   844: data                 ( 0 -    247)
   845: .                    ( 0 -    247)
   846: color                ( 0 -    247)
   847: [                    ( 0 -    247)
   848: i                    ( 0 -    247)
   849: ]                    ( 0 -    247)
   850: [                    ( 0 -    247)
   851: j                    ( 0 -    247)
   852: ]                    ( 0 -    247)
   853: =                    ( 0 -    247)
   854: (                    ( 0 -    247)
   855: nodeArray            ( 0 -    247)
   856: [                    ( 0 -    247)
   857: 4                    ( 0 -    247)
   858: *                    ( 0 -    247)
   859: i                    ( 0 -    247)
   860: +                    ( 0 -    247)
   861: j                    ( 0 -    247)
   862: ]                    ( 0 -    247)
   863: .                    ( 0 -    247)
   864: color                ( 0 -    247)
   865: &                    ( 0 -    247)
   866: 16777215             ( 0 -    247)
   867: )                    ( 0 -    247)
   868: |                    ( 0 -    247)
   869: (                    ( 0 -    247)
   870: (                    ( 0 -    247)
   871: (                    ( 0 -    247)
   872: uint                 ( 0 -    247)
   873: )                    ( 0 -    247)
   874: (                    ( 0 -    247)
   875: nodeArray            ( 0 -    247)
   876: [                    ( 0 -    247)
   877: 4                    ( 0 -    247)
   878: *                    ( 0 -    247)
   879: i                    ( 0 -    247)
   880: +                    ( 0 -    247)
   881: j                    ( 0 -    247)
   882: ]                    ( 0 -    247)
   883: .                    ( 0 -    247)
   884: trans                ( 0 -    247)
   885: )                    ( 0 -    247)
   886: )                    ( 0 -    247)
   887: unknown              ( 0 -    247)
   888: 24                   ( 0 -    247)
   889: )                    ( 0 -    247)
   890: ;                    ( 0 -    247)
   891: }                    ( 0 -    248)
   892: }                    ( 0 -    249)
   893: AOITDepthDataUAV     ( 0 -    250)
   894: [                    ( 0 -    250)
   895: addr                 ( 0 -    250)
   896: ]                    ( 0 -    250)
   897: =                    ( 0 -    250)
   898: data                 ( 0 -    250)
   899: .                    ( 0 -    250)
   900: depth                ( 0 -    250)
   901: ;                    ( 0 -    250)
   902: AOITColorDataUAV     ( 0 -    252)
   903: [                    ( 0 -    252)
   904: addr                 ( 0 -    252)
   905: ]                    ( 0 -    252)
   906: =                    ( 0 -    252)
   907: data                 ( 0 -    252)
   908: .                    ( 0 -    252)
   909: color                ( 0 -    252)
   910: ;                    ( 0 -    252)
   911: }                    ( 0 -    253)
   912: void                 ( 0 -    293)
   913: AOITClearData        ( 0 -    293)
   914: (                    ( 0 -    293)
   915: inout                ( 0 -    293)
   916: AOITData             ( 0 -    293)
   917: data                 ( 0 -    293)
   918: ,                    ( 0 -    293)
   919: float                ( 0 -    293)
   920: depth                ( 0 -    293)
   921: ,                    ( 0 -    293)
   922: float4               ( 0 -    293)
   923: color                ( 0 -    293)
   924: )                    ( 0 -    293)
   925: {                    ( 0 -    294)
   926: uint                 ( 0 -    295)
   927: packedColor          ( 0 -    295)
   928: =                    ( 0 -    295)
   929: PackRGBA             ( 0 -    295)
   930: (                    ( 0 -    295)
   931: float4               ( 0 -    295)
   932: (                    ( 0 -    295)
   933: 0                    ( 0 -    295)
   934: ,                    ( 0 -    295)
   935: 0                    ( 0 -    295)
   936: ,                    ( 0 -    295)
   937: 0                    ( 0 -    295)
   938: ,                    ( 0 -    295)
   939: 1.000000             ( 0 -    295)
   940: -                    ( 0 -    295)
   941: color                ( 0 -    295)
   942: .                    ( 0 -    295)
   943: w                    ( 0 -    295)
   944: )                    ( 0 -    295)
   945: )                    ( 0 -    295)
   946: ;                    ( 0 -    295)
   947: [                    ( 0 -    304)
   948: unroll               ( 0 -    304)
   949: ]                    ( 0 -    304)
   950: for                  ( 0 -    304)
   951: (                    ( 0 -    304)
   952: uint                 ( 0 -    304)
   953: i                    ( 0 -    304)
   954: =                    ( 0 -    304)
   955: 0                    ( 0 -    304)
   956: ;                    ( 0 -    304)
   957: i                    ( 0 -    304)
   958: <                    ( 0 -    304)
   959: (                    ( 0 -    304)
   960: (                    ( 0 -    304)
   961: 4                    ( 0 -    304)
   962: )                    ( 0 -    304)
   963: /                    ( 0 -    304)
   964: 4                    ( 0 -    304)
   965: )                    ( 0 -    304)
   966: ;                    ( 0 -    304)
   967: ++                   ( 0 -    304)
   968: i                    ( 0 -    304)
   969: )                    ( 0 -    304)
   970: {                    ( 0 -    305)
   971: data                 ( 0 -    306)
   972: .                    ( 0 -    306)
   973: depth                ( 0 -    306)
   974: [                    ( 0 -    306)
   975: i                    ( 0 -    306)
   976: ]                    ( 0 -    306)
   977: =                    ( 0 -    306)
   978: (                    ( 0 -    306)
   979: 340282001837565597733306976381245063168.000000 ( 0 -    306)
   980: )                    ( 0 -    306)
   981: ;                    ( 0 -    306)
   982: data                 ( 0 -    307)
   983: .                    ( 0 -    307)
   984: color                ( 0 -    307)
   985: [                    ( 0 -    307)
   986: i                    ( 0 -    307)
   987: ]                    ( 0 -    307)
   988: =                    ( 0 -    307)
   989: packedColor          ( 0 -    307)
   990: ;                    ( 0 -    307)
   991: }                    ( 0 -    308)
   992: data                 ( 0 -    309)
   993: .                    ( 0 -    309)
   994: depth                ( 0 -    309)
   995: [                    ( 0 -    309)
   996: 0                    ( 0 -    309)
   997: ]                    ( 0 -    309)
   998: [                    ( 0 -    309)
   999: 0                    ( 0 -    309)
  1000: ]                    ( 0 -    309)
  1001: =                    ( 0 -    309)
  1002: depth                ( 0 -    309)
  1003: ;                    ( 0 -    309)
  1004: data                 ( 0 -    310)
  1005: .                    ( 0 -    310)
  1006: color                ( 0 -    310)
  1007: [                    ( 0 -    310)
  1008: 0                    ( 0 -    310)
  1009: ]                    ( 0 -    310)
  1010: [                    ( 0 -    310)
  1011: 0                    ( 0 -    310)
  1012: ]                    ( 0 -    310)
  1013: =                    ( 0 -    310)
  1014: PackRGBA             ( 0 -    310)
  1015: (                    ( 0 -    310)
  1016: float4               ( 0 -    310)
  1017: (                    ( 0 -    310)
  1018: color                ( 0 -    310)
  1019: .                    ( 0 -    310)
  1020: www                  ( 0 -    310)
  1021: *                    ( 0 -    310)
  1022: color                ( 0 -    310)
  1023: .                    ( 0 -    310)
  1024: xyz                  ( 0 -    310)
  1025: ,                    ( 0 -    310)
  1026: 1.000000             ( 0 -    310)
  1027: -                    ( 0 -    310)
  1028: color                ( 0 -    310)
  1029: .                    ( 0 -    310)
  1030: w                    ( 0 -    310)
  1031: )                    ( 0 -    310)
  1032: )                    ( 0 -    310)
  1033: ;                    ( 0 -    310)
  1034: }                    ( 0 -    312)
  1035: void                 ( 0 -    314)
  1036: AOITInsertFragment   ( 0 -    314)
  1037: (                    ( 0 -    314)
  1038: in                   ( 0 -    314)
  1039: float                ( 0 -    314)
  1040: fragmentDepth        ( 0 -    314)
  1041: ,                    ( 0 -    314)
  1042: in                   ( 0 -    314)
  1043: float                ( 0 -    314)
  1044: fragmentTrans        ( 0 -    314)
  1045: ,                    ( 0 -    314)
  1046: in                   ( 0 -    314)
  1047: float3               ( 0 -    314)
  1048: fragmentColor        ( 0 -    314)
  1049: ,                    ( 0 -    314)
  1050: inout                ( 0 -    314)
  1051: AOITNode             ( 0 -    314)
  1052: nodeArray            ( 0 -    314)
  1053: [                    ( 0 -    314)
  1054: (                    ( 0 -    314)
  1055: 4                    ( 0 -    314)
  1056: )                    ( 0 -    314)
  1057: ]                    ( 0 -    314)
  1058: )                    ( 0 -    314)
  1059: {                    ( 0 -    315)
  1060: int                  ( 0 -    316)
  1061: i                    ( 0 -    316)
  1062: ;                    ( 0 -    316)
  1063: float                ( 0 -    318)
  1064: depth                ( 0 -    318)
  1065: [                    ( 0 -    318)
  1066: (                    ( 0 -    318)
  1067: 4                    ( 0 -    318)
  1068: )                    ( 0 -    318)
  1069: +                    ( 0 -    318)
  1070: 1                    ( 0 -    318)
  1071: ]                    ( 0 -    318)
  1072: ;                    ( 0 -    318)
  1073: float                ( 0 -    319)
  1074: trans                ( 0 -    319)
  1075: [                    ( 0 -    319)
  1076: (                    ( 0 -    319)
  1077: 4                    ( 0 -    319)
  1078: )                    ( 0 -    319)
  1079: +                    ( 0 -    319)
  1080: 1                    ( 0 -    319)
  1081: ]                    ( 0 -    319)
  1082: ;                    ( 0 -    319)
  1083: uint                 ( 0 -    320)
  1084: color                ( 0 -    320)
  1085: [                    ( 0 -    320)
  1086: (                    ( 0 -    320)
  1087: 4                    ( 0 -    320)
  1088: )                    ( 0 -    320)
  1089: +                    ( 0 -    320)
  1090: 1                    ( 0 -    320)
  1091: ]                    ( 0 -    320)
  1092: ;                    ( 0 -    320)
  1093: [                    ( 0 -    323)
  1094: unroll               ( 0 -    323)
  1095: ]                    ( 0 -    323)
  1096: for                  ( 0 -    323)
  1097: (                    ( 0 -    323)
  1098: i                    ( 0 -    323)
  1099: =                    ( 0 -    323)
  1100: 0                    ( 0 -    323)
  1101: ;                    ( 0 -    323)
  1102: i                    ( 0 -    323)
  1103: <                    ( 0 -    323)
  1104: (                    ( 0 -    323)
  1105: 4                    ( 0 -    323)
  1106: )                    ( 0 -    323)
  1107: ;                    ( 0 -    323)
  1108: ++                   ( 0 -    323)
  1109: i                    ( 0 -    323)
  1110: )                    ( 0 -    323)
  1111: {                    ( 0 -    324)
  1112: depth                ( 0 -    325)
  1113: [                    ( 0 -    325)
  1114: i                    ( 0 -    325)
  1115: ]                    ( 0 -    325)
  1116: =                    ( 0 -    325)
  1117: nodeArray            ( 0 -    325)
  1118: [                    ( 0 -    325)
  1119: i                    ( 0 -    325)
  1120: ]                    ( 0 -    325)
  1121: .                    ( 0 -    325)
  1122: depth                ( 0 -    325)
  1123: ;                    ( 0 -    325)
  1124: trans                ( 0 -    326)
  1125: [                    ( 0 -    326)
  1126: i                    ( 0 -    326)
  1127: ]                    ( 0 -    326)
  1128: =                    ( 0 -    326)
  1129: nodeArray            ( 0 -    326)
  1130: [                    ( 0 -    326)
  1131: i                    ( 0 -    326)
  1132: ]                    ( 0 -    326)
  1133: .                    ( 0 -    326)
  1134: trans                ( 0 -    326)
  1135: ;                    ( 0 -    326)
  1136: color                ( 0 -    327)
  1137: [                    ( 0 -    327)
  1138: i                    ( 0 -    327)
  1139: ]                    ( 0 -    327)
  1140: =                    ( 0 -    327)
  1141: nodeArray            ( 0 -    327)
  1142: [                    ( 0 -    327)
  1143: i                    ( 0 -    327)
  1144: ]                    ( 0 -    327)
  1145: .                    ( 0 -    327)
  1146: color                ( 0 -    327)
  1147: ;                    ( 0 -    327)
  1148: }                    ( 0 -    328)
  1149: int                  ( 0 -    331)
  1150: index                ( 0 -    331)
  1151: =                    ( 0 -    331)
  1152: 0                    ( 0 -    331)
  1153: ;                    ( 0 -    331)
  1154: float                ( 0 -    332)
  1155: prevTrans            ( 0 -    332)
  1156: =                    ( 0 -    332)
  1157: 255                  ( 0 -    332)
  1158: ;                    ( 0 -    332)
  1159: [                    ( 0 -    333)
  1160: unroll               ( 0 -    333)
  1161: ]                    ( 0 -    333)
  1162: for                  ( 0 -    333)
  1163: (                    ( 0 -    333)
  1164: i                    ( 0 -    333)
  1165: =                    ( 0 -    333)
  1166: 0                    ( 0 -    333)
  1167: ;                    ( 0 -    333)
  1168: i                    ( 0 -    333)
  1169: <                    ( 0 -    333)
  1170: (                    ( 0 -    333)
  1171: 4                    ( 0 -    333)
  1172: )                    ( 0 -    333)
  1173: ;                    ( 0 -    333)
  1174: ++                   ( 0 -    333)
  1175: i                    ( 0 -    333)
  1176: )                    ( 0 -    333)
  1177: {                    ( 0 -    334)
  1178: if                   ( 0 -    335)
  1179: (                    ( 0 -    335)
  1180: fragmentDepth        ( 0 -    335)
  1181: >                    ( 0 -    335)
  1182: depth                ( 0 -    335)
  1183: [                    ( 0 -    335)
  1184: i                    ( 0 -    335)
  1185: ]                    ( 0 -    335)
  1186: )                    ( 0 -    335)
  1187: {                    ( 0 -    336)
  1188: ++                   ( 0 -    337)
  1189: index                ( 0 -    337)
  1190: ;                    ( 0 -    337)
  1191: prevTrans            ( 0 -    338)
  1192: =                    ( 0 -    338)
  1193: trans                ( 0 -    338)
  1194: [                    ( 0 -    338)
  1195: i                    ( 0 -    338)
  1196: ]                    ( 0 -    338)
  1197: ;                    ( 0 -    338)
  1198: }                    ( 0 -    339)
  1199: }                    ( 0 -    340)
  1200: [                    ( 0 -    343)
  1201: unroll               ( 0 -    343)
  1202: ]                    ( 0 -    343)
  1203: for                  ( 0 -    343)
  1204: (                    ( 0 -    343)
  1205: i                    ( 0 -    343)
  1206: =                    ( 0 -    343)
  1207: (                    ( 0 -    343)
  1208: 4                    ( 0 -    343)
  1209: )                    ( 0 -    343)
  1210: -                    ( 0 -    343)
  1211: 1                    ( 0 -    343)
  1212: ;                    ( 0 -    343)
  1213: i                    ( 0 -    343)
  1214: unknown              ( 0 -    343)
  1215: 0                    ( 0 -    343)
  1216: ;                    ( 0 -    343)
  1217: --                   ( 0 -    343)
  1218: i                    ( 0 -    343)
  1219: )                    ( 0 -    343)
  1220: {                    ( 0 -    344)
  1221: [                    ( 0 -    345)
  1222: flatten              ( 0 -    345)
  1223: ]                    ( 0 -    345)
  1224: if                   ( 0 -    345)
  1225: (                    ( 0 -    345)
  1226: index                ( 0 -    345)
  1227: unknown              ( 0 -    345)
  1228: i                    ( 0 -    345)
  1229: )                    ( 0 -    345)
  1230: {                    ( 0 -    346)
  1231: depth                ( 0 -    347)
  1232: [                    ( 0 -    347)
  1233: i                    ( 0 -    347)
  1234: +                    ( 0 -    347)
  1235: 1                    ( 0 -    347)
  1236: ]                    ( 0 -    347)
  1237: =                    ( 0 -    347)
  1238: depth                ( 0 -    347)
  1239: [                    ( 0 -    347)
  1240: i                    ( 0 -    347)
  1241: ]                    ( 0 -    347)
  1242: ;                    ( 0 -    347)
  1243: trans                ( 0 -    348)
  1244: [                    ( 0 -    348)
  1245: i                    ( 0 -    348)
  1246: +                    ( 0 -    348)
  1247: 1                    ( 0 -    348)
  1248: ]                    ( 0 -    348)
  1249: =                    ( 0 -    348)
  1250: trans                ( 0 -    348)
  1251: [                    ( 0 -    348)
  1252: i                    ( 0 -    348)
  1253: ]                    ( 0 -    348)
  1254: *                    ( 0 -    348)
  1255: fragmentTrans        ( 0 -    348)
  1256: ;                    ( 0 -    348)
  1257: color                ( 0 -    349)
  1258: [                    ( 0 -    349)
  1259: i                    ( 0 -    349)
  1260: +                    ( 0 -    349)
  1261: 1                    ( 0 -    349)
  1262: ]                    ( 0 -    349)
  1263: =                    ( 0 -    349)
  1264: color                ( 0 -    349)
  1265: [                    ( 0 -    349)
  1266: i                    ( 0 -    349)
  1267: ]                    ( 0 -    349)
  1268: ;                    ( 0 -    349)
  1269: }                    ( 0 -    350)
  1270: }                    ( 0 -    351)
  1271: const                ( 0 -    354)
  1272: float                ( 0 -    354)
  1273: newFragTrans         ( 0 -    354)
  1274: =                    ( 0 -    354)
  1275: fragmentTrans        ( 0 -    354)
  1276: *                    ( 0 -    354)
  1277: prevTrans            ( 0 -    354)
  1278: ;                    ( 0 -    354)
  1279: const                ( 0 -    355)
  1280: uint                 ( 0 -    355)
  1281: newFragColor         ( 0 -    355)
  1282: =                    ( 0 -    355)
  1283: PackRGB              ( 0 -    355)
  1284: (                    ( 0 -    355)
  1285: fragmentColor        ( 0 -    355)
  1286: *                    ( 0 -    355)
  1287: (                    ( 0 -    355)
  1288: 1.000000             ( 0 -    355)
  1289: -                    ( 0 -    355)
  1290: fragmentTrans        ( 0 -    355)
  1291: )                    ( 0 -    355)
  1292: )                    ( 0 -    355)
  1293: ;                    ( 0 -    355)
  1294: depth                ( 0 -    357)
  1295: [                    ( 0 -    357)
  1296: index                ( 0 -    357)
  1297: ]                    ( 0 -    357)
  1298: =                    ( 0 -    357)
  1299: fragmentDepth        ( 0 -    357)
  1300: ;                    ( 0 -    357)
  1301: trans                ( 0 -    358)
  1302: [                    ( 0 -    358)
  1303: index                ( 0 -    358)
  1304: ]                    ( 0 -    358)
  1305: =                    ( 0 -    358)
  1306: newFragTrans         ( 0 -    358)
  1307: ;                    ( 0 -    358)
  1308: color                ( 0 -    359)
  1309: [                    ( 0 -    359)
  1310: index                ( 0 -    359)
  1311: ]                    ( 0 -    359)
  1312: =                    ( 0 -    359)
  1313: newFragColor         ( 0 -    359)
  1314: ;                    ( 0 -    359)
  1315: float                ( 0 -    361)
  1316: EMPTY_NODE           ( 0 -    361)
  1317: =                    ( 0 -    361)
  1318: asfloat              ( 0 -    361)
  1319: (                    ( 0 -    361)
  1320: asuint               ( 0 -    361)
  1321: (                    ( 0 -    361)
  1322: float                ( 0 -    361)
  1323: (                    ( 0 -    361)
  1324: (                    ( 0 -    361)
  1325: 340282001837565597733306976381245063168.000000 ( 0 -    361)
  1326: )                    ( 0 -    361)
  1327: )                    ( 0 -    361)
  1328: )                    ( 0 -    361)
  1329: &                    ( 0 -    361)
  1330: (                    ( 0 -    361)
  1331: uint                 ( 0 -    361)
  1332: )                    ( 0 -    361)
  1333: (                    ( 0 -    361)
  1334: 4294967295           ( 0 -    361)
  1335: -                    ( 0 -    361)
  1336: (                    ( 0 -    361)
  1337: uint                 ( 0 -    361)
  1338: )                    ( 0 -    361)
  1339: (                    ( 0 -    361)
  1340: (                    ( 0 -    361)
  1341: 1                    ( 0 -    361)
  1342: unknown              ( 0 -    361)
  1343: (                    ( 0 -    361)
  1344: 8                    ( 0 -    361)
  1345: )                    ( 0 -    361)
  1346: )                    ( 0 -    361)
  1347: -                    ( 0 -    361)
  1348: 1                    ( 0 -    361)
  1349: )                    ( 0 -    361)
  1350: )                    ( 0 -    361)
  1351: )                    ( 0 -    361)
  1352: ;                    ( 0 -    361)
  1353: [                    ( 0 -    363)
  1354: flatten              ( 0 -    363)
  1355: ]                    ( 0 -    363)
  1356: if                   ( 0 -    363)
  1357: (                    ( 0 -    363)
  1358: asfloat              ( 0 -    363)
  1359: (                    ( 0 -    363)
  1360: asuint               ( 0 -    363)
  1361: (                    ( 0 -    363)
  1362: float                ( 0 -    363)
  1363: (                    ( 0 -    363)
  1364: depth                ( 0 -    363)
  1365: [                    ( 0 -    363)
  1366: (                    ( 0 -    363)
  1367: 4                    ( 0 -    363)
  1368: )                    ( 0 -    363)
  1369: ]                    ( 0 -    363)
  1370: )                    ( 0 -    363)
  1371: )                    ( 0 -    363)
  1372: &                    ( 0 -    363)
  1373: (                    ( 0 -    363)
  1374: uint                 ( 0 -    363)
  1375: )                    ( 0 -    363)
  1376: (                    ( 0 -    363)
  1377: 4294967295           ( 0 -    363)
  1378: -                    ( 0 -    363)
  1379: (                    ( 0 -    363)
  1380: uint                 ( 0 -    363)
  1381: )                    ( 0 -    363)
  1382: (                    ( 0 -    363)
  1383: (                    ( 0 -    363)
  1384: 1                    ( 0 -    363)
  1385: unknown              ( 0 -    363)
  1386: (                    ( 0 -    363)
  1387: 8                    ( 0 -    363)
  1388: )                    ( 0 -    363)
  1389: )                    ( 0 -    363)
  1390: -                    ( 0 -    363)
  1391: 1                    ( 0 -    363)
  1392: )                    ( 0 -    363)
  1393: )                    ( 0 -    363)
  1394: )                    ( 0 -    363)
  1395: unknown              ( 0 -    363)
  1396: EMPTY_NODE           ( 0 -    363)
  1397: )                    ( 0 -    363)
  1398: {                    ( 0 -    364)
  1399: float3               ( 0 -    365)
  1400: toBeRemovedColor     ( 0 -    365)
  1401: =                    ( 0 -    365)
  1402: UnpackRGB            ( 0 -    365)
  1403: (                    ( 0 -    365)
  1404: color                ( 0 -    365)
  1405: [                    ( 0 -    365)
  1406: (                    ( 0 -    365)
  1407: 4                    ( 0 -    365)
  1408: )                    ( 0 -    365)
  1409: ]                    ( 0 -    365)
  1410: )                    ( 0 -    365)
  1411: ;                    ( 0 -    365)
  1412: float3               ( 0 -    366)
  1413: toBeAccumulatedColor ( 0 -    366)
  1414: =                    ( 0 -    366)
  1415: UnpackRGB            ( 0 -    366)
  1416: (                    ( 0 -    366)
  1417: color                ( 0 -    366)
  1418: [                    ( 0 -    366)
  1419: (                    ( 0 -    366)
  1420: 4                    ( 0 -    366)
  1421: )                    ( 0 -    366)
  1422: -                    ( 0 -    366)
  1423: 1                    ( 0 -    366)
  1424: ]                    ( 0 -    366)
  1425: )                    ( 0 -    366)
  1426: ;                    ( 0 -    366)
  1427: color                ( 0 -    367)
  1428: [                    ( 0 -    367)
  1429: (                    ( 0 -    367)
  1430: 4                    ( 0 -    367)
  1431: )                    ( 0 -    367)
  1432: -                    ( 0 -    367)
  1433: 1                    ( 0 -    367)
  1434: ]                    ( 0 -    367)
  1435: =                    ( 0 -    367)
  1436: PackRGB              ( 0 -    367)
  1437: (                    ( 0 -    367)
  1438: toBeAccumulatedColor ( 0 -    367)
  1439: +                    ( 0 -    367)
  1440: toBeRemovedColor     ( 0 -    367)
  1441: *                    ( 0 -    367)
  1442: trans                ( 0 -    367)
  1443: [                    ( 0 -    367)
  1444: (                    ( 0 -    367)
  1445: 4                    ( 0 -    367)
  1446: )                    ( 0 -    367)
  1447: -                    ( 0 -    367)
  1448: 1                    ( 0 -    367)
  1449: ]                    ( 0 -    367)
  1450: *                    ( 0 -    367)
  1451: rcp                  ( 0 -    367)
  1452: (                    ( 0 -    367)
  1453: trans                ( 0 -    367)
  1454: [                    ( 0 -    367)
  1455: (                    ( 0 -    367)
  1456: 4                    ( 0 -    367)
  1457: )                    ( 0 -    367)
  1458: -                    ( 0 -    367)
  1459: 2                    ( 0 -    367)
  1460: ]                    ( 0 -    367)
  1461: )                    ( 0 -    367)
  1462: )                    ( 0 -    367)
  1463: ;                    ( 0 -    367)
  1464: trans                ( 0 -    368)
  1465: [                    ( 0 -    368)
  1466: (                    ( 0 -    368)
  1467: 4                    ( 0 -    368)
  1468: )                    ( 0 -    368)
  1469: -                    ( 0 -    368)
  1470: 1                    ( 0 -    368)
  1471: ]                    ( 0 -    368)
  1472: =                    ( 0 -    368)
  1473: trans                ( 0 -    368)
  1474: [                    ( 0 -    368)
  1475: (                    ( 0 -    368)
  1476: 4                    ( 0 -    368)
  1477: )                    ( 0 -    368)
  1478: ]                    ( 0 -    368)
  1479: ;                    ( 0 -    368)
  1480: }                    ( 0 -    369)
  1481: [                    ( 0 -    372)
  1482: unroll               ( 0 -    372)
  1483: ]                    ( 0 -    372)
  1484: for                  ( 0 -    372)
  1485: (                    ( 0 -    372)
  1486: i                    ( 0 -    372)
  1487: =                    ( 0 -    372)
  1488: 0                    ( 0 -    372)
  1489: ;                    ( 0 -    372)
  1490: i                    ( 0 -    372)
  1491: <                    ( 0 -    372)
  1492: (                    ( 0 -    372)
  1493: 4                    ( 0 -    372)
  1494: )                    ( 0 -    372)
  1495: ;                    ( 0 -    372)
  1496: ++                   ( 0 -    372)
  1497: i                    ( 0 -    372)
  1498: )                    ( 0 -    372)
  1499: {                    ( 0 -    373)
  1500: nodeArray            ( 0 -    374)
  1501: [                    ( 0 -    374)
  1502: i                    ( 0 -    374)
  1503: ]                    ( 0 -    374)
  1504: .                    ( 0 -    374)
  1505: depth                ( 0 -    374)
  1506: =                    ( 0 -    374)
  1507: depth                ( 0 -    374)
  1508: [                    ( 0 -    374)
  1509: i                    ( 0 -    374)
  1510: ]                    ( 0 -    374)
  1511: ;                    ( 0 -    374)
  1512: nodeArray            ( 0 -    375)
  1513: [                    ( 0 -    375)
  1514: i                    ( 0 -    375)
  1515: ]                    ( 0 -    375)
  1516: .                    ( 0 -    375)
  1517: trans                ( 0 -    375)
  1518: =                    ( 0 -    375)
  1519: trans                ( 0 -    375)
  1520: [                    ( 0 -    375)
  1521: i                    ( 0 -    375)
  1522: ]                    ( 0 -    375)
  1523: ;                    ( 0 -    375)
  1524: nodeArray            ( 0 -    376)
  1525: [                    ( 0 -    376)
  1526: i                    ( 0 -    376)
  1527: ]                    ( 0 -    376)
  1528: .                    ( 0 -    376)
  1529: color                ( 0 -    376)
  1530: =                    ( 0 -    376)
  1531: color                ( 0 -    376)
  1532: [                    ( 0 -    376)
  1533: i                    ( 0 -    376)
  1534: ]                    ( 0 -    376)
  1535: ;                    ( 0 -    376)
  1536: }                    ( 0 -    377)
  1537: }                    ( 0 -    378)
  1538: void                 ( 0 -    381)
  1539: WriteNewPixelToAOIT  ( 0 -    381)
  1540: (                    ( 0 -    381)
  1541: float2               ( 0 -    381)
  1542: position             ( 0 -    381)
  1543: ,                    ( 0 -    381)
  1544: float                ( 0 -    381)
  1545: depth                ( 0 -    381)
  1546: ,                    ( 0 -    381)
  1547: float4               ( 0 -    381)
  1548: color                ( 0 -    381)
  1549: )                    ( 0 -    381)
  1550: {                    ( 0 -    382)
  1551: AOITNode             ( 0 -    384)
  1552: nodeArray            ( 0 -    384)
  1553: [                    ( 0 -    384)
  1554: (                    ( 0 -    384)
  1555: 4                    ( 0 -    384)
  1556: )                    ( 0 -    384)
  1557: ]                    ( 0 -    384)
  1558: ;                    ( 0 -    384)
  1559: uint2                ( 0 -    385)
  1560: pixelAddr            ( 0 -    385)
  1561: =                    ( 0 -    385)
  1562: uint2                ( 0 -    385)
  1563: (                    ( 0 -    385)
  1564: position             ( 0 -    385)
  1565: )                    ( 0 -    385)
  1566: ;                    ( 0 -    385)
  1567: AOITControlSurface   ( 0 -    388)
  1568: ctrlSurface          ( 0 -    388)
  1569: =                    ( 0 -    388)
  1570: (                    ( 0 -    388)
  1571: AOITControlSurface   ( 0 -    388)
  1572: )                    ( 0 -    388)
  1573: 0                    ( 0 -    388)
  1574: ;                    ( 0 -    388)
  1575: AOITLoadControlSurfaceUAV ( 0 -    389)
  1576: (                    ( 0 -    389)
  1577: pixelAddr            ( 0 -    389)
  1578: ,                    ( 0 -    389)
  1579: ctrlSurface          ( 0 -    389)
  1580: )                    ( 0 -    389)
  1581: ;                    ( 0 -    389)
  1582: if                   ( 0 -    392)
  1583: (                    ( 0 -    392)
  1584: ctrlSurface          ( 0 -    392)
  1585: .                    ( 0 -    392)
  1586: clear                ( 0 -    392)
  1587: )                    ( 0 -    392)
  1588: {                    ( 0 -    393)
  1589: AOITData             ( 0 -    395)
  1590: data                 ( 0 -    395)
  1591: ;                    ( 0 -    395)
  1592: AOITClearData        ( 0 -    396)
  1593: (                    ( 0 -    396)
  1594: data                 ( 0 -    396)
  1595: ,                    ( 0 -    396)
  1596: depth                ( 0 -    396)
  1597: ,                    ( 0 -    396)
  1598: color                ( 0 -    396)
  1599: )                    ( 0 -    396)
  1600: ;                    ( 0 -    396)
  1601: uint                 ( 0 -    399)
  1602: addr                 ( 0 -    399)
  1603: =                    ( 0 -    399)
  1604: AOITAddrGenUAV       ( 0 -    399)
  1605: (                    ( 0 -    399)
  1606: pixelAddr            ( 0 -    399)
  1607: )                    ( 0 -    399)
  1608: ;                    ( 0 -    399)
  1609: AOITDepthDataUAV     ( 0 -    401)
  1610: [                    ( 0 -    401)
  1611: addr                 ( 0 -    401)
  1612: ]                    ( 0 -    401)
  1613: =                    ( 0 -    401)
  1614: data                 ( 0 -    401)
  1615: .                    ( 0 -    401)
  1616: depth                ( 0 -    401)
  1617: ;                    ( 0 -    401)
  1618: AOITColorDataUAV     ( 0 -    403)
  1619: [                    ( 0 -    403)
  1620: addr                 ( 0 -    403)
  1621: ]                    ( 0 -    403)
  1622: =                    ( 0 -    403)
  1623: data                 ( 0 -    403)
  1624: .                    ( 0 -    403)
  1625: color                ( 0 -    403)
  1626: ;                    ( 0 -    403)
  1627: AOITClearMaskUAV     ( 0 -    405)
  1628: [                    ( 0 -    405)
  1629: pixelAddr            ( 0 -    405)
  1630: ]                    ( 0 -    405)
  1631: =                    ( 0 -    405)
  1632: 0                    ( 0 -    405)
  1633: ;                    ( 0 -    405)
  1634: }                    ( 0 -    406)
  1635: else                 ( 0 -    407)
  1636: {                    ( 0 -    408)
  1637: AOITLoadDataUAV      ( 0 -    410)
  1638: (                    ( 0 -    410)
  1639: pixelAddr            ( 0 -    410)
  1640: ,                    ( 0 -    410)
  1641: nodeArray            ( 0 -    410)
  1642: )                    ( 0 -    410)
  1643: ;                    ( 0 -    410)
  1644: AOITInsertFragment   ( 0 -    413)
  1645: (                    ( 0 -    413)
  1646: depth                ( 0 -    413)
  1647: ,                    ( 0 -    413)
  1648: 1.000000             ( 0 -    413)
  1649: -                    ( 0 -    413)
  1650: color                ( 0 -    413)
  1651: .                    ( 0 -    413)
  1652: w                    ( 0 -    413)
  1653: ,                    ( 0 -    413)
  1654: color                ( 0 -    413)
  1655: .                    ( 0 -    413)
  1656: xyz                  ( 0 -    413)
  1657: ,                    ( 0 -    413)
  1658: nodeArray            ( 0 -    413)
  1659: )                    ( 0 -    413)
  1660: ;                    ( 0 -    413)
  1661: AOITStoreDataUAV     ( 0 -    416)
  1662: (                    ( 0 -    416)
  1663: pixelAddr            ( 0 -    416)
  1664: ,                    ( 0 -    416)
  1665: nodeArray            ( 0 -    416)
  1666: )                    ( 0 -    416)
  1667: ;                    ( 0 -    416)
  1668: }                    ( 0 -    417)
  1669: }                    ( 0 -    418)
  1670: struct               ( 1 -     22)
  1671: Material             ( 1 -     22)
  1672: {                    ( 1 -     23)
  1673: float4               ( 1 -     24)
  1674: Color                ( 1 -     24)
  1675: ;                    ( 1 -     24)
  1676: float4               ( 1 -     25)
  1677: Transmission         ( 1 -     25)
  1678: ;                    ( 1 -     25)
  1679: float                ( 1 -     26)
  1680: RefractionRatio      ( 1 -     26)
  1681: ;                    ( 1 -     26)
  1682: float                ( 1 -     27)
  1683: Collimation          ( 1 -     27)
  1684: ;                    ( 1 -     27)
  1685: float2               ( 1 -     28)
  1686: Padding              ( 1 -     28)
  1687: ;                    ( 1 -     28)
  1688: uint                 ( 1 -     29)
  1689: TextureFlags         ( 1 -     29)
  1690: ;                    ( 1 -     29)
  1691: uint                 ( 1 -     30)
  1692: AlbedoTexID          ( 1 -     30)
  1693: ;                    ( 1 -     30)
  1694: uint                 ( 1 -     31)
  1695: MetallicTexID        ( 1 -     31)
  1696: ;                    ( 1 -     31)
  1697: uint                 ( 1 -     32)
  1698: RoughnessTexID       ( 1 -     32)
  1699: ;                    ( 1 -     32)
  1700: uint                 ( 1 -     33)
  1701: EmissiveTexID        ( 1 -     33)
  1702: ;                    ( 1 -     33)
  1703: uint3                ( 1 -     34)
  1704: Padding2             ( 1 -     34)
  1705: ;                    ( 1 -     34)
  1706: }                    ( 1 -     35)
  1707: ;                    ( 1 -     35)
  1708: struct               ( 1 -     37)
  1709: ObjectInfo           ( 1 -     37)
  1710: {                    ( 1 -     38)
  1711: float4x4             ( 1 -     39)
  1712: toWorld              ( 1 -     39)
  1713: ;                    ( 1 -     39)
  1714: float4x4             ( 1 -     40)
  1715: normalMat            ( 1 -     40)
  1716: ;                    ( 1 -     40)
  1717: uint                 ( 1 -     41)
  1718: matID                ( 1 -     41)
  1719: ;                    ( 1 -     41)
  1720: }                    ( 1 -     42)
  1721: ;                    ( 1 -     42)
  1722: cbuffer              ( 1 -     44)
  1723: DrawInfoRootConstant ( 1 -     44)
  1724: :                    ( 1 -     44)
  1725: register             ( 1 -     44)
  1726: (                    ( 1 -     44)
  1727: b0                   ( 1 -     44)
  1728: ,                    ( 1 -     44)
  1729: space0               ( 1 -     44)
  1730: )                    ( 1 -     44)
  1731: {                    ( 1 -     45)
  1732: uint                 ( 1 -     46)
  1733: baseInstance         ( 1 -     46)
  1734: =                    ( 1 -     46)
  1735: 0                    ( 1 -     46)
  1736: ;                    ( 1 -     46)
  1737: }                    ( 1 -     47)
  1738: ;                    ( 1 -     47)
  1739: cbuffer              ( 1 -     49)
  1740: ObjectUniformBlock   ( 1 -     49)
  1741: :                    ( 1 -     49)
  1742: register             ( 1 -     49)
  1743: (                    ( 1 -     49)
  1744: b0                   ( 1 -     49)
  1745: ,                    ( 1 -     49)
  1746: space1               ( 1 -     49)
  1747: )                    ( 1 -     49)
  1748: {                    ( 1 -     50)
  1749: ObjectInfo           ( 1 -     51)
  1750: objectInfo           ( 1 -     51)
  1751: [                    ( 1 -     51)
  1752: 128                  ( 1 -     51)
  1753: ]                    ( 1 -     51)
  1754: ;                    ( 1 -     51)
  1755: }                    ( 1 -     52)
  1756: ;                    ( 1 -     52)
  1757: cbuffer              ( 1 -     54)
  1758: LightUniformBlock    ( 1 -     54)
  1759: :                    ( 1 -     54)
  1760: register             ( 1 -     54)
  1761: (                    ( 1 -     54)
  1762: b3                   ( 1 -     54)
  1763: ,                    ( 1 -     54)
  1764: space1               ( 1 -     54)
  1765: )                    ( 1 -     54)
  1766: {                    ( 1 -     55)
  1767: float4x4             ( 1 -     56)
  1768: lightViewProj        ( 1 -     56)
  1769: ;                    ( 1 -     56)
  1770: float4               ( 1 -     57)
  1771: lightDirection       ( 1 -     57)
  1772: ;                    ( 1 -     57)
  1773: float4               ( 1 -     58)
  1774: lightColor           ( 1 -     58)
  1775: ;                    ( 1 -     58)
  1776: }                    ( 1 -     59)
  1777: ;                    ( 1 -     59)
  1778: cbuffer              ( 1 -     61)
  1779: CameraUniform        ( 1 -     61)
  1780: :                    ( 1 -     61)
  1781: register             ( 1 -     61)
  1782: (                    ( 1 -     61)
  1783: b1                   ( 1 -     61)
  1784: ,                    ( 1 -     61)
  1785: space1               ( 1 -     61)
  1786: )                    ( 1 -     61)
  1787: {                    ( 1 -     62)
  1788: float4x4             ( 1 -     63)
  1789: camViewProj          ( 1 -     63)
  1790: ;                    ( 1 -     63)
  1791: float4x4             ( 1 -     64)
  1792: camViewMat           ( 1 -     64)
  1793: ;                    ( 1 -     64)
  1794: float4               ( 1 -     65)
  1795: camClipInfo          ( 1 -     65)
  1796: ;                    ( 1 -     65)
  1797: float4               ( 1 -     66)
  1798: camPosition          ( 1 -     66)
  1799: ;                    ( 1 -     66)
  1800: }                    ( 1 -     67)
  1801: ;                    ( 1 -     67)
  1802: cbuffer              ( 1 -     69)
  1803: MaterialUniform      ( 1 -     69)
  1804: :                    ( 1 -     69)
  1805: register             ( 1 -     69)
  1806: (                    ( 1 -     69)
  1807: b2                   ( 1 -     69)
  1808: ,                    ( 1 -     69)
  1809: space1               ( 1 -     69)
  1810: )                    ( 1 -     69)
  1811: {                    ( 1 -     70)
  1812: Material             ( 1 -     71)
  1813: Materials            ( 1 -     71)
  1814: [                    ( 1 -     71)
  1815: 128                  ( 1 -     71)
  1816: ]                    ( 1 -     71)
  1817: ;                    ( 1 -     71)
  1818: }                    ( 1 -     72)
  1819: ;                    ( 1 -     72)
  1820: Texture2D            ( 1 -     74)
  1821: MaterialTextures     ( 1 -     74)
  1822: [                    ( 1 -     74)
  1823: 8                    ( 1 -     74)
  1824: ]                    ( 1 -     74)
  1825: :                    ( 1 -     74)
  1826: register             ( 1 -     74)
  1827: (                    ( 1 -     74)
  1828: t100                 ( 1 -     74)
  1829: ,                    ( 1 -     74)
  1830: space0               ( 1 -     74)
  1831: )                    ( 1 -     74)
  1832: ;                    ( 1 -     74)
  1833: SamplerState         ( 1 -     75)
  1834: LinearSampler        ( 1 -     75)
  1835: :                    ( 1 -     75)
  1836: register             ( 1 -     75)
  1837: (                    ( 1 -     75)
  1838: s0                   ( 1 -     75)
  1839: ,                    ( 1 -     75)
  1840: space0               ( 1 -     75)
  1841: )                    ( 1 -     75)
  1842: ;                    ( 1 -     75)
  1843: Texture2D            ( 1 -     77)
  1844: VSM                  ( 1 -     77)
  1845: :                    ( 1 -     77)
  1846: register             ( 1 -     77)
  1847: (                    ( 1 -     77)
  1848: t1                   ( 1 -     77)
  1849: ,                    ( 1 -     77)
  1850: space0               ( 1 -     77)
  1851: )                    ( 1 -     77)
  1852: ;                    ( 1 -     77)
  1853: SamplerState         ( 1 -     78)
  1854: VSMSampler           ( 1 -     78)
  1855: :                    ( 1 -     78)
  1856: register             ( 1 -     78)
  1857: (                    ( 1 -     78)
  1858: s2                   ( 1 -     78)
  1859: ,                    ( 1 -     78)
  1860: space0               ( 1 -     78)
  1861: )                    ( 1 -     78)
  1862: ;                    ( 1 -     78)
  1863: float2               ( 2 -     30)
  1864: ComputeMoments       ( 2 -     30)
  1865: (                    ( 2 -     30)
  1866: float                ( 2 -     30)
  1867: depth                ( 2 -     30)
  1868: )                    ( 2 -     30)
  1869: {                    ( 2 -     31)
  1870: float2               ( 2 -     32)
  1871: moments              ( 2 -     32)
  1872: ;                    ( 2 -     32)
  1873: moments              ( 2 -     33)
  1874: .                    ( 2 -     33)
  1875: x                    ( 2 -     33)
  1876: =                    ( 2 -     33)
  1877: depth                ( 2 -     33)
  1878: ;                    ( 2 -     33)
  1879: float2               ( 2 -     34)
  1880: pd                   ( 2 -     34)
  1881: =                    ( 2 -     34)
  1882: float2               ( 2 -     34)
  1883: (                    ( 2 -     34)
  1884: ddx                  ( 2 -     34)
  1885: (                    ( 2 -     34)
  1886: depth                ( 2 -     34)
  1887: )                    ( 2 -     34)
  1888: ,                    ( 2 -     34)
  1889: ddy                  ( 2 -     34)
  1890: (                    ( 2 -     34)
  1891: depth                ( 2 -     34)
  1892: )                    ( 2 -     34)
  1893: )                    ( 2 -     34)
  1894: ;                    ( 2 -     34)
  1895: moments              ( 2 -     35)
  1896: .                    ( 2 -     35)
  1897: y                    ( 2 -     35)
  1898: =                    ( 2 -     35)
  1899: depth                ( 2 -     35)
  1900: *                    ( 2 -     35)
  1901: depth                ( 2 -     35)
  1902: +                    ( 2 -     35)
  1903: 0.250000             ( 2 -     35)
  1904: *                    ( 2 -     35)
  1905: dot                  ( 2 -     35)
  1906: (                    ( 2 -     35)
  1907: pd                   ( 2 -     35)
  1908: ,                    ( 2 -     35)
  1909: pd                   ( 2 -     35)
  1910: )                    ( 2 -     35)
  1911: ;                    ( 2 -     35)
  1912: return               ( 2 -     36)
  1913: moments              ( 2 -     36)
  1914: ;                    ( 2 -     36)
  1915: }                    ( 2 -     37)
  1916: float                ( 2 -     39)
  1917: ChebyshevUpperBound  ( 2 -     39)
  1918: (                    ( 2 -     39)
  1919: float2               ( 2 -     39)
  1920: moments              ( 2 -     39)
  1921: ,                    ( 2 -     39)
  1922: float                ( 2 -     39)
  1923: t                    ( 2 -     39)
  1924: )                    ( 2 -     39)
  1925: {                    ( 2 -     40)
  1926: float                ( 2 -     41)
  1927: p                    ( 2 -     41)
  1928: =                    ( 2 -     41)
  1929: t                    ( 2 -     41)
  1930: unknown              ( 2 -     41)
  1931: moments              ( 2 -     41)
  1932: .                    ( 2 -     41)
  1933: x                    ( 2 -     41)
  1934: ;                    ( 2 -     41)
  1935: float                ( 2 -     42)
  1936: variance             ( 2 -     42)
  1937: =                    ( 2 -     42)
  1938: moments              ( 2 -     42)
  1939: .                    ( 2 -     42)
  1940: y                    ( 2 -     42)
  1941: -                    ( 2 -     42)
  1942: (                    ( 2 -     42)
  1943: moments              ( 2 -     42)
  1944: .                    ( 2 -     42)
  1945: x                    ( 2 -     42)
  1946: *                    ( 2 -     42)
  1947: moments              ( 2 -     42)
  1948: .                    ( 2 -     42)
  1949: x                    ( 2 -     42)
  1950: )                    ( 2 -     42)
  1951: ;                    ( 2 -     42)
  1952: variance             ( 2 -     43)
  1953: =                    ( 2 -     43)
  1954: max                  ( 2 -     43)
  1955: (                    ( 2 -     43)
  1956: variance             ( 2 -     43)
  1957: ,                    ( 2 -     43)
  1958: 0.001000             ( 2 -     43)
  1959: )                    ( 2 -     43)
  1960: ;                    ( 2 -     43)
  1961: float                ( 2 -     44)
  1962: d                    ( 2 -     44)
  1963: =                    ( 2 -     44)
  1964: t                    ( 2 -     44)
  1965: -                    ( 2 -     44)
  1966: moments              ( 2 -     44)
  1967: .                    ( 2 -     44)
  1968: x                    ( 2 -     44)
  1969: ;                    ( 2 -     44)
  1970: float                ( 2 -     45)
  1971: pMax                 ( 2 -     45)
  1972: =                    ( 2 -     45)
  1973: variance             ( 2 -     45)
  1974: /                    ( 2 -     45)
  1975: (                    ( 2 -     45)
  1976: variance             ( 2 -     45)
  1977: +                    ( 2 -     45)
  1978: d                    ( 2 -     45)
  1979: *                    ( 2 -     45)
  1980: d                    ( 2 -     45)
  1981: )                    ( 2 -     45)
  1982: ;                    ( 2 -     45)
  1983: return               ( 2 -     46)
  1984: max                  ( 2 -     46)
  1985: (                    ( 2 -     46)
  1986: p                    ( 2 -     46)
  1987: ,                    ( 2 -     46)
  1988: pMax                 ( 2 -     46)
  1989: )                    ( 2 -     46)
  1990: ;                    ( 2 -     46)
  1991: }                    ( 2 -     47)
  1992: float3               ( 2 -     49)
  1993: ShadowContribution   ( 2 -     49)
  1994: (                    ( 2 -     49)
  1995: float2               ( 2 -     49)
  1996: shadowMapPos         ( 2 -     49)
  1997: ,                    ( 2 -     49)
  1998: float                ( 2 -     49)
  1999: distanceToLight      ( 2 -     49)
  2000: )                    ( 2 -     49)
  2001: {                    ( 2 -     50)
  2002: float2               ( 2 -     51)
  2003: moments              ( 2 -     51)
  2004: =                    ( 2 -     51)
  2005: VSM                  ( 2 -     51)
  2006: .                    ( 2 -     51)
  2007: Sample               ( 2 -     51)
  2008: (                    ( 2 -     51)
  2009: VSMSampler           ( 2 -     51)
  2010: ,                    ( 2 -     51)
  2011: shadowMapPos         ( 2 -     51)
  2012: )                    ( 2 -     51)
  2013: .                    ( 2 -     51)
  2014: xy                   ( 2 -     51)
  2015: ;                    ( 2 -     51)
  2016: float3               ( 2 -     52)
  2017: shadow               ( 2 -     52)
  2018: =                    ( 2 -     52)
  2019: ChebyshevUpperBound  ( 2 -     52)
  2020: (                    ( 2 -     52)
  2021: moments              ( 2 -     52)
  2022: ,                    ( 2 -     52)
  2023: distanceToLight      ( 2 -     52)
  2024: )                    ( 2 -     52)
  2025: ;                    ( 2 -     52)
  2026: return               ( 2 -     63)
  2027: shadow               ( 2 -     63)
  2028: ;                    ( 2 -     63)
  2029: }                    ( 2 -     64)
  2030: float4               ( 3 -     33)
  2031: Shade                ( 3 -     33)
  2032: (                    ( 3 -     33)
  2033: uint                 ( 3 -     33)
  2034: matID                ( 3 -     33)
  2035: ,                    ( 3 -     33)
  2036: float2               ( 3 -     33)
  2037: uv                   ( 3 -     33)
  2038: ,                    ( 3 -     33)
  2039: float3               ( 3 -     33)
  2040: worldPos             ( 3 -     33)
  2041: ,                    ( 3 -     33)
  2042: float3               ( 3 -     33)
  2043: normal               ( 3 -     33)
  2044: )                    ( 3 -     33)
  2045: {                    ( 3 -     34)
  2046: float                ( 3 -     35)
  2047: nDotl                ( 3 -     35)
  2048: =                    ( 3 -     35)
  2049: dot                  ( 3 -     35)
  2050: (                    ( 3 -     35)
  2051: normal               ( 3 -     35)
  2052: ,                    ( 3 -     35)
  2053: -                    ( 3 -     35)
  2054: lightDirection       ( 3 -     35)
  2055: .                    ( 3 -     35)
  2056: xyz                  ( 3 -     35)
  2057: )                    ( 3 -     35)
  2058: ;                    ( 3 -     35)
  2059: Material             ( 3 -     36)
  2060: mat                  ( 3 -     36)
  2061: =                    ( 3 -     36)
  2062: Materials            ( 3 -     36)
  2063: [                    ( 3 -     36)
  2064: matID                ( 3 -     36)
  2065: ]                    ( 3 -     36)
  2066: ;                    ( 3 -     36)
  2067: float4               ( 3 -     37)
  2068: matColor             ( 3 -     37)
  2069: =                    ( 3 -     37)
  2070: mat                  ( 3 -     37)
  2071: .                    ( 3 -     37)
  2072: TextureFlags         ( 3 -     37)
  2073: &                    ( 3 -     37)
  2074: 1                    ( 3 -     37)
  2075: ?                    ( 3 -     37)
  2076: MaterialTextures     ( 3 -     37)
  2077: [                    ( 3 -     37)
  2078: mat                  ( 3 -     37)
  2079: .                    ( 3 -     37)
  2080: AlbedoTexID          ( 3 -     37)
  2081: ]                    ( 3 -     37)
  2082: .                    ( 3 -     37)
  2083: Sample               ( 3 -     37)
  2084: (                    ( 3 -     37)
  2085: LinearSampler        ( 3 -     37)
  2086: ,                    ( 3 -     37)
  2087: uv                   ( 3 -     37)
  2088: )                    ( 3 -     37)
  2089: :                    ( 3 -     37)
  2090: mat                  ( 3 -     37)
  2091: .                    ( 3 -     37)
  2092: Color                ( 3 -     37)
  2093: ;                    ( 3 -     37)
  2094: float3               ( 3 -     38)
  2095: viewVec              ( 3 -     38)
  2096: =                    ( 3 -     38)
  2097: normalize            ( 3 -     38)
  2098: (                    ( 3 -     38)
  2099: worldPos             ( 3 -     38)
  2100: -                    ( 3 -     38)
  2101: camPosition          ( 3 -     38)
  2102: .                    ( 3 -     38)
  2103: xyz                  ( 3 -     38)
  2104: )                    ( 3 -     38)
  2105: ;                    ( 3 -     38)
  2106: if                   ( 3 -     39)
  2107: (                    ( 3 -     39)
  2108: nDotl                ( 3 -     39)
  2109: <                    ( 3 -     39)
  2110: 0.050000             ( 3 -     39)
  2111: )                    ( 3 -     39)
  2112: nDotl                ( 3 -     40)
  2113: =                    ( 3 -     40)
  2114: 0.050000             ( 3 -     40)
  2115: ;                    ( 3 -     40)
  2116: float3               ( 3 -     41)
  2117: diffuse              ( 3 -     41)
  2118: =                    ( 3 -     41)
  2119: lightColor           ( 3 -     41)
  2120: .                    ( 3 -     41)
  2121: xyz                  ( 3 -     41)
  2122: *                    ( 3 -     41)
  2123: matColor             ( 3 -     41)
  2124: .                    ( 3 -     41)
  2125: xyz                  ( 3 -     41)
  2126: *                    ( 3 -     41)
  2127: nDotl                ( 3 -     41)
  2128: ;                    ( 3 -     41)
  2129: float3               ( 3 -     42)
  2130: specular             ( 3 -     42)
  2131: =                    ( 3 -     42)
  2132: lightColor           ( 3 -     42)
  2133: .                    ( 3 -     42)
  2134: xyz                  ( 3 -     42)
  2135: *                    ( 3 -     42)
  2136: pow                  ( 3 -     42)
  2137: (                    ( 3 -     42)
  2138: saturate             ( 3 -     42)
  2139: (                    ( 3 -     42)
  2140: dot                  ( 3 -     42)
  2141: (                    ( 3 -     42)
  2142: reflect              ( 3 -     42)
  2143: (                    ( 3 -     42)
  2144: -                    ( 3 -     42)
  2145: lightDirection       ( 3 -     42)
  2146: .                    ( 3 -     42)
  2147: xyz                  ( 3 -     42)
  2148: ,                    ( 3 -     42)
  2149: normal               ( 3 -     42)
  2150: )                    ( 3 -     42)
  2151: ,                    ( 3 -     42)
  2152: viewVec              ( 3 -     42)
  2153: )                    ( 3 -     42)
  2154: )                    ( 3 -     42)
  2155: ,                    ( 3 -     42)
  2156: 10.000000            ( 3 -     42)
  2157: )                    ( 3 -     42)
  2158: ;                    ( 3 -     42)
  2159: float3               ( 3 -     43)
  2160: finalColor           ( 3 -     43)
  2161: =                    ( 3 -     43)
  2162: saturate             ( 3 -     43)
  2163: (                    ( 3 -     43)
  2164: diffuse              ( 3 -     43)
  2165: +                    ( 3 -     43)
  2166: specular             ( 3 -     43)
  2167: *                    ( 3 -     43)
  2168: 0.500000             ( 3 -     43)
  2169: )                    ( 3 -     43)
  2170: ;                    ( 3 -     43)
  2171: float4               ( 3 -     46)
  2172: shadowMapPos         ( 3 -     46)
  2173: =                    ( 3 -     46)
  2174: mul                  ( 3 -     46)
  2175: (                    ( 3 -     46)
  2176: lightViewProj        ( 3 -     46)
  2177: ,                    ( 3 -     46)
  2178: float4               ( 3 -     46)
  2179: (                    ( 3 -     46)
  2180: worldPos             ( 3 -     46)
  2181: ,                    ( 3 -     46)
  2182: 1.000000             ( 3 -     46)
  2183: )                    ( 3 -     46)
  2184: )                    ( 3 -     46)
  2185: ;                    ( 3 -     46)
  2186: shadowMapPos         ( 3 -     47)
  2187: .                    ( 3 -     47)
  2188: y                    ( 3 -     47)
  2189: =                    ( 3 -     47)
  2190: -                    ( 3 -     47)
  2191: shadowMapPos         ( 3 -     47)
  2192: .                    ( 3 -     47)
  2193: y                    ( 3 -     47)
  2194: ;                    ( 3 -     47)
  2195: shadowMapPos         ( 3 -     48)
  2196: .                    ( 3 -     48)
  2197: xy                   ( 3 -     48)
  2198: =                    ( 3 -     48)
  2199: (                    ( 3 -     48)
  2200: shadowMapPos         ( 3 -     48)
  2201: .                    ( 3 -     48)
  2202: xy                   ( 3 -     48)
  2203: +                    ( 3 -     48)
  2204: 1.000000             ( 3 -     48)
  2205: )                    ( 3 -     48)
  2206: *                    ( 3 -     48)
  2207: 0.500000             ( 3 -     48)
  2208: ;                    ( 3 -     48)
  2209: if                   ( 3 -     49)
  2210: (                    ( 3 -     49)
  2211: clamp                ( 3 -     49)
  2212: (                    ( 3 -     49)
  2213: shadowMapPos         ( 3 -     49)
  2214: .                    ( 3 -     49)
  2215: x                    ( 3 -     49)
  2216: ,                    ( 3 -     49)
  2217: 0.010000             ( 3 -     49)
  2218: ,                    ( 3 -     49)
  2219: 0.990000             ( 3 -     49)
  2220: )                    ( 3 -     49)
  2221: unknown              ( 3 -     49)
  2222: shadowMapPos         ( 3 -     49)
  2223: .                    ( 3 -     49)
  2224: x                    ( 3 -     49)
  2225: unknown              ( 3 -     49)
  2226: clamp                ( 3 -     50)
  2227: (                    ( 3 -     50)
  2228: shadowMapPos         ( 3 -     50)
  2229: .                    ( 3 -     50)
  2230: y                    ( 3 -     50)
  2231: ,                    ( 3 -     50)
  2232: 0.010000             ( 3 -     50)
  2233: ,                    ( 3 -     50)
  2234: 0.990000             ( 3 -     50)
  2235: )                    ( 3 -     50)
  2236: unknown              ( 3 -     50)
  2237: shadowMapPos         ( 3 -     50)
  2238: .                    ( 3 -     50)
  2239: y                    ( 3 -     50)
  2240: unknown              ( 3 -     50)
  2241: shadowMapPos         ( 3 -     51)
  2242: .                    ( 3 -     51)
  2243: z                    ( 3 -     51)
  2244: >                    ( 3 -     51)
  2245: 0.000000             ( 3 -     51)
  2246: )                    ( 3 -     51)
  2247: {                    ( 3 -     52)
  2248: float3               ( 3 -     53)
  2249: lighting             ( 3 -     53)
  2250: =                    ( 3 -     53)
  2251: ShadowContribution   ( 3 -     53)
  2252: (                    ( 3 -     53)
  2253: shadowMapPos         ( 3 -     53)
  2254: .                    ( 3 -     53)
  2255: xy                   ( 3 -     53)
  2256: ,                    ( 3 -     53)
  2257: shadowMapPos         ( 3 -     53)
  2258: .                    ( 3 -     53)
  2259: z                    ( 3 -     53)
  2260: )                    ( 3 -     53)
  2261: ;                    ( 3 -     53)
  2262: finalColor           ( 3 -     54)
  2263: *=                   ( 3 -     54)
  2264: lighting             ( 3 -     54)
  2265: ;                    ( 3 -     54)
  2266: }                    ( 3 -     55)
  2267: return               ( 3 -     58)
  2268: float4               ( 3 -     58)
  2269: (                    ( 3 -     58)
  2270: finalColor           ( 3 -     58)
  2271: ,                    ( 3 -     58)
  2272: matColor             ( 3 -     58)
  2273: .                    ( 3 -     58)
  2274: a                    ( 3 -     58)
  2275: )                    ( 3 -     58)
  2276: ;                    ( 3 -     58)
  2277: }                    ( 3 -     59)
  2278: struct               ( 4 -     29)
  2279: VSOutput             ( 4 -     29)
  2280: {                    ( 4 -     30)
  2281: float4               ( 4 -     31)
  2282: Position             ( 4 -     31)
  2283: :                    ( 4 -     31)
  2284: SV_POSITION          ( 4 -     31)
  2285: ;                    ( 4 -     31)
  2286: float4               ( 4 -     32)
  2287: WorldPosition        ( 4 -     32)
  2288: :                    ( 4 -     32)
  2289: POSITION             ( 4 -     32)
  2290: ;                    ( 4 -     32)
  2291: float4               ( 4 -     33)
  2292: Normal               ( 4 -     33)
  2293: :                    ( 4 -     33)
  2294: NORMAL               ( 4 -     33)
  2295: ;                    ( 4 -     33)
  2296: float4               ( 4 -     34)
  2297: UV                   ( 4 -     34)
  2298: :                    ( 4 -     34)
  2299: TEXCOORD0            ( 4 -     34)
  2300: ;                    ( 4 -     34)
  2301: uint                 ( 4 -     35)
  2302: MatID                ( 4 -     35)
  2303: :                    ( 4 -     35)
  2304: MAT_ID               ( 4 -     35)
  2305: ;                    ( 4 -     35)
  2306: }                    ( 4 -     36)
  2307: ;                    ( 4 -     36)
  2308: [                    ( 4 -     38)
  2309: earlydepthstencil    ( 4 -     38)
  2310: ]                    ( 4 -     38)
  2311: void                 ( 4 -     39)
  2312: main                 ( 4 -     39)
  2313: (                    ( 4 -     39)
  2314: VSOutput             ( 4 -     39)
  2315: input                ( 4 -     39)
  2316: )                    ( 4 -     39)
  2317: {                    ( 4 -     40)
  2318: float4               ( 4 -     41)
  2319: finalColor           ( 4 -     41)
  2320: =                    ( 4 -     41)
  2321: Shade                ( 4 -     41)
  2322: (                    ( 4 -     41)
  2323: input                ( 4 -     41)
  2324: .                    ( 4 -     41)
  2325: MatID                ( 4 -     41)
  2326: ,                    ( 4 -     41)
  2327: input                ( 4 -     41)
  2328: .                    ( 4 -     41)
  2329: UV                   ( 4 -     41)
  2330: .                    ( 4 -     41)
  2331: xy                   ( 4 -     41)
  2332: ,                    ( 4 -     41)
  2333: input                ( 4 -     41)
  2334: .                    ( 4 -     41)
  2335: WorldPosition        ( 4 -     41)
  2336: .                    ( 4 -     41)
  2337: xyz                  ( 4 -     41)
  2338: ,                    ( 4 -     41)
  2339: normalize            ( 4 -     41)
  2340: (                    ( 4 -     41)
  2341: input                ( 4 -     41)
  2342: .                    ( 4 -     41)
  2343: Normal               ( 4 -     41)
  2344: .                    ( 4 -     41)
  2345: xyz                  ( 4 -     41)
  2346: )                    ( 4 -     41)
  2347: )                    ( 4 -     41)
  2348: ;                    ( 4 -     41)
  2349: if                   ( 4 -     43)
  2350: (                    ( 4 -     43)
  2351: finalColor           ( 4 -     43)
  2352: .                    ( 4 -     43)
  2353: a                    ( 4 -     43)
  2354: >                    ( 4 -     43)
  2355: 0.010000             ( 4 -     43)
  2356: )                    ( 4 -     43)
  2357: {                    ( 4 -     44)
  2358: WriteNewPixelToAOIT  ( 4 -     45)
  2359: (                    ( 4 -     45)
  2360: input                ( 4 -     45)
  2361: .                    ( 4 -     45)
  2362: Position             ( 4 -     45)
  2363: .                    ( 4 -     45)
  2364: xy                   ( 4 -     45)
  2365: ,                    ( 4 -     45)
  2366: input                ( 4 -     45)
  2367: .                    ( 4 -     45)
  2368: Position             ( 4 -     45)
  2369: .                    ( 4 -     45)
  2370: z                    ( 4 -     45)
  2371: ,                    ( 4 -     45)
  2372: finalColor           ( 4 -     45)
  2373: )                    ( 4 -     45)
  2374: ;                    ( 4 -     45)
  2375: return               ( 4 -     46)
  2376: ;                    ( 4 -     46)
  2377: }                    ( 4 -     47)
  2378: clip                 ( 4 -     49)
  2379: (                    ( 4 -     49)
  2380: -                    ( 4 -     49)
  2381: 1.000000             ( 4 -     49)
  2382: )                    ( 4 -     49)
  2383: ;                    ( 4 -     49)
  2384: }                    ( 4 -     50)
  2385: <eof>                ( 4 -     51)

 0: AOIT.h
 1: shaderDefs.h
 2: varianceShadowMapping.h
 3: shading.h
 4: C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/AdaptiveOIT.frag

