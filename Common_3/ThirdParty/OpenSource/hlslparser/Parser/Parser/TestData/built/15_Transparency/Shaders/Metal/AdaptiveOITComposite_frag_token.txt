     0: struct               ( 0 -     48)
     1: AOITNode             ( 0 -     48)
     2: {                    ( 0 -     49)
     3: float                ( 0 -     50)
     4: depth                ( 0 -     50)
     5: ;                    ( 0 -     50)
     6: float                ( 0 -     51)
     7: trans                ( 0 -     51)
     8: ;                    ( 0 -     51)
     9: uint                 ( 0 -     52)
    10: color                ( 0 -     52)
    11: ;                    ( 0 -     52)
    12: }                    ( 0 -     53)
    13: ;                    ( 0 -     53)
    14: struct               ( 0 -     55)
    15: AOITControlSurface   ( 0 -     55)
    16: {                    ( 0 -     56)
    17: bool                 ( 0 -     57)
    18: clear                ( 0 -     57)
    19: ;                    ( 0 -     57)
    20: bool                 ( 0 -     58)
    21: opaque               ( 0 -     58)
    22: ;                    ( 0 -     58)
    23: float                ( 0 -     59)
    24: depth                ( 0 -     59)
    25: ;                    ( 0 -     59)
    26: }                    ( 0 -     60)
    27: ;                    ( 0 -     60)
    28: struct               ( 0 -     62)
    29: AOITData             ( 0 -     62)
    30: {                    ( 0 -     63)
    31: float4               ( 0 -     64)
    32: depth                ( 0 -     64)
    33: [                    ( 0 -     64)
    34: (                    ( 0 -     64)
    35: (                    ( 0 -     64)
    36: 4                    ( 0 -     64)
    37: )                    ( 0 -     64)
    38: /                    ( 0 -     64)
    39: 4                    ( 0 -     64)
    40: )                    ( 0 -     64)
    41: ]                    ( 0 -     64)
    42: ;                    ( 0 -     64)
    43: uint4                ( 0 -     65)
    44: color                ( 0 -     65)
    45: [                    ( 0 -     65)
    46: (                    ( 0 -     65)
    47: (                    ( 0 -     65)
    48: 4                    ( 0 -     65)
    49: )                    ( 0 -     65)
    50: /                    ( 0 -     65)
    51: 4                    ( 0 -     65)
    52: )                    ( 0 -     65)
    53: ]                    ( 0 -     65)
    54: ;                    ( 0 -     65)
    55: }                    ( 0 -     66)
    56: ;                    ( 0 -     66)
    57: struct               ( 0 -     68)
    58: AOITDepthData        ( 0 -     68)
    59: {                    ( 0 -     69)
    60: float4               ( 0 -     70)
    61: depth                ( 0 -     70)
    62: [                    ( 0 -     70)
    63: (                    ( 0 -     70)
    64: (                    ( 0 -     70)
    65: 4                    ( 0 -     70)
    66: )                    ( 0 -     70)
    67: /                    ( 0 -     70)
    68: 4                    ( 0 -     70)
    69: )                    ( 0 -     70)
    70: ]                    ( 0 -     70)
    71: ;                    ( 0 -     70)
    72: }                    ( 0 -     71)
    73: ;                    ( 0 -     71)
    74: struct               ( 0 -     73)
    75: AOITColorData        ( 0 -     73)
    76: {                    ( 0 -     74)
    77: uint4                ( 0 -     75)
    78: color                ( 0 -     75)
    79: [                    ( 0 -     75)
    80: (                    ( 0 -     75)
    81: (                    ( 0 -     75)
    82: 4                    ( 0 -     75)
    83: )                    ( 0 -     75)
    84: /                    ( 0 -     75)
    85: 4                    ( 0 -     75)
    86: )                    ( 0 -     75)
    87: ]                    ( 0 -     75)
    88: ;                    ( 0 -     75)
    89: }                    ( 0 -     76)
    90: ;                    ( 0 -     76)
    91: Texture2D            ( 0 -     96)
    92: <                    ( 0 -     96)
    93: uint                 ( 0 -     96)
    94: >                    ( 0 -     96)
    95: AOITClearMaskSRV     ( 0 -     96)
    96: :                    ( 0 -     96)
    97: register             ( 0 -     96)
    98: (                    ( 0 -     96)
    99: t5                   ( 0 -     96)
   100: ,                    ( 0 -     96)
   101: space0               ( 0 -     96)
   102: )                    ( 0 -     96)
   103: ;                    ( 0 -     96)
   104: StructuredBuffer     ( 0 -     97)
   105: <                    ( 0 -     97)
   106: AOITDepthData        ( 0 -     97)
   107: >                    ( 0 -     97)
   108: AOITDepthDataSRV     ( 0 -     97)
   109: :                    ( 0 -     97)
   110: register             ( 0 -     97)
   111: (                    ( 0 -     97)
   112: t6                   ( 0 -     97)
   113: ,                    ( 0 -     97)
   114: space0               ( 0 -     97)
   115: )                    ( 0 -     97)
   116: ;                    ( 0 -     97)
   117: StructuredBuffer     ( 0 -     98)
   118: <                    ( 0 -     98)
   119: AOITColorData        ( 0 -     98)
   120: >                    ( 0 -     98)
   121: AOITColorDataSRV     ( 0 -     98)
   122: :                    ( 0 -     98)
   123: register             ( 0 -     98)
   124: (                    ( 0 -     98)
   125: t7                   ( 0 -     98)
   126: ,                    ( 0 -     98)
   127: space0               ( 0 -     98)
   128: )                    ( 0 -     98)
   129: ;                    ( 0 -     98)
   130: uint                 ( 0 -    103)
   131: PackRGB              ( 0 -    103)
   132: (                    ( 0 -    103)
   133: float3               ( 0 -    103)
   134: color                ( 0 -    103)
   135: )                    ( 0 -    103)
   136: {                    ( 0 -    104)
   137: uint3                ( 0 -    105)
   138: u                    ( 0 -    105)
   139: =                    ( 0 -    105)
   140: (                    ( 0 -    105)
   141: uint3                ( 0 -    105)
   142: )                    ( 0 -    105)
   143: (                    ( 0 -    105)
   144: saturate             ( 0 -    105)
   145: (                    ( 0 -    105)
   146: color                ( 0 -    105)
   147: )                    ( 0 -    105)
   148: *                    ( 0 -    105)
   149: 255                  ( 0 -    105)
   150: +                    ( 0 -    105)
   151: 0.500000             ( 0 -    105)
   152: )                    ( 0 -    105)
   153: ;                    ( 0 -    105)
   154: uint                 ( 0 -    106)
   155: packedOutput         ( 0 -    106)
   156: =                    ( 0 -    106)
   157: (                    ( 0 -    106)
   158: u                    ( 0 -    106)
   159: .                    ( 0 -    106)
   160: z                    ( 0 -    106)
   161: unknown              ( 0 -    106)
   162: 16                   ( 0 -    106)
   163: )                    ( 0 -    106)
   164: |                    ( 0 -    106)
   165: (                    ( 0 -    106)
   166: u                    ( 0 -    106)
   167: .                    ( 0 -    106)
   168: y                    ( 0 -    106)
   169: unknown              ( 0 -    106)
   170: 8                    ( 0 -    106)
   171: )                    ( 0 -    106)
   172: |                    ( 0 -    106)
   173: u                    ( 0 -    106)
   174: .                    ( 0 -    106)
   175: x                    ( 0 -    106)
   176: ;                    ( 0 -    106)
   177: return               ( 0 -    107)
   178: packedOutput         ( 0 -    107)
   179: ;                    ( 0 -    107)
   180: }                    ( 0 -    108)
   181: float3               ( 0 -    110)
   182: UnpackRGB            ( 0 -    110)
   183: (                    ( 0 -    110)
   184: uint                 ( 0 -    110)
   185: packedInput          ( 0 -    110)
   186: )                    ( 0 -    110)
   187: {                    ( 0 -    111)
   188: float3               ( 0 -    112)
   189: unpackedOutput       ( 0 -    112)
   190: ;                    ( 0 -    112)
   191: uint3                ( 0 -    113)
   192: p                    ( 0 -    113)
   193: =                    ( 0 -    113)
   194: uint3                ( 0 -    113)
   195: (                    ( 0 -    113)
   196: (                    ( 0 -    113)
   197: packedInput          ( 0 -    113)
   198: &                    ( 0 -    113)
   199: 255                  ( 0 -    113)
   200: )                    ( 0 -    113)
   201: ,                    ( 0 -    113)
   202: (                    ( 0 -    114)
   203: packedInput          ( 0 -    114)
   204: unknown              ( 0 -    114)
   205: 8                    ( 0 -    114)
   206: )                    ( 0 -    114)
   207: &                    ( 0 -    114)
   208: 255                  ( 0 -    114)
   209: ,                    ( 0 -    114)
   210: (                    ( 0 -    115)
   211: packedInput          ( 0 -    115)
   212: unknown              ( 0 -    115)
   213: 16                   ( 0 -    115)
   214: )                    ( 0 -    115)
   215: &                    ( 0 -    115)
   216: 255                  ( 0 -    115)
   217: )                    ( 0 -    115)
   218: ;                    ( 0 -    115)
   219: unpackedOutput       ( 0 -    117)
   220: =                    ( 0 -    117)
   221: (                    ( 0 -    117)
   222: (                    ( 0 -    117)
   223: float3               ( 0 -    117)
   224: )                    ( 0 -    117)
   225: p                    ( 0 -    117)
   226: )                    ( 0 -    117)
   227: /                    ( 0 -    117)
   228: 255                  ( 0 -    117)
   229: ;                    ( 0 -    117)
   230: return               ( 0 -    118)
   231: unpackedOutput       ( 0 -    118)
   232: ;                    ( 0 -    118)
   233: }                    ( 0 -    119)
   234: uint                 ( 0 -    121)
   235: PackRGBA             ( 0 -    121)
   236: (                    ( 0 -    121)
   237: float4               ( 0 -    121)
   238: color                ( 0 -    121)
   239: )                    ( 0 -    121)
   240: {                    ( 0 -    122)
   241: uint4                ( 0 -    123)
   242: u                    ( 0 -    123)
   243: =                    ( 0 -    123)
   244: (                    ( 0 -    123)
   245: uint4                ( 0 -    123)
   246: )                    ( 0 -    123)
   247: (                    ( 0 -    123)
   248: saturate             ( 0 -    123)
   249: (                    ( 0 -    123)
   250: color                ( 0 -    123)
   251: )                    ( 0 -    123)
   252: *                    ( 0 -    123)
   253: 255                  ( 0 -    123)
   254: +                    ( 0 -    123)
   255: 0.500000             ( 0 -    123)
   256: )                    ( 0 -    123)
   257: ;                    ( 0 -    123)
   258: uint                 ( 0 -    124)
   259: packedOutput         ( 0 -    124)
   260: =                    ( 0 -    124)
   261: (                    ( 0 -    124)
   262: u                    ( 0 -    124)
   263: .                    ( 0 -    124)
   264: w                    ( 0 -    124)
   265: unknown              ( 0 -    124)
   266: 24                   ( 0 -    124)
   267: )                    ( 0 -    124)
   268: |                    ( 0 -    124)
   269: (                    ( 0 -    124)
   270: u                    ( 0 -    124)
   271: .                    ( 0 -    124)
   272: z                    ( 0 -    124)
   273: unknown              ( 0 -    124)
   274: 16                   ( 0 -    124)
   275: )                    ( 0 -    124)
   276: |                    ( 0 -    124)
   277: (                    ( 0 -    124)
   278: u                    ( 0 -    124)
   279: .                    ( 0 -    124)
   280: y                    ( 0 -    124)
   281: unknown              ( 0 -    124)
   282: 8                    ( 0 -    124)
   283: )                    ( 0 -    124)
   284: |                    ( 0 -    124)
   285: u                    ( 0 -    124)
   286: .                    ( 0 -    124)
   287: x                    ( 0 -    124)
   288: ;                    ( 0 -    124)
   289: return               ( 0 -    125)
   290: packedOutput         ( 0 -    125)
   291: ;                    ( 0 -    125)
   292: }                    ( 0 -    126)
   293: float4               ( 0 -    128)
   294: UnpackRGBA           ( 0 -    128)
   295: (                    ( 0 -    128)
   296: uint                 ( 0 -    128)
   297: packedInput          ( 0 -    128)
   298: )                    ( 0 -    128)
   299: {                    ( 0 -    129)
   300: float4               ( 0 -    130)
   301: unpackedOutput       ( 0 -    130)
   302: ;                    ( 0 -    130)
   303: uint4                ( 0 -    131)
   304: p                    ( 0 -    131)
   305: =                    ( 0 -    131)
   306: uint4                ( 0 -    131)
   307: (                    ( 0 -    131)
   308: (                    ( 0 -    131)
   309: packedInput          ( 0 -    131)
   310: &                    ( 0 -    131)
   311: 255                  ( 0 -    131)
   312: )                    ( 0 -    131)
   313: ,                    ( 0 -    131)
   314: (                    ( 0 -    132)
   315: packedInput          ( 0 -    132)
   316: unknown              ( 0 -    132)
   317: 8                    ( 0 -    132)
   318: )                    ( 0 -    132)
   319: &                    ( 0 -    132)
   320: 255                  ( 0 -    132)
   321: ,                    ( 0 -    132)
   322: (                    ( 0 -    133)
   323: packedInput          ( 0 -    133)
   324: unknown              ( 0 -    133)
   325: 16                   ( 0 -    133)
   326: )                    ( 0 -    133)
   327: &                    ( 0 -    133)
   328: 255                  ( 0 -    133)
   329: ,                    ( 0 -    133)
   330: (                    ( 0 -    134)
   331: packedInput          ( 0 -    134)
   332: unknown              ( 0 -    134)
   333: 24                   ( 0 -    134)
   334: )                    ( 0 -    134)
   335: )                    ( 0 -    134)
   336: ;                    ( 0 -    134)
   337: unpackedOutput       ( 0 -    136)
   338: =                    ( 0 -    136)
   339: (                    ( 0 -    136)
   340: (                    ( 0 -    136)
   341: float4               ( 0 -    136)
   342: )                    ( 0 -    136)
   343: p                    ( 0 -    136)
   344: )                    ( 0 -    136)
   345: /                    ( 0 -    136)
   346: 255                  ( 0 -    136)
   347: ;                    ( 0 -    136)
   348: return               ( 0 -    137)
   349: unpackedOutput       ( 0 -    137)
   350: ;                    ( 0 -    137)
   351: }                    ( 0 -    138)
   352: float                ( 0 -    140)
   353: UnpackUnnormAlpha    ( 0 -    140)
   354: (                    ( 0 -    140)
   355: uint                 ( 0 -    140)
   356: packedInput          ( 0 -    140)
   357: )                    ( 0 -    140)
   358: {                    ( 0 -    141)
   359: return               ( 0 -    142)
   360: (                    ( 0 -    142)
   361: float                ( 0 -    142)
   362: )                    ( 0 -    142)
   363: (                    ( 0 -    142)
   364: packedInput          ( 0 -    142)
   365: unknown              ( 0 -    142)
   366: 24                   ( 0 -    142)
   367: )                    ( 0 -    142)
   368: ;                    ( 0 -    142)
   369: }                    ( 0 -    143)
   370: uint                 ( 0 -    145)
   371: AOITAddrGen          ( 0 -    145)
   372: (                    ( 0 -    145)
   373: uint2                ( 0 -    145)
   374: addr2D               ( 0 -    145)
   375: ,                    ( 0 -    145)
   376: uint                 ( 0 -    145)
   377: width                ( 0 -    145)
   378: )                    ( 0 -    145)
   379: {                    ( 0 -    146)
   380: width                ( 0 -    148)
   381: =                    ( 0 -    148)
   382: width                ( 0 -    148)
   383: unknown              ( 0 -    148)
   384: 1                    ( 0 -    148)
   385: ;                    ( 0 -    148)
   386: uint2                ( 0 -    149)
   387: tileAddr2D           ( 0 -    149)
   388: =                    ( 0 -    149)
   389: addr2D               ( 0 -    149)
   390: unknown              ( 0 -    149)
   391: 1                    ( 0 -    149)
   392: ;                    ( 0 -    149)
   393: uint                 ( 0 -    150)
   394: tileAddr1D           ( 0 -    150)
   395: =                    ( 0 -    150)
   396: (                    ( 0 -    150)
   397: tileAddr2D           ( 0 -    150)
   398: [                    ( 0 -    150)
   399: 0                    ( 0 -    150)
   400: ]                    ( 0 -    150)
   401: +                    ( 0 -    150)
   402: width                ( 0 -    150)
   403: *                    ( 0 -    150)
   404: tileAddr2D           ( 0 -    150)
   405: [                    ( 0 -    150)
   406: 1                    ( 0 -    150)
   407: ]                    ( 0 -    150)
   408: )                    ( 0 -    150)
   409: unknown              ( 0 -    150)
   410: 2                    ( 0 -    150)
   411: ;                    ( 0 -    150)
   412: uint2                ( 0 -    151)
   413: pixelAddr2D          ( 0 -    151)
   414: =                    ( 0 -    151)
   415: addr2D               ( 0 -    151)
   416: &                    ( 0 -    151)
   417: 1                    ( 0 -    151)
   418: ;                    ( 0 -    151)
   419: uint                 ( 0 -    152)
   420: pixelAddr1D          ( 0 -    152)
   421: =                    ( 0 -    152)
   422: (                    ( 0 -    152)
   423: pixelAddr2D          ( 0 -    152)
   424: [                    ( 0 -    152)
   425: 1                    ( 0 -    152)
   426: ]                    ( 0 -    152)
   427: unknown              ( 0 -    152)
   428: 1                    ( 0 -    152)
   429: )                    ( 0 -    152)
   430: +                    ( 0 -    152)
   431: pixelAddr2D          ( 0 -    152)
   432: [                    ( 0 -    152)
   433: 0                    ( 0 -    152)
   434: ]                    ( 0 -    152)
   435: ;                    ( 0 -    152)
   436: return               ( 0 -    153)
   437: tileAddr1D           ( 0 -    153)
   438: |                    ( 0 -    153)
   439: pixelAddr1D          ( 0 -    153)
   440: ;                    ( 0 -    153)
   441: }                    ( 0 -    157)
   442: uint                 ( 0 -    169)
   443: AOITAddrGenSRV       ( 0 -    169)
   444: (                    ( 0 -    169)
   445: uint2                ( 0 -    169)
   446: addr2D               ( 0 -    169)
   447: )                    ( 0 -    169)
   448: {                    ( 0 -    170)
   449: uint2                ( 0 -    171)
   450: dim                  ( 0 -    171)
   451: ;                    ( 0 -    171)
   452: AOITClearMaskSRV     ( 0 -    172)
   453: .                    ( 0 -    172)
   454: GetDimensions        ( 0 -    172)
   455: (                    ( 0 -    172)
   456: dim                  ( 0 -    172)
   457: [                    ( 0 -    172)
   458: 0                    ( 0 -    172)
   459: ]                    ( 0 -    172)
   460: ,                    ( 0 -    172)
   461: dim                  ( 0 -    172)
   462: [                    ( 0 -    172)
   463: 1                    ( 0 -    172)
   464: ]                    ( 0 -    172)
   465: )                    ( 0 -    172)
   466: ;                    ( 0 -    172)
   467: return               ( 0 -    173)
   468: AOITAddrGen          ( 0 -    173)
   469: (                    ( 0 -    173)
   470: addr2D               ( 0 -    173)
   471: ,                    ( 0 -    173)
   472: dim                  ( 0 -    173)
   473: [                    ( 0 -    173)
   474: 0                    ( 0 -    173)
   475: ]                    ( 0 -    173)
   476: )                    ( 0 -    173)
   477: ;                    ( 0 -    173)
   478: }                    ( 0 -    174)
   479: void                 ( 0 -    177)
   480: AOITLoadControlSurface ( 0 -    177)
   481: (                    ( 0 -    177)
   482: in                   ( 0 -    177)
   483: uint                 ( 0 -    177)
   484: data                 ( 0 -    177)
   485: ,                    ( 0 -    177)
   486: inout                ( 0 -    177)
   487: AOITControlSurface   ( 0 -    177)
   488: surface              ( 0 -    177)
   489: )                    ( 0 -    177)
   490: {                    ( 0 -    178)
   491: surface              ( 0 -    179)
   492: .                    ( 0 -    179)
   493: clear                ( 0 -    179)
   494: =                    ( 0 -    179)
   495: data                 ( 0 -    179)
   496: &                    ( 0 -    179)
   497: 1                    ( 0 -    179)
   498: ?                    ( 0 -    179)
   499: true                 ( 0 -    179)
   500: :                    ( 0 -    179)
   501: false                ( 0 -    179)
   502: ;                    ( 0 -    179)
   503: surface              ( 0 -    180)
   504: .                    ( 0 -    180)
   505: opaque               ( 0 -    180)
   506: =                    ( 0 -    180)
   507: data                 ( 0 -    180)
   508: &                    ( 0 -    180)
   509: 2                    ( 0 -    180)
   510: ?                    ( 0 -    180)
   511: true                 ( 0 -    180)
   512: :                    ( 0 -    180)
   513: false                ( 0 -    180)
   514: ;                    ( 0 -    180)
   515: surface              ( 0 -    181)
   516: .                    ( 0 -    181)
   517: depth                ( 0 -    181)
   518: =                    ( 0 -    181)
   519: asfloat              ( 0 -    181)
   520: (                    ( 0 -    181)
   521: (                    ( 0 -    181)
   522: data                 ( 0 -    181)
   523: &                    ( 0 -    181)
   524: 4294967292           ( 0 -    181)
   525: )                    ( 0 -    181)
   526: |                    ( 0 -    181)
   527: 3                    ( 0 -    181)
   528: )                    ( 0 -    181)
   529: ;                    ( 0 -    181)
   530: }                    ( 0 -    182)
   531: void                 ( 0 -    257)
   532: AOITLoadControlSurfaceSRV ( 0 -    257)
   533: (                    ( 0 -    257)
   534: in                   ( 0 -    257)
   535: uint2                ( 0 -    257)
   536: pixelAddr            ( 0 -    257)
   537: ,                    ( 0 -    257)
   538: inout                ( 0 -    257)
   539: AOITControlSurface   ( 0 -    257)
   540: surface              ( 0 -    257)
   541: )                    ( 0 -    257)
   542: {                    ( 0 -    258)
   543: uint                 ( 0 -    259)
   544: data                 ( 0 -    259)
   545: =                    ( 0 -    259)
   546: AOITClearMaskSRV     ( 0 -    259)
   547: [                    ( 0 -    259)
   548: pixelAddr            ( 0 -    259)
   549: ]                    ( 0 -    259)
   550: ;                    ( 0 -    259)
   551: AOITLoadControlSurface ( 0 -    260)
   552: (                    ( 0 -    260)
   553: data                 ( 0 -    260)
   554: ,                    ( 0 -    260)
   555: surface              ( 0 -    260)
   556: )                    ( 0 -    260)
   557: ;                    ( 0 -    260)
   558: }                    ( 0 -    261)
   559: void                 ( 0 -    263)
   560: AOITLoadDataSRV      ( 0 -    263)
   561: (                    ( 0 -    263)
   562: in                   ( 0 -    263)
   563: uint2                ( 0 -    263)
   564: pixelAddr            ( 0 -    263)
   565: ,                    ( 0 -    263)
   566: out                  ( 0 -    263)
   567: AOITNode             ( 0 -    263)
   568: nodeArray            ( 0 -    263)
   569: [                    ( 0 -    263)
   570: (                    ( 0 -    263)
   571: 4                    ( 0 -    263)
   572: )                    ( 0 -    263)
   573: ]                    ( 0 -    263)
   574: )                    ( 0 -    263)
   575: {                    ( 0 -    264)
   576: AOITData             ( 0 -    265)
   577: data                 ( 0 -    265)
   578: ;                    ( 0 -    265)
   579: uint                 ( 0 -    266)
   580: addr                 ( 0 -    266)
   581: =                    ( 0 -    266)
   582: AOITAddrGenSRV       ( 0 -    266)
   583: (                    ( 0 -    266)
   584: pixelAddr            ( 0 -    266)
   585: )                    ( 0 -    266)
   586: ;                    ( 0 -    266)
   587: data                 ( 0 -    267)
   588: .                    ( 0 -    267)
   589: color                ( 0 -    267)
   590: =                    ( 0 -    267)
   591: AOITColorDataSRV     ( 0 -    267)
   592: [                    ( 0 -    267)
   593: addr                 ( 0 -    267)
   594: ]                    ( 0 -    267)
   595: ;                    ( 0 -    267)
   596: [                    ( 0 -    277)
   597: unroll               ( 0 -    277)
   598: ]                    ( 0 -    277)
   599: for                  ( 0 -    277)
   600: (                    ( 0 -    277)
   601: uint                 ( 0 -    277)
   602: i                    ( 0 -    277)
   603: =                    ( 0 -    277)
   604: 0                    ( 0 -    277)
   605: ;                    ( 0 -    277)
   606: i                    ( 0 -    277)
   607: <                    ( 0 -    277)
   608: (                    ( 0 -    277)
   609: (                    ( 0 -    277)
   610: 4                    ( 0 -    277)
   611: )                    ( 0 -    277)
   612: /                    ( 0 -    277)
   613: 4                    ( 0 -    277)
   614: )                    ( 0 -    277)
   615: ;                    ( 0 -    277)
   616: ++                   ( 0 -    277)
   617: i                    ( 0 -    277)
   618: )                    ( 0 -    277)
   619: {                    ( 0 -    278)
   620: [                    ( 0 -    279)
   621: unroll               ( 0 -    279)
   622: ]                    ( 0 -    279)
   623: for                  ( 0 -    279)
   624: (                    ( 0 -    279)
   625: uint                 ( 0 -    279)
   626: j                    ( 0 -    279)
   627: =                    ( 0 -    279)
   628: 0                    ( 0 -    279)
   629: ;                    ( 0 -    279)
   630: j                    ( 0 -    279)
   631: <                    ( 0 -    279)
   632: 4                    ( 0 -    279)
   633: ;                    ( 0 -    279)
   634: ++                   ( 0 -    279)
   635: j                    ( 0 -    279)
   636: )                    ( 0 -    279)
   637: {                    ( 0 -    280)
   638: AOITNode             ( 0 -    281)
   639: node                 ( 0 -    281)
   640: =                    ( 0 -    281)
   641: {                    ( 0 -    281)
   642: 0                    ( 0 -    281)
   643: ,                    ( 0 -    281)
   644: UnpackUnnormAlpha    ( 0 -    281)
   645: (                    ( 0 -    281)
   646: data                 ( 0 -    281)
   647: .                    ( 0 -    281)
   648: color                ( 0 -    281)
   649: [                    ( 0 -    281)
   650: i                    ( 0 -    281)
   651: ]                    ( 0 -    281)
   652: [                    ( 0 -    281)
   653: j                    ( 0 -    281)
   654: ]                    ( 0 -    281)
   655: )                    ( 0 -    281)
   656: ,                    ( 0 -    281)
   657: data                 ( 0 -    282)
   658: .                    ( 0 -    282)
   659: color                ( 0 -    282)
   660: [                    ( 0 -    282)
   661: i                    ( 0 -    282)
   662: ]                    ( 0 -    282)
   663: [                    ( 0 -    282)
   664: j                    ( 0 -    282)
   665: ]                    ( 0 -    282)
   666: &                    ( 0 -    282)
   667: 16777215             ( 0 -    282)
   668: }                    ( 0 -    282)
   669: ;                    ( 0 -    282)
   670: nodeArray            ( 0 -    283)
   671: [                    ( 0 -    283)
   672: 4                    ( 0 -    283)
   673: *                    ( 0 -    283)
   674: i                    ( 0 -    283)
   675: +                    ( 0 -    283)
   676: j                    ( 0 -    283)
   677: ]                    ( 0 -    283)
   678: =                    ( 0 -    283)
   679: node                 ( 0 -    283)
   680: ;                    ( 0 -    283)
   681: }                    ( 0 -    284)
   682: }                    ( 0 -    285)
   683: }                    ( 0 -    287)
   684: void                 ( 0 -    293)
   685: AOITClearData        ( 0 -    293)
   686: (                    ( 0 -    293)
   687: inout                ( 0 -    293)
   688: AOITData             ( 0 -    293)
   689: data                 ( 0 -    293)
   690: ,                    ( 0 -    293)
   691: float                ( 0 -    293)
   692: depth                ( 0 -    293)
   693: ,                    ( 0 -    293)
   694: float4               ( 0 -    293)
   695: color                ( 0 -    293)
   696: )                    ( 0 -    293)
   697: {                    ( 0 -    294)
   698: uint                 ( 0 -    295)
   699: packedColor          ( 0 -    295)
   700: =                    ( 0 -    295)
   701: PackRGBA             ( 0 -    295)
   702: (                    ( 0 -    295)
   703: float4               ( 0 -    295)
   704: (                    ( 0 -    295)
   705: 0                    ( 0 -    295)
   706: ,                    ( 0 -    295)
   707: 0                    ( 0 -    295)
   708: ,                    ( 0 -    295)
   709: 0                    ( 0 -    295)
   710: ,                    ( 0 -    295)
   711: 1.000000             ( 0 -    295)
   712: -                    ( 0 -    295)
   713: color                ( 0 -    295)
   714: .                    ( 0 -    295)
   715: w                    ( 0 -    295)
   716: )                    ( 0 -    295)
   717: )                    ( 0 -    295)
   718: ;                    ( 0 -    295)
   719: [                    ( 0 -    304)
   720: unroll               ( 0 -    304)
   721: ]                    ( 0 -    304)
   722: for                  ( 0 -    304)
   723: (                    ( 0 -    304)
   724: uint                 ( 0 -    304)
   725: i                    ( 0 -    304)
   726: =                    ( 0 -    304)
   727: 0                    ( 0 -    304)
   728: ;                    ( 0 -    304)
   729: i                    ( 0 -    304)
   730: <                    ( 0 -    304)
   731: (                    ( 0 -    304)
   732: (                    ( 0 -    304)
   733: 4                    ( 0 -    304)
   734: )                    ( 0 -    304)
   735: /                    ( 0 -    304)
   736: 4                    ( 0 -    304)
   737: )                    ( 0 -    304)
   738: ;                    ( 0 -    304)
   739: ++                   ( 0 -    304)
   740: i                    ( 0 -    304)
   741: )                    ( 0 -    304)
   742: {                    ( 0 -    305)
   743: data                 ( 0 -    306)
   744: .                    ( 0 -    306)
   745: depth                ( 0 -    306)
   746: [                    ( 0 -    306)
   747: i                    ( 0 -    306)
   748: ]                    ( 0 -    306)
   749: =                    ( 0 -    306)
   750: (                    ( 0 -    306)
   751: 340282001837565597733306976381245063168.000000 ( 0 -    306)
   752: )                    ( 0 -    306)
   753: ;                    ( 0 -    306)
   754: data                 ( 0 -    307)
   755: .                    ( 0 -    307)
   756: color                ( 0 -    307)
   757: [                    ( 0 -    307)
   758: i                    ( 0 -    307)
   759: ]                    ( 0 -    307)
   760: =                    ( 0 -    307)
   761: packedColor          ( 0 -    307)
   762: ;                    ( 0 -    307)
   763: }                    ( 0 -    308)
   764: data                 ( 0 -    309)
   765: .                    ( 0 -    309)
   766: depth                ( 0 -    309)
   767: [                    ( 0 -    309)
   768: 0                    ( 0 -    309)
   769: ]                    ( 0 -    309)
   770: [                    ( 0 -    309)
   771: 0                    ( 0 -    309)
   772: ]                    ( 0 -    309)
   773: =                    ( 0 -    309)
   774: depth                ( 0 -    309)
   775: ;                    ( 0 -    309)
   776: data                 ( 0 -    310)
   777: .                    ( 0 -    310)
   778: color                ( 0 -    310)
   779: [                    ( 0 -    310)
   780: 0                    ( 0 -    310)
   781: ]                    ( 0 -    310)
   782: [                    ( 0 -    310)
   783: 0                    ( 0 -    310)
   784: ]                    ( 0 -    310)
   785: =                    ( 0 -    310)
   786: PackRGBA             ( 0 -    310)
   787: (                    ( 0 -    310)
   788: float4               ( 0 -    310)
   789: (                    ( 0 -    310)
   790: color                ( 0 -    310)
   791: .                    ( 0 -    310)
   792: www                  ( 0 -    310)
   793: *                    ( 0 -    310)
   794: color                ( 0 -    310)
   795: .                    ( 0 -    310)
   796: xyz                  ( 0 -    310)
   797: ,                    ( 0 -    310)
   798: 1.000000             ( 0 -    310)
   799: -                    ( 0 -    310)
   800: color                ( 0 -    310)
   801: .                    ( 0 -    310)
   802: w                    ( 0 -    310)
   803: )                    ( 0 -    310)
   804: )                    ( 0 -    310)
   805: ;                    ( 0 -    310)
   806: }                    ( 0 -    312)
   807: void                 ( 0 -    314)
   808: AOITInsertFragment   ( 0 -    314)
   809: (                    ( 0 -    314)
   810: in                   ( 0 -    314)
   811: float                ( 0 -    314)
   812: fragmentDepth        ( 0 -    314)
   813: ,                    ( 0 -    314)
   814: in                   ( 0 -    314)
   815: float                ( 0 -    314)
   816: fragmentTrans        ( 0 -    314)
   817: ,                    ( 0 -    314)
   818: in                   ( 0 -    314)
   819: float3               ( 0 -    314)
   820: fragmentColor        ( 0 -    314)
   821: ,                    ( 0 -    314)
   822: inout                ( 0 -    314)
   823: AOITNode             ( 0 -    314)
   824: nodeArray            ( 0 -    314)
   825: [                    ( 0 -    314)
   826: (                    ( 0 -    314)
   827: 4                    ( 0 -    314)
   828: )                    ( 0 -    314)
   829: ]                    ( 0 -    314)
   830: )                    ( 0 -    314)
   831: {                    ( 0 -    315)
   832: int                  ( 0 -    316)
   833: i                    ( 0 -    316)
   834: ;                    ( 0 -    316)
   835: float                ( 0 -    318)
   836: depth                ( 0 -    318)
   837: [                    ( 0 -    318)
   838: (                    ( 0 -    318)
   839: 4                    ( 0 -    318)
   840: )                    ( 0 -    318)
   841: +                    ( 0 -    318)
   842: 1                    ( 0 -    318)
   843: ]                    ( 0 -    318)
   844: ;                    ( 0 -    318)
   845: float                ( 0 -    319)
   846: trans                ( 0 -    319)
   847: [                    ( 0 -    319)
   848: (                    ( 0 -    319)
   849: 4                    ( 0 -    319)
   850: )                    ( 0 -    319)
   851: +                    ( 0 -    319)
   852: 1                    ( 0 -    319)
   853: ]                    ( 0 -    319)
   854: ;                    ( 0 -    319)
   855: uint                 ( 0 -    320)
   856: color                ( 0 -    320)
   857: [                    ( 0 -    320)
   858: (                    ( 0 -    320)
   859: 4                    ( 0 -    320)
   860: )                    ( 0 -    320)
   861: +                    ( 0 -    320)
   862: 1                    ( 0 -    320)
   863: ]                    ( 0 -    320)
   864: ;                    ( 0 -    320)
   865: [                    ( 0 -    323)
   866: unroll               ( 0 -    323)
   867: ]                    ( 0 -    323)
   868: for                  ( 0 -    323)
   869: (                    ( 0 -    323)
   870: i                    ( 0 -    323)
   871: =                    ( 0 -    323)
   872: 0                    ( 0 -    323)
   873: ;                    ( 0 -    323)
   874: i                    ( 0 -    323)
   875: <                    ( 0 -    323)
   876: (                    ( 0 -    323)
   877: 4                    ( 0 -    323)
   878: )                    ( 0 -    323)
   879: ;                    ( 0 -    323)
   880: ++                   ( 0 -    323)
   881: i                    ( 0 -    323)
   882: )                    ( 0 -    323)
   883: {                    ( 0 -    324)
   884: depth                ( 0 -    325)
   885: [                    ( 0 -    325)
   886: i                    ( 0 -    325)
   887: ]                    ( 0 -    325)
   888: =                    ( 0 -    325)
   889: nodeArray            ( 0 -    325)
   890: [                    ( 0 -    325)
   891: i                    ( 0 -    325)
   892: ]                    ( 0 -    325)
   893: .                    ( 0 -    325)
   894: depth                ( 0 -    325)
   895: ;                    ( 0 -    325)
   896: trans                ( 0 -    326)
   897: [                    ( 0 -    326)
   898: i                    ( 0 -    326)
   899: ]                    ( 0 -    326)
   900: =                    ( 0 -    326)
   901: nodeArray            ( 0 -    326)
   902: [                    ( 0 -    326)
   903: i                    ( 0 -    326)
   904: ]                    ( 0 -    326)
   905: .                    ( 0 -    326)
   906: trans                ( 0 -    326)
   907: ;                    ( 0 -    326)
   908: color                ( 0 -    327)
   909: [                    ( 0 -    327)
   910: i                    ( 0 -    327)
   911: ]                    ( 0 -    327)
   912: =                    ( 0 -    327)
   913: nodeArray            ( 0 -    327)
   914: [                    ( 0 -    327)
   915: i                    ( 0 -    327)
   916: ]                    ( 0 -    327)
   917: .                    ( 0 -    327)
   918: color                ( 0 -    327)
   919: ;                    ( 0 -    327)
   920: }                    ( 0 -    328)
   921: int                  ( 0 -    331)
   922: index                ( 0 -    331)
   923: =                    ( 0 -    331)
   924: 0                    ( 0 -    331)
   925: ;                    ( 0 -    331)
   926: float                ( 0 -    332)
   927: prevTrans            ( 0 -    332)
   928: =                    ( 0 -    332)
   929: 255                  ( 0 -    332)
   930: ;                    ( 0 -    332)
   931: [                    ( 0 -    333)
   932: unroll               ( 0 -    333)
   933: ]                    ( 0 -    333)
   934: for                  ( 0 -    333)
   935: (                    ( 0 -    333)
   936: i                    ( 0 -    333)
   937: =                    ( 0 -    333)
   938: 0                    ( 0 -    333)
   939: ;                    ( 0 -    333)
   940: i                    ( 0 -    333)
   941: <                    ( 0 -    333)
   942: (                    ( 0 -    333)
   943: 4                    ( 0 -    333)
   944: )                    ( 0 -    333)
   945: ;                    ( 0 -    333)
   946: ++                   ( 0 -    333)
   947: i                    ( 0 -    333)
   948: )                    ( 0 -    333)
   949: {                    ( 0 -    334)
   950: if                   ( 0 -    335)
   951: (                    ( 0 -    335)
   952: fragmentDepth        ( 0 -    335)
   953: >                    ( 0 -    335)
   954: depth                ( 0 -    335)
   955: [                    ( 0 -    335)
   956: i                    ( 0 -    335)
   957: ]                    ( 0 -    335)
   958: )                    ( 0 -    335)
   959: {                    ( 0 -    336)
   960: ++                   ( 0 -    337)
   961: index                ( 0 -    337)
   962: ;                    ( 0 -    337)
   963: prevTrans            ( 0 -    338)
   964: =                    ( 0 -    338)
   965: trans                ( 0 -    338)
   966: [                    ( 0 -    338)
   967: i                    ( 0 -    338)
   968: ]                    ( 0 -    338)
   969: ;                    ( 0 -    338)
   970: }                    ( 0 -    339)
   971: }                    ( 0 -    340)
   972: [                    ( 0 -    343)
   973: unroll               ( 0 -    343)
   974: ]                    ( 0 -    343)
   975: for                  ( 0 -    343)
   976: (                    ( 0 -    343)
   977: i                    ( 0 -    343)
   978: =                    ( 0 -    343)
   979: (                    ( 0 -    343)
   980: 4                    ( 0 -    343)
   981: )                    ( 0 -    343)
   982: -                    ( 0 -    343)
   983: 1                    ( 0 -    343)
   984: ;                    ( 0 -    343)
   985: i                    ( 0 -    343)
   986: unknown              ( 0 -    343)
   987: 0                    ( 0 -    343)
   988: ;                    ( 0 -    343)
   989: --                   ( 0 -    343)
   990: i                    ( 0 -    343)
   991: )                    ( 0 -    343)
   992: {                    ( 0 -    344)
   993: [                    ( 0 -    345)
   994: flatten              ( 0 -    345)
   995: ]                    ( 0 -    345)
   996: if                   ( 0 -    345)
   997: (                    ( 0 -    345)
   998: index                ( 0 -    345)
   999: unknown              ( 0 -    345)
  1000: i                    ( 0 -    345)
  1001: )                    ( 0 -    345)
  1002: {                    ( 0 -    346)
  1003: depth                ( 0 -    347)
  1004: [                    ( 0 -    347)
  1005: i                    ( 0 -    347)
  1006: +                    ( 0 -    347)
  1007: 1                    ( 0 -    347)
  1008: ]                    ( 0 -    347)
  1009: =                    ( 0 -    347)
  1010: depth                ( 0 -    347)
  1011: [                    ( 0 -    347)
  1012: i                    ( 0 -    347)
  1013: ]                    ( 0 -    347)
  1014: ;                    ( 0 -    347)
  1015: trans                ( 0 -    348)
  1016: [                    ( 0 -    348)
  1017: i                    ( 0 -    348)
  1018: +                    ( 0 -    348)
  1019: 1                    ( 0 -    348)
  1020: ]                    ( 0 -    348)
  1021: =                    ( 0 -    348)
  1022: trans                ( 0 -    348)
  1023: [                    ( 0 -    348)
  1024: i                    ( 0 -    348)
  1025: ]                    ( 0 -    348)
  1026: *                    ( 0 -    348)
  1027: fragmentTrans        ( 0 -    348)
  1028: ;                    ( 0 -    348)
  1029: color                ( 0 -    349)
  1030: [                    ( 0 -    349)
  1031: i                    ( 0 -    349)
  1032: +                    ( 0 -    349)
  1033: 1                    ( 0 -    349)
  1034: ]                    ( 0 -    349)
  1035: =                    ( 0 -    349)
  1036: color                ( 0 -    349)
  1037: [                    ( 0 -    349)
  1038: i                    ( 0 -    349)
  1039: ]                    ( 0 -    349)
  1040: ;                    ( 0 -    349)
  1041: }                    ( 0 -    350)
  1042: }                    ( 0 -    351)
  1043: const                ( 0 -    354)
  1044: float                ( 0 -    354)
  1045: newFragTrans         ( 0 -    354)
  1046: =                    ( 0 -    354)
  1047: fragmentTrans        ( 0 -    354)
  1048: *                    ( 0 -    354)
  1049: prevTrans            ( 0 -    354)
  1050: ;                    ( 0 -    354)
  1051: const                ( 0 -    355)
  1052: uint                 ( 0 -    355)
  1053: newFragColor         ( 0 -    355)
  1054: =                    ( 0 -    355)
  1055: PackRGB              ( 0 -    355)
  1056: (                    ( 0 -    355)
  1057: fragmentColor        ( 0 -    355)
  1058: *                    ( 0 -    355)
  1059: (                    ( 0 -    355)
  1060: 1.000000             ( 0 -    355)
  1061: -                    ( 0 -    355)
  1062: fragmentTrans        ( 0 -    355)
  1063: )                    ( 0 -    355)
  1064: )                    ( 0 -    355)
  1065: ;                    ( 0 -    355)
  1066: depth                ( 0 -    357)
  1067: [                    ( 0 -    357)
  1068: index                ( 0 -    357)
  1069: ]                    ( 0 -    357)
  1070: =                    ( 0 -    357)
  1071: fragmentDepth        ( 0 -    357)
  1072: ;                    ( 0 -    357)
  1073: trans                ( 0 -    358)
  1074: [                    ( 0 -    358)
  1075: index                ( 0 -    358)
  1076: ]                    ( 0 -    358)
  1077: =                    ( 0 -    358)
  1078: newFragTrans         ( 0 -    358)
  1079: ;                    ( 0 -    358)
  1080: color                ( 0 -    359)
  1081: [                    ( 0 -    359)
  1082: index                ( 0 -    359)
  1083: ]                    ( 0 -    359)
  1084: =                    ( 0 -    359)
  1085: newFragColor         ( 0 -    359)
  1086: ;                    ( 0 -    359)
  1087: float                ( 0 -    361)
  1088: EMPTY_NODE           ( 0 -    361)
  1089: =                    ( 0 -    361)
  1090: asfloat              ( 0 -    361)
  1091: (                    ( 0 -    361)
  1092: asuint               ( 0 -    361)
  1093: (                    ( 0 -    361)
  1094: float                ( 0 -    361)
  1095: (                    ( 0 -    361)
  1096: (                    ( 0 -    361)
  1097: 340282001837565597733306976381245063168.000000 ( 0 -    361)
  1098: )                    ( 0 -    361)
  1099: )                    ( 0 -    361)
  1100: )                    ( 0 -    361)
  1101: &                    ( 0 -    361)
  1102: (                    ( 0 -    361)
  1103: uint                 ( 0 -    361)
  1104: )                    ( 0 -    361)
  1105: (                    ( 0 -    361)
  1106: 4294967295           ( 0 -    361)
  1107: -                    ( 0 -    361)
  1108: (                    ( 0 -    361)
  1109: uint                 ( 0 -    361)
  1110: )                    ( 0 -    361)
  1111: (                    ( 0 -    361)
  1112: (                    ( 0 -    361)
  1113: 1                    ( 0 -    361)
  1114: unknown              ( 0 -    361)
  1115: (                    ( 0 -    361)
  1116: 8                    ( 0 -    361)
  1117: )                    ( 0 -    361)
  1118: )                    ( 0 -    361)
  1119: -                    ( 0 -    361)
  1120: 1                    ( 0 -    361)
  1121: )                    ( 0 -    361)
  1122: )                    ( 0 -    361)
  1123: )                    ( 0 -    361)
  1124: ;                    ( 0 -    361)
  1125: [                    ( 0 -    363)
  1126: flatten              ( 0 -    363)
  1127: ]                    ( 0 -    363)
  1128: if                   ( 0 -    363)
  1129: (                    ( 0 -    363)
  1130: asfloat              ( 0 -    363)
  1131: (                    ( 0 -    363)
  1132: asuint               ( 0 -    363)
  1133: (                    ( 0 -    363)
  1134: float                ( 0 -    363)
  1135: (                    ( 0 -    363)
  1136: depth                ( 0 -    363)
  1137: [                    ( 0 -    363)
  1138: (                    ( 0 -    363)
  1139: 4                    ( 0 -    363)
  1140: )                    ( 0 -    363)
  1141: ]                    ( 0 -    363)
  1142: )                    ( 0 -    363)
  1143: )                    ( 0 -    363)
  1144: &                    ( 0 -    363)
  1145: (                    ( 0 -    363)
  1146: uint                 ( 0 -    363)
  1147: )                    ( 0 -    363)
  1148: (                    ( 0 -    363)
  1149: 4294967295           ( 0 -    363)
  1150: -                    ( 0 -    363)
  1151: (                    ( 0 -    363)
  1152: uint                 ( 0 -    363)
  1153: )                    ( 0 -    363)
  1154: (                    ( 0 -    363)
  1155: (                    ( 0 -    363)
  1156: 1                    ( 0 -    363)
  1157: unknown              ( 0 -    363)
  1158: (                    ( 0 -    363)
  1159: 8                    ( 0 -    363)
  1160: )                    ( 0 -    363)
  1161: )                    ( 0 -    363)
  1162: -                    ( 0 -    363)
  1163: 1                    ( 0 -    363)
  1164: )                    ( 0 -    363)
  1165: )                    ( 0 -    363)
  1166: )                    ( 0 -    363)
  1167: unknown              ( 0 -    363)
  1168: EMPTY_NODE           ( 0 -    363)
  1169: )                    ( 0 -    363)
  1170: {                    ( 0 -    364)
  1171: float3               ( 0 -    365)
  1172: toBeRemovedColor     ( 0 -    365)
  1173: =                    ( 0 -    365)
  1174: UnpackRGB            ( 0 -    365)
  1175: (                    ( 0 -    365)
  1176: color                ( 0 -    365)
  1177: [                    ( 0 -    365)
  1178: (                    ( 0 -    365)
  1179: 4                    ( 0 -    365)
  1180: )                    ( 0 -    365)
  1181: ]                    ( 0 -    365)
  1182: )                    ( 0 -    365)
  1183: ;                    ( 0 -    365)
  1184: float3               ( 0 -    366)
  1185: toBeAccumulatedColor ( 0 -    366)
  1186: =                    ( 0 -    366)
  1187: UnpackRGB            ( 0 -    366)
  1188: (                    ( 0 -    366)
  1189: color                ( 0 -    366)
  1190: [                    ( 0 -    366)
  1191: (                    ( 0 -    366)
  1192: 4                    ( 0 -    366)
  1193: )                    ( 0 -    366)
  1194: -                    ( 0 -    366)
  1195: 1                    ( 0 -    366)
  1196: ]                    ( 0 -    366)
  1197: )                    ( 0 -    366)
  1198: ;                    ( 0 -    366)
  1199: color                ( 0 -    367)
  1200: [                    ( 0 -    367)
  1201: (                    ( 0 -    367)
  1202: 4                    ( 0 -    367)
  1203: )                    ( 0 -    367)
  1204: -                    ( 0 -    367)
  1205: 1                    ( 0 -    367)
  1206: ]                    ( 0 -    367)
  1207: =                    ( 0 -    367)
  1208: PackRGB              ( 0 -    367)
  1209: (                    ( 0 -    367)
  1210: toBeAccumulatedColor ( 0 -    367)
  1211: +                    ( 0 -    367)
  1212: toBeRemovedColor     ( 0 -    367)
  1213: *                    ( 0 -    367)
  1214: trans                ( 0 -    367)
  1215: [                    ( 0 -    367)
  1216: (                    ( 0 -    367)
  1217: 4                    ( 0 -    367)
  1218: )                    ( 0 -    367)
  1219: -                    ( 0 -    367)
  1220: 1                    ( 0 -    367)
  1221: ]                    ( 0 -    367)
  1222: *                    ( 0 -    367)
  1223: rcp                  ( 0 -    367)
  1224: (                    ( 0 -    367)
  1225: trans                ( 0 -    367)
  1226: [                    ( 0 -    367)
  1227: (                    ( 0 -    367)
  1228: 4                    ( 0 -    367)
  1229: )                    ( 0 -    367)
  1230: -                    ( 0 -    367)
  1231: 2                    ( 0 -    367)
  1232: ]                    ( 0 -    367)
  1233: )                    ( 0 -    367)
  1234: )                    ( 0 -    367)
  1235: ;                    ( 0 -    367)
  1236: trans                ( 0 -    368)
  1237: [                    ( 0 -    368)
  1238: (                    ( 0 -    368)
  1239: 4                    ( 0 -    368)
  1240: )                    ( 0 -    368)
  1241: -                    ( 0 -    368)
  1242: 1                    ( 0 -    368)
  1243: ]                    ( 0 -    368)
  1244: =                    ( 0 -    368)
  1245: trans                ( 0 -    368)
  1246: [                    ( 0 -    368)
  1247: (                    ( 0 -    368)
  1248: 4                    ( 0 -    368)
  1249: )                    ( 0 -    368)
  1250: ]                    ( 0 -    368)
  1251: ;                    ( 0 -    368)
  1252: }                    ( 0 -    369)
  1253: [                    ( 0 -    372)
  1254: unroll               ( 0 -    372)
  1255: ]                    ( 0 -    372)
  1256: for                  ( 0 -    372)
  1257: (                    ( 0 -    372)
  1258: i                    ( 0 -    372)
  1259: =                    ( 0 -    372)
  1260: 0                    ( 0 -    372)
  1261: ;                    ( 0 -    372)
  1262: i                    ( 0 -    372)
  1263: <                    ( 0 -    372)
  1264: (                    ( 0 -    372)
  1265: 4                    ( 0 -    372)
  1266: )                    ( 0 -    372)
  1267: ;                    ( 0 -    372)
  1268: ++                   ( 0 -    372)
  1269: i                    ( 0 -    372)
  1270: )                    ( 0 -    372)
  1271: {                    ( 0 -    373)
  1272: nodeArray            ( 0 -    374)
  1273: [                    ( 0 -    374)
  1274: i                    ( 0 -    374)
  1275: ]                    ( 0 -    374)
  1276: .                    ( 0 -    374)
  1277: depth                ( 0 -    374)
  1278: =                    ( 0 -    374)
  1279: depth                ( 0 -    374)
  1280: [                    ( 0 -    374)
  1281: i                    ( 0 -    374)
  1282: ]                    ( 0 -    374)
  1283: ;                    ( 0 -    374)
  1284: nodeArray            ( 0 -    375)
  1285: [                    ( 0 -    375)
  1286: i                    ( 0 -    375)
  1287: ]                    ( 0 -    375)
  1288: .                    ( 0 -    375)
  1289: trans                ( 0 -    375)
  1290: =                    ( 0 -    375)
  1291: trans                ( 0 -    375)
  1292: [                    ( 0 -    375)
  1293: i                    ( 0 -    375)
  1294: ]                    ( 0 -    375)
  1295: ;                    ( 0 -    375)
  1296: nodeArray            ( 0 -    376)
  1297: [                    ( 0 -    376)
  1298: i                    ( 0 -    376)
  1299: ]                    ( 0 -    376)
  1300: .                    ( 0 -    376)
  1301: color                ( 0 -    376)
  1302: =                    ( 0 -    376)
  1303: color                ( 0 -    376)
  1304: [                    ( 0 -    376)
  1305: i                    ( 0 -    376)
  1306: ]                    ( 0 -    376)
  1307: ;                    ( 0 -    376)
  1308: }                    ( 0 -    377)
  1309: }                    ( 0 -    378)
  1310: struct               ( 1 -     28)
  1311: VSOutput             ( 1 -     28)
  1312: {                    ( 1 -     29)
  1313: float4               ( 1 -     30)
  1314: Position             ( 1 -     30)
  1315: :                    ( 1 -     30)
  1316: SV_POSITION          ( 1 -     30)
  1317: ;                    ( 1 -     30)
  1318: float4               ( 1 -     31)
  1319: UV                   ( 1 -     31)
  1320: :                    ( 1 -     31)
  1321: Texcoord0            ( 1 -     31)
  1322: ;                    ( 1 -     31)
  1323: }                    ( 1 -     32)
  1324: ;                    ( 1 -     32)
  1325: float4               ( 1 -     34)
  1326: main                 ( 1 -     34)
  1327: (                    ( 1 -     34)
  1328: VSOutput             ( 1 -     34)
  1329: input                ( 1 -     34)
  1330: )                    ( 1 -     34)
  1331: :                    ( 1 -     34)
  1332: SV_Target            ( 1 -     34)
  1333: {                    ( 1 -     35)
  1334: float4               ( 1 -     36)
  1335: outColor             ( 1 -     36)
  1336: =                    ( 1 -     36)
  1337: float4               ( 1 -     36)
  1338: (                    ( 1 -     36)
  1339: 0.000000             ( 1 -     36)
  1340: ,                    ( 1 -     36)
  1341: 0.000000             ( 1 -     36)
  1342: ,                    ( 1 -     36)
  1343: 0.000000             ( 1 -     36)
  1344: ,                    ( 1 -     36)
  1345: 1.000000             ( 1 -     36)
  1346: )                    ( 1 -     36)
  1347: ;                    ( 1 -     36)
  1348: uint2                ( 1 -     37)
  1349: pixelAddr            ( 1 -     37)
  1350: =                    ( 1 -     37)
  1351: uint2                ( 1 -     37)
  1352: (                    ( 1 -     37)
  1353: input                ( 1 -     37)
  1354: .                    ( 1 -     37)
  1355: Position             ( 1 -     37)
  1356: .                    ( 1 -     37)
  1357: xy                   ( 1 -     37)
  1358: )                    ( 1 -     37)
  1359: ;                    ( 1 -     37)
  1360: AOITControlSurface   ( 1 -     40)
  1361: ctrlSurface          ( 1 -     40)
  1362: =                    ( 1 -     40)
  1363: (                    ( 1 -     40)
  1364: AOITControlSurface   ( 1 -     40)
  1365: )                    ( 1 -     40)
  1366: 0                    ( 1 -     40)
  1367: ;                    ( 1 -     40)
  1368: AOITLoadControlSurfaceSRV ( 1 -     41)
  1369: (                    ( 1 -     41)
  1370: pixelAddr            ( 1 -     41)
  1371: ,                    ( 1 -     41)
  1372: ctrlSurface          ( 1 -     41)
  1373: )                    ( 1 -     41)
  1374: ;                    ( 1 -     41)
  1375: if                   ( 1 -     44)
  1376: (                    ( 1 -     44)
  1377: !                    ( 1 -     44)
  1378: ctrlSurface          ( 1 -     44)
  1379: .                    ( 1 -     44)
  1380: clear                ( 1 -     44)
  1381: )                    ( 1 -     44)
  1382: {                    ( 1 -     45)
  1383: AOITNode             ( 1 -     47)
  1384: nodeArray            ( 1 -     47)
  1385: [                    ( 1 -     47)
  1386: (                    ( 1 -     47)
  1387: 4                    ( 1 -     47)
  1388: )                    ( 1 -     47)
  1389: ]                    ( 1 -     47)
  1390: ;                    ( 1 -     47)
  1391: AOITLoadDataSRV      ( 1 -     48)
  1392: (                    ( 1 -     48)
  1393: pixelAddr            ( 1 -     48)
  1394: ,                    ( 1 -     48)
  1395: nodeArray            ( 1 -     48)
  1396: )                    ( 1 -     48)
  1397: ;                    ( 1 -     48)
  1398: float                ( 1 -     51)
  1399: trans                ( 1 -     51)
  1400: =                    ( 1 -     51)
  1401: 1.000000             ( 1 -     51)
  1402: ;                    ( 1 -     51)
  1403: float3               ( 1 -     52)
  1404: color                ( 1 -     52)
  1405: =                    ( 1 -     52)
  1406: 0.000000             ( 1 -     52)
  1407: ;                    ( 1 -     52)
  1408: [                    ( 1 -     53)
  1409: unroll               ( 1 -     53)
  1410: ]                    ( 1 -     53)
  1411: for                  ( 1 -     53)
  1412: (                    ( 1 -     53)
  1413: uint                 ( 1 -     53)
  1414: i                    ( 1 -     53)
  1415: =                    ( 1 -     53)
  1416: 0                    ( 1 -     53)
  1417: ;                    ( 1 -     53)
  1418: i                    ( 1 -     53)
  1419: <                    ( 1 -     53)
  1420: (                    ( 1 -     53)
  1421: 4                    ( 1 -     53)
  1422: )                    ( 1 -     53)
  1423: ;                    ( 1 -     53)
  1424: ++                   ( 1 -     53)
  1425: i                    ( 1 -     53)
  1426: )                    ( 1 -     53)
  1427: {                    ( 1 -     54)
  1428: color                ( 1 -     55)
  1429: +=                   ( 1 -     55)
  1430: trans                ( 1 -     55)
  1431: *                    ( 1 -     55)
  1432: UnpackRGB            ( 1 -     55)
  1433: (                    ( 1 -     55)
  1434: nodeArray            ( 1 -     55)
  1435: [                    ( 1 -     55)
  1436: i                    ( 1 -     55)
  1437: ]                    ( 1 -     55)
  1438: .                    ( 1 -     55)
  1439: color                ( 1 -     55)
  1440: )                    ( 1 -     55)
  1441: ;                    ( 1 -     55)
  1442: trans                ( 1 -     56)
  1443: =                    ( 1 -     56)
  1444: nodeArray            ( 1 -     56)
  1445: [                    ( 1 -     56)
  1446: i                    ( 1 -     56)
  1447: ]                    ( 1 -     56)
  1448: .                    ( 1 -     56)
  1449: trans                ( 1 -     56)
  1450: /                    ( 1 -     56)
  1451: 255                  ( 1 -     56)
  1452: ;                    ( 1 -     56)
  1453: }                    ( 1 -     57)
  1454: outColor             ( 1 -     59)
  1455: =                    ( 1 -     59)
  1456: float4               ( 1 -     59)
  1457: (                    ( 1 -     59)
  1458: color                ( 1 -     59)
  1459: ,                    ( 1 -     59)
  1460: nodeArray            ( 1 -     59)
  1461: [                    ( 1 -     59)
  1462: (                    ( 1 -     59)
  1463: 4                    ( 1 -     59)
  1464: )                    ( 1 -     59)
  1465: -                    ( 1 -     59)
  1466: 1                    ( 1 -     59)
  1467: ]                    ( 1 -     59)
  1468: .                    ( 1 -     59)
  1469: trans                ( 1 -     59)
  1470: /                    ( 1 -     59)
  1471: 255                  ( 1 -     59)
  1472: )                    ( 1 -     59)
  1473: ;                    ( 1 -     59)
  1474: }                    ( 1 -     60)
  1475: return               ( 1 -     63)
  1476: outColor             ( 1 -     63)
  1477: ;                    ( 1 -     63)
  1478: }                    ( 1 -     64)
  1479: <eof>                ( 1 -     65)

 0: AOIT.h
 1: C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/AdaptiveOITComposite.frag

