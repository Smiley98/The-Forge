#line 1 "C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/25_AdditiveBlending/Shaders/D3D12/basic.vert"
#line 30 "C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/25_AdditiveBlending/Shaders/D3D12/basic.vert"
cbuffer uniformBlock : register(b0,  space3 )
{
	float4x4 mvp;

    float4 color[ 815 ];

    float4 lightPosition;
    float4 lightColor;

	float4x4 toWorld[ 815 ];
};

struct VSInput
{
    float4 Position : POSITION;
    float4 Normal : NORMAL;
};

struct VSOutput {
	float4 Position : SV_POSITION;
    float4 Color : COLOR;
};

VSOutput main(VSInput input, uint InstanceID : SV_InstanceID)
{
    VSOutput result;
    float4x4 tempMat = mul(mvp, toWorld[InstanceID]);
    result.Position = mul(tempMat, input.Position);

    float4 normal = normalize(mul(toWorld[InstanceID], float4(input.Normal.xyz, 0.0f)));
    float4 pos = mul(toWorld[InstanceID], float4(input.Position.xyz, 1.0f));

    float lightIntensity = 1.0f;
    float quadraticCoeff = 1.2;
    float ambientCoeff = 0.4;

    float3 lightDir = normalize(lightPosition.xyz - pos.xyz);

    float distance = length(lightDir);
    float attenuation = 1.0 / (quadraticCoeff * distance * distance);
    float intensity = lightIntensity * attenuation;

    float3 baseColor = color[InstanceID].xyz;
    float3 blendedColor = mul(lightColor.xyz * baseColor, lightIntensity);
    float3 diffuse = mul(blendedColor, max(dot(normal.xyz, lightDir), 0.0));
    float3 ambient = mul(baseColor, ambientCoeff);
    result.Color = float4(diffuse + ambient, 1.0);

    return result;
}
