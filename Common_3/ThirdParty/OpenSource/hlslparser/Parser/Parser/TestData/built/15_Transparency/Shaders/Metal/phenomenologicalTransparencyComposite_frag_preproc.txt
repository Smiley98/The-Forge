#line 1 "C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/phenomenologicalTransparencyComposite.frag"
#line 25 "C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/phenomenologicalTransparencyComposite.frag"
struct VSOutput
{
	float4 Position : SV_POSITION;
	float4 UV : TEXCOORD0;
};

SamplerState PointSampler : register(s0);
SamplerState LinearSampler : register(s1);
Texture2D AccumulationTexture : register(t0);
Texture2D ModulationTexture : register(t1);
Texture2D BackgroundTexture : register(t2);
#line 40 "C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/phenomenologicalTransparencyComposite.frag"
float MaxComponent(float3 v)
{
	return max(max(v.x, v.y), v.z);
}

float MinComponent(float3 v)
{
	return min(min(v.x, v.y), v.z);
}

float4 main(VSOutput input) : SV_Target
{
	float4 modulationAndDiffusion = ModulationTexture.Sample(PointSampler, input.UV.xy);
	float3 modulation = modulationAndDiffusion.rgb;

	if (MinComponent(modulation) == 1.0f)
		return BackgroundTexture.Sample(PointSampler, input.UV.xy);

	float4 accumulation = AccumulationTexture.Sample(PointSampler, input.UV.xy);


	if (isinf(accumulation.a))
		accumulation.a = MaxComponent(accumulation.xyz);
	if (isinf(MaxComponent(accumulation.xyz)))
		accumulation = 1.0f;


	const float epsilon = 0.001f;
	accumulation.rgb *= 0.5f + max(modulation, epsilon) / (2.0f * max(epsilon, MaxComponent(modulation)));




	float2 delta = 0.0f;


	float3 background = 0.0f;
#line 104 "C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/phenomenologicalTransparencyComposite.frag"
	background = BackgroundTexture.SampleLevel(PointSampler, input.UV.xy, 0.0f).rgb;
#line 110 "C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/phenomenologicalTransparencyComposite.frag"
	return float4(background * modulation + (1.0f - modulation) * accumulation.rgb / max(accumulation.a, 0.00001f), 1.0f);
}
