     0: cbuffer              ( 0 -     27)
     1: cbExtendCamera       ( 0 -     27)
     2: :                    ( 0 -     27)
     3: register             ( 0 -     27)
     4: (                    ( 0 -     27)
     5: b0                   ( 0 -     27)
     6: ,                    ( 0 -     27)
     7: space1               ( 0 -     27)
     8: )                    ( 0 -     27)
     9: {                    ( 0 -     28)
    10: float4x4             ( 0 -     29)
    11: viewMat              ( 0 -     29)
    12: ;                    ( 0 -     29)
    13: float4x4             ( 0 -     30)
    14: projMat              ( 0 -     30)
    15: ;                    ( 0 -     30)
    16: float4x4             ( 0 -     31)
    17: viewProjMat          ( 0 -     31)
    18: ;                    ( 0 -     31)
    19: float4x4             ( 0 -     32)
    20: InvViewProjMat       ( 0 -     32)
    21: ;                    ( 0 -     32)
    22: float4               ( 0 -     34)
    23: cameraWorldPos       ( 0 -     34)
    24: ;                    ( 0 -     34)
    25: float4               ( 0 -     35)
    26: viewPortSize         ( 0 -     35)
    27: ;                    ( 0 -     35)
    28: }                    ( 0 -     36)
    29: Texture2D            ( 0 -     38)
    30: SceneTexture         ( 0 -     38)
    31: :                    ( 0 -     38)
    32: register             ( 0 -     38)
    33: (                    ( 0 -     38)
    34: t1                   ( 0 -     38)
    35: )                    ( 0 -     38)
    36: ;                    ( 0 -     38)
    37: Texture2D            ( 0 -     39)
    38: SSRTexture           ( 0 -     39)
    39: :                    ( 0 -     39)
    40: register             ( 0 -     39)
    41: (                    ( 0 -     39)
    42: t2                   ( 0 -     39)
    43: )                    ( 0 -     39)
    44: ;                    ( 0 -     39)
    45: cbuffer              ( 0 -     42)
    46: cbProperties         ( 0 -     42)
    47: :                    ( 0 -     42)
    48: register             ( 0 -     42)
    49: (                    ( 0 -     42)
    50: b3                   ( 0 -     42)
    51: ,                    ( 0 -     42)
    52: space1               ( 0 -     42)
    53: )                    ( 0 -     42)
    54: {                    ( 0 -     43)
    55: uint                 ( 0 -     44)
    56: renderMode           ( 0 -     44)
    57: ;                    ( 0 -     44)
    58: float                ( 0 -     45)
    59: useHolePatching      ( 0 -     45)
    60: ;                    ( 0 -     45)
    61: float                ( 0 -     46)
    62: useExpensiveHolePatching ( 0 -     46)
    63: ;                    ( 0 -     46)
    64: float                ( 0 -     47)
    65: useNormalMap         ( 0 -     47)
    66: ;                    ( 0 -     47)
    67: float                ( 0 -     49)
    68: intensity            ( 0 -     49)
    69: ;                    ( 0 -     49)
    70: float                ( 0 -     50)
    71: useFadeEffect        ( 0 -     50)
    72: ;                    ( 0 -     50)
    73: float                ( 0 -     51)
    74: padding01            ( 0 -     51)
    75: ;                    ( 0 -     51)
    76: float                ( 0 -     52)
    77: padding02            ( 0 -     52)
    78: ;                    ( 0 -     52)
    79: }                    ( 0 -     53)
    80: SamplerState         ( 0 -     55)
    81: nearestSampler       ( 0 -     55)
    82: :                    ( 0 -     55)
    83: register             ( 0 -     55)
    84: (                    ( 0 -     55)
    85: s4                   ( 0 -     55)
    86: )                    ( 0 -     55)
    87: ;                    ( 0 -     55)
    88: SamplerState         ( 0 -     56)
    89: bilinearSampler      ( 0 -     56)
    90: :                    ( 0 -     56)
    91: register             ( 0 -     56)
    92: (                    ( 0 -     56)
    93: s5                   ( 0 -     56)
    94: )                    ( 0 -     56)
    95: ;                    ( 0 -     56)
    96: struct               ( 0 -     59)
    97: VSOutput             ( 0 -     59)
    98: {                    ( 0 -     60)
    99: float4               ( 0 -     61)
   100: Position             ( 0 -     61)
   101: :                    ( 0 -     61)
   102: SV_POSITION          ( 0 -     61)
   103: ;                    ( 0 -     61)
   104: float2               ( 0 -     62)
   105: uv                   ( 0 -     62)
   106: :                    ( 0 -     62)
   107: TEXCOORD0            ( 0 -     62)
   108: ;                    ( 0 -     62)
   109: }                    ( 0 -     63)
   110: ;                    ( 0 -     63)
   111: float4               ( 0 -     65)
   112: main                 ( 0 -     65)
   113: (                    ( 0 -     65)
   114: VSOutput             ( 0 -     65)
   115: input                ( 0 -     65)
   116: )                    ( 0 -     65)
   117: :                    ( 0 -     65)
   118: SV_TARGET            ( 0 -     65)
   119: {                    ( 0 -     66)
   120: float4               ( 0 -     67)
   121: outColor             ( 0 -     67)
   122: ;                    ( 0 -     67)
   123: float4               ( 0 -     68)
   124: ssrColor             ( 0 -     68)
   125: =                    ( 0 -     68)
   126: SSRTexture           ( 0 -     68)
   127: .                    ( 0 -     68)
   128: Sample               ( 0 -     68)
   129: (                    ( 0 -     68)
   130: nearestSampler       ( 0 -     68)
   131: ,                    ( 0 -     68)
   132: input                ( 0 -     68)
   133: .                    ( 0 -     68)
   134: uv                   ( 0 -     68)
   135: )                    ( 0 -     68)
   136: ;                    ( 0 -     68)
   137: if                   ( 0 -     70)
   138: (                    ( 0 -     70)
   139: renderMode           ( 0 -     70)
   140: unknown              ( 0 -     70)
   141: 0                    ( 0 -     70)
   142: )                    ( 0 -     70)
   143: {                    ( 0 -     71)
   144: return               ( 0 -     72)
   145: SceneTexture         ( 0 -     72)
   146: .                    ( 0 -     72)
   147: Sample               ( 0 -     72)
   148: (                    ( 0 -     72)
   149: bilinearSampler      ( 0 -     72)
   150: ,                    ( 0 -     72)
   151: input                ( 0 -     72)
   152: .                    ( 0 -     72)
   153: uv                   ( 0 -     72)
   154: )                    ( 0 -     72)
   155: ;                    ( 0 -     72)
   156: }                    ( 0 -     73)
   157: else if              ( 0 -     74)
   158: (                    ( 0 -     74)
   159: renderMode           ( 0 -     74)
   160: unknown              ( 0 -     74)
   161: 1                    ( 0 -     74)
   162: )                    ( 0 -     74)
   163: {                    ( 0 -     75)
   164: outColor             ( 0 -     76)
   165: =                    ( 0 -     76)
   166: float4               ( 0 -     76)
   167: (                    ( 0 -     76)
   168: 0.000000             ( 0 -     76)
   169: ,                    ( 0 -     76)
   170: 0.000000             ( 0 -     76)
   171: ,                    ( 0 -     76)
   172: 0.000000             ( 0 -     76)
   173: ,                    ( 0 -     76)
   174: 0.000000             ( 0 -     76)
   175: )                    ( 0 -     76)
   176: ;                    ( 0 -     76)
   177: }                    ( 0 -     77)
   178: if                   ( 0 -     79)
   179: (                    ( 0 -     79)
   180: useHolePatching      ( 0 -     79)
   181: <                    ( 0 -     79)
   182: 0.500000             ( 0 -     79)
   183: )                    ( 0 -     79)
   184: {                    ( 0 -     80)
   185: outColor             ( 0 -     81)
   186: .                    ( 0 -     81)
   187: w                    ( 0 -     81)
   188: =                    ( 0 -     81)
   189: 1.000000             ( 0 -     81)
   190: ;                    ( 0 -     81)
   191: if                   ( 0 -     83)
   192: (                    ( 0 -     83)
   193: ssrColor             ( 0 -     83)
   194: .                    ( 0 -     83)
   195: w                    ( 0 -     83)
   196: >                    ( 0 -     83)
   197: 0.000000             ( 0 -     83)
   198: )                    ( 0 -     83)
   199: {                    ( 0 -     84)
   200: outColor             ( 0 -     85)
   201: =                    ( 0 -     85)
   202: ssrColor             ( 0 -     85)
   203: ;                    ( 0 -     85)
   204: }                    ( 0 -     86)
   205: }                    ( 0 -     87)
   206: else if              ( 0 -     88)
   207: (                    ( 0 -     88)
   208: ssrColor             ( 0 -     88)
   209: .                    ( 0 -     88)
   210: w                    ( 0 -     88)
   211: >                    ( 0 -     88)
   212: 0.000000             ( 0 -     88)
   213: )                    ( 0 -     88)
   214: {                    ( 0 -     89)
   215: float                ( 0 -     90)
   216: threshold            ( 0 -     90)
   217: =                    ( 0 -     90)
   218: ssrColor             ( 0 -     90)
   219: .                    ( 0 -     90)
   220: w                    ( 0 -     90)
   221: ;                    ( 0 -     90)
   222: float                ( 0 -     91)
   223: minOffset            ( 0 -     91)
   224: =                    ( 0 -     91)
   225: threshold            ( 0 -     91)
   226: ;                    ( 0 -     91)
   227: float4               ( 0 -     94)
   228: neighborColor00      ( 0 -     94)
   229: =                    ( 0 -     94)
   230: SSRTexture           ( 0 -     94)
   231: .                    ( 0 -     94)
   232: Sample               ( 0 -     94)
   233: (                    ( 0 -     94)
   234: nearestSampler       ( 0 -     94)
   235: ,                    ( 0 -     94)
   236: input                ( 0 -     94)
   237: .                    ( 0 -     94)
   238: uv                   ( 0 -     94)
   239: +                    ( 0 -     94)
   240: float2               ( 0 -     94)
   241: (                    ( 0 -     94)
   242: 1.000000             ( 0 -     94)
   243: /                    ( 0 -     94)
   244: viewPortSize         ( 0 -     94)
   245: .                    ( 0 -     94)
   246: x                    ( 0 -     94)
   247: ,                    ( 0 -     94)
   248: 0.000000             ( 0 -     94)
   249: )                    ( 0 -     94)
   250: )                    ( 0 -     94)
   251: ;                    ( 0 -     94)
   252: float4               ( 0 -     95)
   253: neighborColorB00     ( 0 -     95)
   254: =                    ( 0 -     95)
   255: SSRTexture           ( 0 -     95)
   256: .                    ( 0 -     95)
   257: Sample               ( 0 -     95)
   258: (                    ( 0 -     95)
   259: bilinearSampler      ( 0 -     95)
   260: ,                    ( 0 -     95)
   261: input                ( 0 -     95)
   262: .                    ( 0 -     95)
   263: uv                   ( 0 -     95)
   264: +                    ( 0 -     95)
   265: float2               ( 0 -     95)
   266: (                    ( 0 -     95)
   267: 1.000000             ( 0 -     95)
   268: /                    ( 0 -     95)
   269: viewPortSize         ( 0 -     95)
   270: .                    ( 0 -     95)
   271: x                    ( 0 -     95)
   272: ,                    ( 0 -     95)
   273: 0.000000             ( 0 -     95)
   274: )                    ( 0 -     95)
   275: )                    ( 0 -     95)
   276: ;                    ( 0 -     95)
   277: if                   ( 0 -     96)
   278: (                    ( 0 -     96)
   279: neighborColor00      ( 0 -     96)
   280: .                    ( 0 -     96)
   281: w                    ( 0 -     96)
   282: >                    ( 0 -     96)
   283: 0.000000             ( 0 -     96)
   284: )                    ( 0 -     96)
   285: {                    ( 0 -     97)
   286: minOffset            ( 0 -     98)
   287: =                    ( 0 -     98)
   288: min                  ( 0 -     98)
   289: (                    ( 0 -     98)
   290: minOffset            ( 0 -     98)
   291: ,                    ( 0 -     98)
   292: neighborColor00      ( 0 -     98)
   293: .                    ( 0 -     98)
   294: w                    ( 0 -     98)
   295: )                    ( 0 -     98)
   296: ;                    ( 0 -     98)
   297: }                    ( 0 -     99)
   298: float4               ( 0 -    101)
   299: neighborColor01      ( 0 -    101)
   300: =                    ( 0 -    101)
   301: SSRTexture           ( 0 -    101)
   302: .                    ( 0 -    101)
   303: Sample               ( 0 -    101)
   304: (                    ( 0 -    101)
   305: nearestSampler       ( 0 -    101)
   306: ,                    ( 0 -    101)
   307: input                ( 0 -    101)
   308: .                    ( 0 -    101)
   309: uv                   ( 0 -    101)
   310: -                    ( 0 -    101)
   311: float2               ( 0 -    101)
   312: (                    ( 0 -    101)
   313: 1.000000             ( 0 -    101)
   314: /                    ( 0 -    101)
   315: viewPortSize         ( 0 -    101)
   316: .                    ( 0 -    101)
   317: x                    ( 0 -    101)
   318: ,                    ( 0 -    101)
   319: 0.000000             ( 0 -    101)
   320: )                    ( 0 -    101)
   321: )                    ( 0 -    101)
   322: ;                    ( 0 -    101)
   323: float4               ( 0 -    102)
   324: neighborColorB01     ( 0 -    102)
   325: =                    ( 0 -    102)
   326: SSRTexture           ( 0 -    102)
   327: .                    ( 0 -    102)
   328: Sample               ( 0 -    102)
   329: (                    ( 0 -    102)
   330: bilinearSampler      ( 0 -    102)
   331: ,                    ( 0 -    102)
   332: input                ( 0 -    102)
   333: .                    ( 0 -    102)
   334: uv                   ( 0 -    102)
   335: -                    ( 0 -    102)
   336: float2               ( 0 -    102)
   337: (                    ( 0 -    102)
   338: 1.000000             ( 0 -    102)
   339: /                    ( 0 -    102)
   340: viewPortSize         ( 0 -    102)
   341: .                    ( 0 -    102)
   342: x                    ( 0 -    102)
   343: ,                    ( 0 -    102)
   344: 0.000000             ( 0 -    102)
   345: )                    ( 0 -    102)
   346: )                    ( 0 -    102)
   347: ;                    ( 0 -    102)
   348: if                   ( 0 -    103)
   349: (                    ( 0 -    103)
   350: neighborColor01      ( 0 -    103)
   351: .                    ( 0 -    103)
   352: w                    ( 0 -    103)
   353: >                    ( 0 -    103)
   354: 0.000000             ( 0 -    103)
   355: )                    ( 0 -    103)
   356: {                    ( 0 -    104)
   357: minOffset            ( 0 -    105)
   358: =                    ( 0 -    105)
   359: min                  ( 0 -    105)
   360: (                    ( 0 -    105)
   361: minOffset            ( 0 -    105)
   362: ,                    ( 0 -    105)
   363: neighborColor01      ( 0 -    105)
   364: .                    ( 0 -    105)
   365: w                    ( 0 -    105)
   366: )                    ( 0 -    105)
   367: ;                    ( 0 -    105)
   368: }                    ( 0 -    106)
   369: float4               ( 0 -    108)
   370: neighborColor02      ( 0 -    108)
   371: =                    ( 0 -    108)
   372: SSRTexture           ( 0 -    108)
   373: .                    ( 0 -    108)
   374: Sample               ( 0 -    108)
   375: (                    ( 0 -    108)
   376: nearestSampler       ( 0 -    108)
   377: ,                    ( 0 -    108)
   378: input                ( 0 -    108)
   379: .                    ( 0 -    108)
   380: uv                   ( 0 -    108)
   381: +                    ( 0 -    108)
   382: float2               ( 0 -    108)
   383: (                    ( 0 -    108)
   384: 0.000000             ( 0 -    108)
   385: ,                    ( 0 -    108)
   386: 1.000000             ( 0 -    108)
   387: /                    ( 0 -    108)
   388: viewPortSize         ( 0 -    108)
   389: .                    ( 0 -    108)
   390: y                    ( 0 -    108)
   391: )                    ( 0 -    108)
   392: )                    ( 0 -    108)
   393: ;                    ( 0 -    108)
   394: float4               ( 0 -    109)
   395: neighborColorB02     ( 0 -    109)
   396: =                    ( 0 -    109)
   397: SSRTexture           ( 0 -    109)
   398: .                    ( 0 -    109)
   399: Sample               ( 0 -    109)
   400: (                    ( 0 -    109)
   401: bilinearSampler      ( 0 -    109)
   402: ,                    ( 0 -    109)
   403: input                ( 0 -    109)
   404: .                    ( 0 -    109)
   405: uv                   ( 0 -    109)
   406: +                    ( 0 -    109)
   407: float2               ( 0 -    109)
   408: (                    ( 0 -    109)
   409: 0.000000             ( 0 -    109)
   410: ,                    ( 0 -    109)
   411: 1.000000             ( 0 -    109)
   412: /                    ( 0 -    109)
   413: viewPortSize         ( 0 -    109)
   414: .                    ( 0 -    109)
   415: y                    ( 0 -    109)
   416: )                    ( 0 -    109)
   417: )                    ( 0 -    109)
   418: ;                    ( 0 -    109)
   419: if                   ( 0 -    110)
   420: (                    ( 0 -    110)
   421: neighborColor02      ( 0 -    110)
   422: .                    ( 0 -    110)
   423: w                    ( 0 -    110)
   424: >                    ( 0 -    110)
   425: 0.000000             ( 0 -    110)
   426: )                    ( 0 -    110)
   427: {                    ( 0 -    111)
   428: minOffset            ( 0 -    112)
   429: =                    ( 0 -    112)
   430: min                  ( 0 -    112)
   431: (                    ( 0 -    112)
   432: minOffset            ( 0 -    112)
   433: ,                    ( 0 -    112)
   434: neighborColor02      ( 0 -    112)
   435: .                    ( 0 -    112)
   436: w                    ( 0 -    112)
   437: )                    ( 0 -    112)
   438: ;                    ( 0 -    112)
   439: }                    ( 0 -    113)
   440: float4               ( 0 -    115)
   441: neighborColor03      ( 0 -    115)
   442: =                    ( 0 -    115)
   443: SSRTexture           ( 0 -    115)
   444: .                    ( 0 -    115)
   445: Sample               ( 0 -    115)
   446: (                    ( 0 -    115)
   447: nearestSampler       ( 0 -    115)
   448: ,                    ( 0 -    115)
   449: input                ( 0 -    115)
   450: .                    ( 0 -    115)
   451: uv                   ( 0 -    115)
   452: -                    ( 0 -    115)
   453: float2               ( 0 -    115)
   454: (                    ( 0 -    115)
   455: 0.000000             ( 0 -    115)
   456: ,                    ( 0 -    115)
   457: 1.000000             ( 0 -    115)
   458: /                    ( 0 -    115)
   459: viewPortSize         ( 0 -    115)
   460: .                    ( 0 -    115)
   461: y                    ( 0 -    115)
   462: )                    ( 0 -    115)
   463: )                    ( 0 -    115)
   464: ;                    ( 0 -    115)
   465: float4               ( 0 -    116)
   466: neighborColorB03     ( 0 -    116)
   467: =                    ( 0 -    116)
   468: SSRTexture           ( 0 -    116)
   469: .                    ( 0 -    116)
   470: Sample               ( 0 -    116)
   471: (                    ( 0 -    116)
   472: bilinearSampler      ( 0 -    116)
   473: ,                    ( 0 -    116)
   474: input                ( 0 -    116)
   475: .                    ( 0 -    116)
   476: uv                   ( 0 -    116)
   477: -                    ( 0 -    116)
   478: float2               ( 0 -    116)
   479: (                    ( 0 -    116)
   480: 0.000000             ( 0 -    116)
   481: ,                    ( 0 -    116)
   482: 1.000000             ( 0 -    116)
   483: /                    ( 0 -    116)
   484: viewPortSize         ( 0 -    116)
   485: .                    ( 0 -    116)
   486: y                    ( 0 -    116)
   487: )                    ( 0 -    116)
   488: )                    ( 0 -    116)
   489: ;                    ( 0 -    116)
   490: if                   ( 0 -    117)
   491: (                    ( 0 -    117)
   492: neighborColor03      ( 0 -    117)
   493: .                    ( 0 -    117)
   494: w                    ( 0 -    117)
   495: >                    ( 0 -    117)
   496: 0.000000             ( 0 -    117)
   497: )                    ( 0 -    117)
   498: {                    ( 0 -    118)
   499: minOffset            ( 0 -    119)
   500: =                    ( 0 -    119)
   501: min                  ( 0 -    119)
   502: (                    ( 0 -    119)
   503: minOffset            ( 0 -    119)
   504: ,                    ( 0 -    119)
   505: neighborColor03      ( 0 -    119)
   506: .                    ( 0 -    119)
   507: w                    ( 0 -    119)
   508: )                    ( 0 -    119)
   509: ;                    ( 0 -    119)
   510: }                    ( 0 -    120)
   511: float4               ( 0 -    122)
   512: neighborColor04      ( 0 -    122)
   513: =                    ( 0 -    122)
   514: SSRTexture           ( 0 -    122)
   515: .                    ( 0 -    122)
   516: Sample               ( 0 -    122)
   517: (                    ( 0 -    122)
   518: nearestSampler       ( 0 -    122)
   519: ,                    ( 0 -    122)
   520: input                ( 0 -    122)
   521: .                    ( 0 -    122)
   522: uv                   ( 0 -    122)
   523: +                    ( 0 -    122)
   524: float2               ( 0 -    122)
   525: (                    ( 0 -    122)
   526: 1.000000             ( 0 -    122)
   527: /                    ( 0 -    122)
   528: viewPortSize         ( 0 -    122)
   529: .                    ( 0 -    122)
   530: x                    ( 0 -    122)
   531: ,                    ( 0 -    122)
   532: 1.000000             ( 0 -    122)
   533: /                    ( 0 -    122)
   534: viewPortSize         ( 0 -    122)
   535: .                    ( 0 -    122)
   536: y                    ( 0 -    122)
   537: )                    ( 0 -    122)
   538: )                    ( 0 -    122)
   539: ;                    ( 0 -    122)
   540: float4               ( 0 -    123)
   541: neighborColorB04     ( 0 -    123)
   542: =                    ( 0 -    123)
   543: SSRTexture           ( 0 -    123)
   544: .                    ( 0 -    123)
   545: Sample               ( 0 -    123)
   546: (                    ( 0 -    123)
   547: bilinearSampler      ( 0 -    123)
   548: ,                    ( 0 -    123)
   549: input                ( 0 -    123)
   550: .                    ( 0 -    123)
   551: uv                   ( 0 -    123)
   552: +                    ( 0 -    123)
   553: float2               ( 0 -    123)
   554: (                    ( 0 -    123)
   555: 1.000000             ( 0 -    123)
   556: /                    ( 0 -    123)
   557: viewPortSize         ( 0 -    123)
   558: .                    ( 0 -    123)
   559: x                    ( 0 -    123)
   560: ,                    ( 0 -    123)
   561: 1.000000             ( 0 -    123)
   562: /                    ( 0 -    123)
   563: viewPortSize         ( 0 -    123)
   564: .                    ( 0 -    123)
   565: y                    ( 0 -    123)
   566: )                    ( 0 -    123)
   567: )                    ( 0 -    123)
   568: ;                    ( 0 -    123)
   569: float4               ( 0 -    126)
   570: neighborColor05      ( 0 -    126)
   571: =                    ( 0 -    126)
   572: SSRTexture           ( 0 -    126)
   573: .                    ( 0 -    126)
   574: Sample               ( 0 -    126)
   575: (                    ( 0 -    126)
   576: nearestSampler       ( 0 -    126)
   577: ,                    ( 0 -    126)
   578: input                ( 0 -    126)
   579: .                    ( 0 -    126)
   580: uv                   ( 0 -    126)
   581: +                    ( 0 -    126)
   582: float2               ( 0 -    126)
   583: (                    ( 0 -    126)
   584: 1.000000             ( 0 -    126)
   585: /                    ( 0 -    126)
   586: viewPortSize         ( 0 -    126)
   587: .                    ( 0 -    126)
   588: x                    ( 0 -    126)
   589: ,                    ( 0 -    126)
   590: -                    ( 0 -    126)
   591: 1.000000             ( 0 -    126)
   592: /                    ( 0 -    126)
   593: viewPortSize         ( 0 -    126)
   594: .                    ( 0 -    126)
   595: y                    ( 0 -    126)
   596: )                    ( 0 -    126)
   597: )                    ( 0 -    126)
   598: ;                    ( 0 -    126)
   599: float4               ( 0 -    127)
   600: neighborColorB05     ( 0 -    127)
   601: =                    ( 0 -    127)
   602: SSRTexture           ( 0 -    127)
   603: .                    ( 0 -    127)
   604: Sample               ( 0 -    127)
   605: (                    ( 0 -    127)
   606: bilinearSampler      ( 0 -    127)
   607: ,                    ( 0 -    127)
   608: input                ( 0 -    127)
   609: .                    ( 0 -    127)
   610: uv                   ( 0 -    127)
   611: +                    ( 0 -    127)
   612: float2               ( 0 -    127)
   613: (                    ( 0 -    127)
   614: 1.000000             ( 0 -    127)
   615: /                    ( 0 -    127)
   616: viewPortSize         ( 0 -    127)
   617: .                    ( 0 -    127)
   618: x                    ( 0 -    127)
   619: ,                    ( 0 -    127)
   620: -                    ( 0 -    127)
   621: 1.000000             ( 0 -    127)
   622: /                    ( 0 -    127)
   623: viewPortSize         ( 0 -    127)
   624: .                    ( 0 -    127)
   625: y                    ( 0 -    127)
   626: )                    ( 0 -    127)
   627: )                    ( 0 -    127)
   628: ;                    ( 0 -    127)
   629: float4               ( 0 -    130)
   630: neighborColor06      ( 0 -    130)
   631: =                    ( 0 -    130)
   632: SSRTexture           ( 0 -    130)
   633: .                    ( 0 -    130)
   634: Sample               ( 0 -    130)
   635: (                    ( 0 -    130)
   636: nearestSampler       ( 0 -    130)
   637: ,                    ( 0 -    130)
   638: input                ( 0 -    130)
   639: .                    ( 0 -    130)
   640: uv                   ( 0 -    130)
   641: +                    ( 0 -    130)
   642: float2               ( 0 -    130)
   643: (                    ( 0 -    130)
   644: -                    ( 0 -    130)
   645: 1.000000             ( 0 -    130)
   646: /                    ( 0 -    130)
   647: viewPortSize         ( 0 -    130)
   648: .                    ( 0 -    130)
   649: x                    ( 0 -    130)
   650: ,                    ( 0 -    130)
   651: 1.000000             ( 0 -    130)
   652: /                    ( 0 -    130)
   653: viewPortSize         ( 0 -    130)
   654: .                    ( 0 -    130)
   655: y                    ( 0 -    130)
   656: )                    ( 0 -    130)
   657: )                    ( 0 -    130)
   658: ;                    ( 0 -    130)
   659: float4               ( 0 -    131)
   660: neighborColorB06     ( 0 -    131)
   661: =                    ( 0 -    131)
   662: SSRTexture           ( 0 -    131)
   663: .                    ( 0 -    131)
   664: Sample               ( 0 -    131)
   665: (                    ( 0 -    131)
   666: bilinearSampler      ( 0 -    131)
   667: ,                    ( 0 -    131)
   668: input                ( 0 -    131)
   669: .                    ( 0 -    131)
   670: uv                   ( 0 -    131)
   671: +                    ( 0 -    131)
   672: float2               ( 0 -    131)
   673: (                    ( 0 -    131)
   674: -                    ( 0 -    131)
   675: 1.000000             ( 0 -    131)
   676: /                    ( 0 -    131)
   677: viewPortSize         ( 0 -    131)
   678: .                    ( 0 -    131)
   679: x                    ( 0 -    131)
   680: ,                    ( 0 -    131)
   681: 1.000000             ( 0 -    131)
   682: /                    ( 0 -    131)
   683: viewPortSize         ( 0 -    131)
   684: .                    ( 0 -    131)
   685: y                    ( 0 -    131)
   686: )                    ( 0 -    131)
   687: )                    ( 0 -    131)
   688: ;                    ( 0 -    131)
   689: float4               ( 0 -    134)
   690: neighborColor07      ( 0 -    134)
   691: =                    ( 0 -    134)
   692: SSRTexture           ( 0 -    134)
   693: .                    ( 0 -    134)
   694: Sample               ( 0 -    134)
   695: (                    ( 0 -    134)
   696: nearestSampler       ( 0 -    134)
   697: ,                    ( 0 -    134)
   698: input                ( 0 -    134)
   699: .                    ( 0 -    134)
   700: uv                   ( 0 -    134)
   701: -                    ( 0 -    134)
   702: float2               ( 0 -    134)
   703: (                    ( 0 -    134)
   704: 1.000000             ( 0 -    134)
   705: /                    ( 0 -    134)
   706: viewPortSize         ( 0 -    134)
   707: .                    ( 0 -    134)
   708: x                    ( 0 -    134)
   709: ,                    ( 0 -    134)
   710: 1.000000             ( 0 -    134)
   711: /                    ( 0 -    134)
   712: viewPortSize         ( 0 -    134)
   713: .                    ( 0 -    134)
   714: y                    ( 0 -    134)
   715: )                    ( 0 -    134)
   716: )                    ( 0 -    134)
   717: ;                    ( 0 -    134)
   718: float4               ( 0 -    135)
   719: neighborColorB07     ( 0 -    135)
   720: =                    ( 0 -    135)
   721: SSRTexture           ( 0 -    135)
   722: .                    ( 0 -    135)
   723: Sample               ( 0 -    135)
   724: (                    ( 0 -    135)
   725: bilinearSampler      ( 0 -    135)
   726: ,                    ( 0 -    135)
   727: input                ( 0 -    135)
   728: .                    ( 0 -    135)
   729: uv                   ( 0 -    135)
   730: -                    ( 0 -    135)
   731: float2               ( 0 -    135)
   732: (                    ( 0 -    135)
   733: 1.000000             ( 0 -    135)
   734: /                    ( 0 -    135)
   735: viewPortSize         ( 0 -    135)
   736: .                    ( 0 -    135)
   737: x                    ( 0 -    135)
   738: ,                    ( 0 -    135)
   739: 1.000000             ( 0 -    135)
   740: /                    ( 0 -    135)
   741: viewPortSize         ( 0 -    135)
   742: .                    ( 0 -    135)
   743: y                    ( 0 -    135)
   744: )                    ( 0 -    135)
   745: )                    ( 0 -    135)
   746: ;                    ( 0 -    135)
   747: bool                 ( 0 -    138)
   748: bUseExpensiveHolePatching ( 0 -    138)
   749: =                    ( 0 -    138)
   750: useExpensiveHolePatching ( 0 -    138)
   751: >                    ( 0 -    138)
   752: 0.500000             ( 0 -    138)
   753: ;                    ( 0 -    138)
   754: if                   ( 0 -    140)
   755: (                    ( 0 -    140)
   756: bUseExpensiveHolePatching ( 0 -    140)
   757: )                    ( 0 -    140)
   758: {                    ( 0 -    141)
   759: if                   ( 0 -    143)
   760: (                    ( 0 -    143)
   761: neighborColor04      ( 0 -    143)
   762: .                    ( 0 -    143)
   763: w                    ( 0 -    143)
   764: >                    ( 0 -    143)
   765: 0.000000             ( 0 -    143)
   766: )                    ( 0 -    143)
   767: {                    ( 0 -    144)
   768: minOffset            ( 0 -    145)
   769: =                    ( 0 -    145)
   770: min                  ( 0 -    145)
   771: (                    ( 0 -    145)
   772: minOffset            ( 0 -    145)
   773: ,                    ( 0 -    145)
   774: neighborColor04      ( 0 -    145)
   775: .                    ( 0 -    145)
   776: w                    ( 0 -    145)
   777: )                    ( 0 -    145)
   778: ;                    ( 0 -    145)
   779: }                    ( 0 -    146)
   780: if                   ( 0 -    149)
   781: (                    ( 0 -    149)
   782: neighborColor05      ( 0 -    149)
   783: .                    ( 0 -    149)
   784: w                    ( 0 -    149)
   785: >                    ( 0 -    149)
   786: 0.000000             ( 0 -    149)
   787: )                    ( 0 -    149)
   788: {                    ( 0 -    150)
   789: minOffset            ( 0 -    151)
   790: =                    ( 0 -    151)
   791: min                  ( 0 -    151)
   792: (                    ( 0 -    151)
   793: minOffset            ( 0 -    151)
   794: ,                    ( 0 -    151)
   795: neighborColor05      ( 0 -    151)
   796: .                    ( 0 -    151)
   797: w                    ( 0 -    151)
   798: )                    ( 0 -    151)
   799: ;                    ( 0 -    151)
   800: }                    ( 0 -    152)
   801: if                   ( 0 -    155)
   802: (                    ( 0 -    155)
   803: neighborColor06      ( 0 -    155)
   804: .                    ( 0 -    155)
   805: w                    ( 0 -    155)
   806: >                    ( 0 -    155)
   807: 0.000000             ( 0 -    155)
   808: )                    ( 0 -    155)
   809: {                    ( 0 -    156)
   810: minOffset            ( 0 -    157)
   811: =                    ( 0 -    157)
   812: min                  ( 0 -    157)
   813: (                    ( 0 -    157)
   814: minOffset            ( 0 -    157)
   815: ,                    ( 0 -    157)
   816: neighborColor06      ( 0 -    157)
   817: .                    ( 0 -    157)
   818: w                    ( 0 -    157)
   819: )                    ( 0 -    157)
   820: ;                    ( 0 -    157)
   821: }                    ( 0 -    158)
   822: if                   ( 0 -    161)
   823: (                    ( 0 -    161)
   824: neighborColor07      ( 0 -    161)
   825: .                    ( 0 -    161)
   826: w                    ( 0 -    161)
   827: >                    ( 0 -    161)
   828: 0.000000             ( 0 -    161)
   829: )                    ( 0 -    161)
   830: {                    ( 0 -    162)
   831: minOffset            ( 0 -    163)
   832: =                    ( 0 -    163)
   833: min                  ( 0 -    163)
   834: (                    ( 0 -    163)
   835: minOffset            ( 0 -    163)
   836: ,                    ( 0 -    163)
   837: neighborColor07      ( 0 -    163)
   838: .                    ( 0 -    163)
   839: w                    ( 0 -    163)
   840: )                    ( 0 -    163)
   841: ;                    ( 0 -    163)
   842: }                    ( 0 -    164)
   843: }                    ( 0 -    166)
   844: float                ( 0 -    168)
   845: blendValue           ( 0 -    168)
   846: =                    ( 0 -    168)
   847: 0.500000             ( 0 -    168)
   848: ;                    ( 0 -    168)
   849: if                   ( 0 -    170)
   850: (                    ( 0 -    170)
   851: bUseExpensiveHolePatching ( 0 -    170)
   852: )                    ( 0 -    170)
   853: {                    ( 0 -    171)
   854: if                   ( 0 -    172)
   855: (                    ( 0 -    172)
   856: minOffset            ( 0 -    172)
   857: unknown              ( 0 -    172)
   858: neighborColor00      ( 0 -    172)
   859: .                    ( 0 -    172)
   860: w                    ( 0 -    172)
   861: )                    ( 0 -    172)
   862: {                    ( 0 -    173)
   863: outColor             ( 0 -    174)
   864: =                    ( 0 -    174)
   865: lerp                 ( 0 -    174)
   866: (                    ( 0 -    174)
   867: neighborColor00      ( 0 -    174)
   868: ,                    ( 0 -    174)
   869: neighborColorB00     ( 0 -    174)
   870: ,                    ( 0 -    174)
   871: blendValue           ( 0 -    174)
   872: )                    ( 0 -    174)
   873: ;                    ( 0 -    174)
   874: }                    ( 0 -    175)
   875: else if              ( 0 -    176)
   876: (                    ( 0 -    176)
   877: minOffset            ( 0 -    176)
   878: unknown              ( 0 -    176)
   879: neighborColor01      ( 0 -    176)
   880: .                    ( 0 -    176)
   881: w                    ( 0 -    176)
   882: )                    ( 0 -    176)
   883: {                    ( 0 -    177)
   884: outColor             ( 0 -    178)
   885: =                    ( 0 -    178)
   886: lerp                 ( 0 -    178)
   887: (                    ( 0 -    178)
   888: neighborColor01      ( 0 -    178)
   889: ,                    ( 0 -    178)
   890: neighborColorB01     ( 0 -    178)
   891: ,                    ( 0 -    178)
   892: blendValue           ( 0 -    178)
   893: )                    ( 0 -    178)
   894: ;                    ( 0 -    178)
   895: }                    ( 0 -    179)
   896: else if              ( 0 -    180)
   897: (                    ( 0 -    180)
   898: minOffset            ( 0 -    180)
   899: unknown              ( 0 -    180)
   900: neighborColor02      ( 0 -    180)
   901: .                    ( 0 -    180)
   902: w                    ( 0 -    180)
   903: )                    ( 0 -    180)
   904: {                    ( 0 -    181)
   905: outColor             ( 0 -    182)
   906: =                    ( 0 -    182)
   907: lerp                 ( 0 -    182)
   908: (                    ( 0 -    182)
   909: neighborColor02      ( 0 -    182)
   910: ,                    ( 0 -    182)
   911: neighborColorB02     ( 0 -    182)
   912: ,                    ( 0 -    182)
   913: blendValue           ( 0 -    182)
   914: )                    ( 0 -    182)
   915: ;                    ( 0 -    182)
   916: }                    ( 0 -    183)
   917: else if              ( 0 -    184)
   918: (                    ( 0 -    184)
   919: minOffset            ( 0 -    184)
   920: unknown              ( 0 -    184)
   921: neighborColor03      ( 0 -    184)
   922: .                    ( 0 -    184)
   923: w                    ( 0 -    184)
   924: )                    ( 0 -    184)
   925: {                    ( 0 -    185)
   926: outColor             ( 0 -    186)
   927: =                    ( 0 -    186)
   928: lerp                 ( 0 -    186)
   929: (                    ( 0 -    186)
   930: neighborColor03      ( 0 -    186)
   931: ,                    ( 0 -    186)
   932: neighborColorB03     ( 0 -    186)
   933: ,                    ( 0 -    186)
   934: blendValue           ( 0 -    186)
   935: )                    ( 0 -    186)
   936: ;                    ( 0 -    186)
   937: }                    ( 0 -    187)
   938: else if              ( 0 -    188)
   939: (                    ( 0 -    188)
   940: minOffset            ( 0 -    188)
   941: unknown              ( 0 -    188)
   942: neighborColor04      ( 0 -    188)
   943: .                    ( 0 -    188)
   944: w                    ( 0 -    188)
   945: )                    ( 0 -    188)
   946: {                    ( 0 -    189)
   947: outColor             ( 0 -    190)
   948: =                    ( 0 -    190)
   949: lerp                 ( 0 -    190)
   950: (                    ( 0 -    190)
   951: neighborColor04      ( 0 -    190)
   952: ,                    ( 0 -    190)
   953: neighborColorB04     ( 0 -    190)
   954: ,                    ( 0 -    190)
   955: blendValue           ( 0 -    190)
   956: )                    ( 0 -    190)
   957: ;                    ( 0 -    190)
   958: }                    ( 0 -    191)
   959: else if              ( 0 -    192)
   960: (                    ( 0 -    192)
   961: minOffset            ( 0 -    192)
   962: unknown              ( 0 -    192)
   963: neighborColor05      ( 0 -    192)
   964: .                    ( 0 -    192)
   965: w                    ( 0 -    192)
   966: )                    ( 0 -    192)
   967: {                    ( 0 -    193)
   968: outColor             ( 0 -    194)
   969: =                    ( 0 -    194)
   970: lerp                 ( 0 -    194)
   971: (                    ( 0 -    194)
   972: neighborColor05      ( 0 -    194)
   973: ,                    ( 0 -    194)
   974: neighborColorB05     ( 0 -    194)
   975: ,                    ( 0 -    194)
   976: blendValue           ( 0 -    194)
   977: )                    ( 0 -    194)
   978: ;                    ( 0 -    194)
   979: }                    ( 0 -    195)
   980: else if              ( 0 -    196)
   981: (                    ( 0 -    196)
   982: minOffset            ( 0 -    196)
   983: unknown              ( 0 -    196)
   984: neighborColor06      ( 0 -    196)
   985: .                    ( 0 -    196)
   986: w                    ( 0 -    196)
   987: )                    ( 0 -    196)
   988: {                    ( 0 -    197)
   989: outColor             ( 0 -    198)
   990: =                    ( 0 -    198)
   991: lerp                 ( 0 -    198)
   992: (                    ( 0 -    198)
   993: neighborColor06      ( 0 -    198)
   994: ,                    ( 0 -    198)
   995: neighborColorB06     ( 0 -    198)
   996: ,                    ( 0 -    198)
   997: blendValue           ( 0 -    198)
   998: )                    ( 0 -    198)
   999: ;                    ( 0 -    198)
  1000: }                    ( 0 -    199)
  1001: else if              ( 0 -    200)
  1002: (                    ( 0 -    200)
  1003: minOffset            ( 0 -    200)
  1004: unknown              ( 0 -    200)
  1005: neighborColor07      ( 0 -    200)
  1006: .                    ( 0 -    200)
  1007: w                    ( 0 -    200)
  1008: )                    ( 0 -    200)
  1009: {                    ( 0 -    201)
  1010: outColor             ( 0 -    202)
  1011: =                    ( 0 -    202)
  1012: lerp                 ( 0 -    202)
  1013: (                    ( 0 -    202)
  1014: neighborColor07      ( 0 -    202)
  1015: ,                    ( 0 -    202)
  1016: neighborColorB07     ( 0 -    202)
  1017: ,                    ( 0 -    202)
  1018: blendValue           ( 0 -    202)
  1019: )                    ( 0 -    202)
  1020: ;                    ( 0 -    202)
  1021: }                    ( 0 -    203)
  1022: }                    ( 0 -    204)
  1023: else                 ( 0 -    205)
  1024: {                    ( 0 -    206)
  1025: if                   ( 0 -    207)
  1026: (                    ( 0 -    207)
  1027: minOffset            ( 0 -    207)
  1028: unknown              ( 0 -    207)
  1029: neighborColor00      ( 0 -    207)
  1030: .                    ( 0 -    207)
  1031: w                    ( 0 -    207)
  1032: )                    ( 0 -    207)
  1033: {                    ( 0 -    208)
  1034: outColor             ( 0 -    209)
  1035: =                    ( 0 -    209)
  1036: lerp                 ( 0 -    209)
  1037: (                    ( 0 -    209)
  1038: neighborColor00      ( 0 -    209)
  1039: ,                    ( 0 -    209)
  1040: neighborColorB00     ( 0 -    209)
  1041: ,                    ( 0 -    209)
  1042: blendValue           ( 0 -    209)
  1043: )                    ( 0 -    209)
  1044: ;                    ( 0 -    209)
  1045: }                    ( 0 -    210)
  1046: else if              ( 0 -    211)
  1047: (                    ( 0 -    211)
  1048: minOffset            ( 0 -    211)
  1049: unknown              ( 0 -    211)
  1050: neighborColor01      ( 0 -    211)
  1051: .                    ( 0 -    211)
  1052: w                    ( 0 -    211)
  1053: )                    ( 0 -    211)
  1054: {                    ( 0 -    212)
  1055: outColor             ( 0 -    213)
  1056: =                    ( 0 -    213)
  1057: lerp                 ( 0 -    213)
  1058: (                    ( 0 -    213)
  1059: neighborColor01      ( 0 -    213)
  1060: ,                    ( 0 -    213)
  1061: neighborColorB01     ( 0 -    213)
  1062: ,                    ( 0 -    213)
  1063: blendValue           ( 0 -    213)
  1064: )                    ( 0 -    213)
  1065: ;                    ( 0 -    213)
  1066: }                    ( 0 -    214)
  1067: else if              ( 0 -    215)
  1068: (                    ( 0 -    215)
  1069: minOffset            ( 0 -    215)
  1070: unknown              ( 0 -    215)
  1071: neighborColor02      ( 0 -    215)
  1072: .                    ( 0 -    215)
  1073: w                    ( 0 -    215)
  1074: )                    ( 0 -    215)
  1075: {                    ( 0 -    216)
  1076: outColor             ( 0 -    217)
  1077: =                    ( 0 -    217)
  1078: lerp                 ( 0 -    217)
  1079: (                    ( 0 -    217)
  1080: neighborColor02      ( 0 -    217)
  1081: ,                    ( 0 -    217)
  1082: neighborColorB02     ( 0 -    217)
  1083: ,                    ( 0 -    217)
  1084: blendValue           ( 0 -    217)
  1085: )                    ( 0 -    217)
  1086: ;                    ( 0 -    217)
  1087: }                    ( 0 -    218)
  1088: else if              ( 0 -    219)
  1089: (                    ( 0 -    219)
  1090: minOffset            ( 0 -    219)
  1091: unknown              ( 0 -    219)
  1092: neighborColor03      ( 0 -    219)
  1093: .                    ( 0 -    219)
  1094: w                    ( 0 -    219)
  1095: )                    ( 0 -    219)
  1096: {                    ( 0 -    220)
  1097: outColor             ( 0 -    221)
  1098: =                    ( 0 -    221)
  1099: lerp                 ( 0 -    221)
  1100: (                    ( 0 -    221)
  1101: neighborColor03      ( 0 -    221)
  1102: ,                    ( 0 -    221)
  1103: neighborColorB03     ( 0 -    221)
  1104: ,                    ( 0 -    221)
  1105: blendValue           ( 0 -    221)
  1106: )                    ( 0 -    221)
  1107: ;                    ( 0 -    221)
  1108: }                    ( 0 -    222)
  1109: }                    ( 0 -    223)
  1110: if                   ( 0 -    227)
  1111: (                    ( 0 -    227)
  1112: minOffset            ( 0 -    227)
  1113: unknown              ( 0 -    227)
  1114: threshold            ( 0 -    227)
  1115: )                    ( 0 -    227)
  1116: outColor             ( 0 -    228)
  1117: .                    ( 0 -    228)
  1118: w                    ( 0 -    228)
  1119: =                    ( 0 -    228)
  1120: 1.000000             ( 0 -    228)
  1121: ;                    ( 0 -    228)
  1122: else                 ( 0 -    229)
  1123: outColor             ( 0 -    230)
  1124: .                    ( 0 -    230)
  1125: w                    ( 0 -    230)
  1126: =                    ( 0 -    230)
  1127: 0.000000             ( 0 -    230)
  1128: ;                    ( 0 -    230)
  1129: }                    ( 0 -    233)
  1130: if                   ( 0 -    235)
  1131: (                    ( 0 -    235)
  1132: renderMode           ( 0 -    235)
  1133: unknown              ( 0 -    235)
  1134: 3                    ( 0 -    235)
  1135: )                    ( 0 -    235)
  1136: {                    ( 0 -    236)
  1137: if                   ( 0 -    237)
  1138: (                    ( 0 -    237)
  1139: ssrColor             ( 0 -    237)
  1140: .                    ( 0 -    237)
  1141: w                    ( 0 -    237)
  1142: unknown              ( 0 -    237)
  1143: 0.000000             ( 0 -    237)
  1144: )                    ( 0 -    237)
  1145: outColor             ( 0 -    238)
  1146: =                    ( 0 -    238)
  1147: SceneTexture         ( 0 -    238)
  1148: .                    ( 0 -    238)
  1149: Sample               ( 0 -    238)
  1150: (                    ( 0 -    238)
  1151: bilinearSampler      ( 0 -    238)
  1152: ,                    ( 0 -    238)
  1153: input                ( 0 -    238)
  1154: .                    ( 0 -    238)
  1155: uv                   ( 0 -    238)
  1156: )                    ( 0 -    238)
  1157: ;                    ( 0 -    238)
  1158: }                    ( 0 -    239)
  1159: if                   ( 0 -    241)
  1160: (                    ( 0 -    241)
  1161: renderMode           ( 0 -    241)
  1162: unknown              ( 0 -    241)
  1163: 2                    ( 0 -    241)
  1164: )                    ( 0 -    241)
  1165: {                    ( 0 -    242)
  1166: outColor             ( 0 -    243)
  1167: =                    ( 0 -    243)
  1168: outColor             ( 0 -    243)
  1169: *                    ( 0 -    243)
  1170: intensity            ( 0 -    243)
  1171: +                    ( 0 -    243)
  1172: SceneTexture         ( 0 -    243)
  1173: .                    ( 0 -    243)
  1174: Sample               ( 0 -    243)
  1175: (                    ( 0 -    243)
  1176: bilinearSampler      ( 0 -    243)
  1177: ,                    ( 0 -    243)
  1178: input                ( 0 -    243)
  1179: .                    ( 0 -    243)
  1180: uv                   ( 0 -    243)
  1181: )                    ( 0 -    243)
  1182: ;                    ( 0 -    243)
  1183: }                    ( 0 -    244)
  1184: return               ( 0 -    246)
  1185: outColor             ( 0 -    246)
  1186: ;                    ( 0 -    246)
  1187: }                    ( 0 -    248)
  1188: <eof>                ( 0 -    249)

 0: C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/10_PixelProjectedReflections/Shaders/D3D12/PPR_Holepatching.frag

