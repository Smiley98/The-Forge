     0: cbuffer              ( 0 -     31)
     1: cbExtendCamera       ( 0 -     31)
     2: :                    ( 0 -     31)
     3: register             ( 0 -     31)
     4: (                    ( 0 -     31)
     5: b0                   ( 0 -     31)
     6: ,                    ( 0 -     31)
     7: space1               ( 0 -     31)
     8: )                    ( 0 -     31)
     9: {                    ( 0 -     32)
    10: float4x4             ( 0 -     33)
    11: viewMat              ( 0 -     33)
    12: ;                    ( 0 -     33)
    13: float4x4             ( 0 -     34)
    14: projMat              ( 0 -     34)
    15: ;                    ( 0 -     34)
    16: float4x4             ( 0 -     35)
    17: viewProjMat          ( 0 -     35)
    18: ;                    ( 0 -     35)
    19: float4x4             ( 0 -     36)
    20: InvViewProjMat       ( 0 -     36)
    21: ;                    ( 0 -     36)
    22: float4               ( 0 -     38)
    23: cameraWorldPos       ( 0 -     38)
    24: ;                    ( 0 -     38)
    25: float4               ( 0 -     39)
    26: viewPortSize         ( 0 -     39)
    27: ;                    ( 0 -     39)
    28: }                    ( 0 -     40)
    29: RWStructuredBuffer   ( 0 -     42)
    30: <                    ( 0 -     42)
    31: uint                 ( 0 -     42)
    32: >                    ( 0 -     42)
    33: IntermediateBuffer   ( 0 -     42)
    34: :                    ( 0 -     42)
    35: register             ( 0 -     42)
    36: (                    ( 0 -     42)
    37: u1                   ( 0 -     42)
    38: )                    ( 0 -     42)
    39: ;                    ( 0 -     42)
    40: Texture2D            ( 0 -     46)
    41: <                    ( 0 -     46)
    42: float                ( 0 -     46)
    43: >                    ( 0 -     46)
    44: DepthTexture         ( 0 -     46)
    45: :                    ( 0 -     46)
    46: register             ( 0 -     46)
    47: (                    ( 0 -     46)
    48: t2                   ( 0 -     46)
    49: )                    ( 0 -     46)
    50: ;                    ( 0 -     46)
    51: struct               ( 0 -     48)
    52: PlaneInfo            ( 0 -     48)
    53: {                    ( 0 -     49)
    54: float4x4             ( 0 -     50)
    55: rotMat               ( 0 -     50)
    56: ;                    ( 0 -     50)
    57: float4               ( 0 -     51)
    58: centerPoint          ( 0 -     51)
    59: ;                    ( 0 -     51)
    60: float4               ( 0 -     52)
    61: size                 ( 0 -     52)
    62: ;                    ( 0 -     52)
    63: }                    ( 0 -     53)
    64: ;                    ( 0 -     53)
    65: cbuffer              ( 0 -     55)
    66: planeInfoBuffer      ( 0 -     55)
    67: :                    ( 0 -     55)
    68: register             ( 0 -     55)
    69: (                    ( 0 -     55)
    70: b3                   ( 0 -     55)
    71: ,                    ( 0 -     55)
    72: space1               ( 0 -     55)
    73: )                    ( 0 -     55)
    74: {                    ( 0 -     56)
    75: PlaneInfo            ( 0 -     57)
    76: planeInfo            ( 0 -     57)
    77: [                    ( 0 -     57)
    78: 4                    ( 0 -     57)
    79: ]                    ( 0 -     57)
    80: ;                    ( 0 -     57)
    81: uint                 ( 0 -     58)
    82: numPlanes            ( 0 -     58)
    83: ;                    ( 0 -     58)
    84: uint                 ( 0 -     59)
    85: pad00                ( 0 -     59)
    86: ;                    ( 0 -     59)
    87: uint                 ( 0 -     60)
    88: pad01                ( 0 -     60)
    89: ;                    ( 0 -     60)
    90: uint                 ( 0 -     61)
    91: pad02                ( 0 -     61)
    92: ;                    ( 0 -     61)
    93: }                    ( 0 -     62)
    94: SamplerState         ( 0 -     64)
    95: defaultSampler       ( 0 -     64)
    96: :                    ( 0 -     64)
    97: register             ( 0 -     64)
    98: (                    ( 0 -     64)
    99: s4                   ( 0 -     64)
   100: )                    ( 0 -     64)
   101: ;                    ( 0 -     64)
   102: float                ( 0 -     67)
   103: getDistance          ( 0 -     67)
   104: (                    ( 0 -     67)
   105: float3               ( 0 -     67)
   106: planeNormal          ( 0 -     67)
   107: ,                    ( 0 -     67)
   108: float3               ( 0 -     67)
   109: planeCenter          ( 0 -     67)
   110: ,                    ( 0 -     67)
   111: float3               ( 0 -     67)
   112: worldPos             ( 0 -     67)
   113: )                    ( 0 -     67)
   114: {                    ( 0 -     68)
   115: float                ( 0 -     70)
   116: d                    ( 0 -     70)
   117: =                    ( 0 -     70)
   118: -                    ( 0 -     70)
   119: dot                  ( 0 -     70)
   120: (                    ( 0 -     70)
   121: planeNormal          ( 0 -     70)
   122: ,                    ( 0 -     70)
   123: planeCenter          ( 0 -     70)
   124: )                    ( 0 -     70)
   125: ;                    ( 0 -     70)
   126: return               ( 0 -     71)
   127: (                    ( 0 -     71)
   128: dot                  ( 0 -     71)
   129: (                    ( 0 -     71)
   130: planeNormal          ( 0 -     71)
   131: ,                    ( 0 -     71)
   132: worldPos             ( 0 -     71)
   133: )                    ( 0 -     71)
   134: +                    ( 0 -     71)
   135: d                    ( 0 -     71)
   136: )                    ( 0 -     71)
   137: /                    ( 0 -     71)
   138: length               ( 0 -     71)
   139: (                    ( 0 -     71)
   140: planeNormal          ( 0 -     71)
   141: )                    ( 0 -     71)
   142: ;                    ( 0 -     71)
   143: }                    ( 0 -     72)
   144: bool                 ( 0 -     74)
   145: intersectPlane       ( 0 -     74)
   146: (                    ( 0 -     74)
   147: in                   ( 0 -     74)
   148: uint                 ( 0 -     74)
   149: index                ( 0 -     74)
   150: ,                    ( 0 -     74)
   151: in                   ( 0 -     74)
   152: float3               ( 0 -     74)
   153: worldPos             ( 0 -     74)
   154: ,                    ( 0 -     74)
   155: in                   ( 0 -     74)
   156: float2               ( 0 -     74)
   157: fragUV               ( 0 -     74)
   158: ,                    ( 0 -     74)
   159: out                  ( 0 -     74)
   160: float4               ( 0 -     74)
   161: reflectedPos         ( 0 -     74)
   162: )                    ( 0 -     74)
   163: {                    ( 0 -     75)
   164: PlaneInfo            ( 0 -     76)
   165: thisPlane            ( 0 -     76)
   166: =                    ( 0 -     76)
   167: planeInfo            ( 0 -     76)
   168: [                    ( 0 -     76)
   169: index                ( 0 -     76)
   170: ]                    ( 0 -     76)
   171: ;                    ( 0 -     76)
   172: float3               ( 0 -     79)
   173: normalVec            ( 0 -     79)
   174: =                    ( 0 -     79)
   175: thisPlane            ( 0 -     79)
   176: .                    ( 0 -     79)
   177: rotMat               ( 0 -     79)
   178: [                    ( 0 -     79)
   179: 2                    ( 0 -     79)
   180: ]                    ( 0 -     79)
   181: .                    ( 0 -     79)
   182: xyz                  ( 0 -     79)
   183: ;                    ( 0 -     79)
   184: float3               ( 0 -     81)
   185: centerPoint          ( 0 -     81)
   186: =                    ( 0 -     81)
   187: thisPlane            ( 0 -     81)
   188: .                    ( 0 -     81)
   189: centerPoint          ( 0 -     81)
   190: .                    ( 0 -     81)
   191: xyz                  ( 0 -     81)
   192: ;                    ( 0 -     81)
   193: float3               ( 0 -     82)
   194: projectedWorldPos    ( 0 -     82)
   195: =                    ( 0 -     82)
   196: dot                  ( 0 -     82)
   197: (                    ( 0 -     82)
   198: normalVec            ( 0 -     82)
   199: ,                    ( 0 -     82)
   200: worldPos             ( 0 -     82)
   201: -                    ( 0 -     82)
   202: centerPoint          ( 0 -     82)
   203: )                    ( 0 -     82)
   204: *                    ( 0 -     82)
   205: normalVec            ( 0 -     82)
   206: ;                    ( 0 -     82)
   207: float3               ( 0 -     83)
   208: target               ( 0 -     83)
   209: =                    ( 0 -     83)
   210: worldPos             ( 0 -     83)
   211: -                    ( 0 -     83)
   212: 2.000000             ( 0 -     83)
   213: *                    ( 0 -     83)
   214: projectedWorldPos    ( 0 -     83)
   215: ;                    ( 0 -     83)
   216: float                ( 0 -     86)
   217: dist                 ( 0 -     86)
   218: =                    ( 0 -     86)
   219: getDistance          ( 0 -     86)
   220: (                    ( 0 -     86)
   221: normalVec            ( 0 -     86)
   222: ,                    ( 0 -     86)
   223: centerPoint          ( 0 -     86)
   224: ,                    ( 0 -     86)
   225: target               ( 0 -     86)
   226: )                    ( 0 -     86)
   227: ;                    ( 0 -     86)
   228: if                   ( 0 -     89)
   229: (                    ( 0 -     89)
   230: dist                 ( 0 -     89)
   231: unknown              ( 0 -     89)
   232: 0.000000             ( 0 -     89)
   233: )                    ( 0 -     89)
   234: {                    ( 0 -     90)
   235: return               ( 0 -     91)
   236: false                ( 0 -     91)
   237: ;                    ( 0 -     91)
   238: }                    ( 0 -     92)
   239: float3               ( 0 -     94)
   240: rO                   ( 0 -     94)
   241: =                    ( 0 -     94)
   242: cameraWorldPos       ( 0 -     94)
   243: .                    ( 0 -     94)
   244: xyz                  ( 0 -     94)
   245: ;                    ( 0 -     94)
   246: float3               ( 0 -     95)
   247: rD                   ( 0 -     95)
   248: =                    ( 0 -     95)
   249: normalize            ( 0 -     95)
   250: (                    ( 0 -     95)
   251: target               ( 0 -     95)
   252: -                    ( 0 -     95)
   253: rO                   ( 0 -     95)
   254: )                    ( 0 -     95)
   255: ;                    ( 0 -     95)
   256: float3               ( 0 -     96)
   257: rD_VS                ( 0 -     96)
   258: =                    ( 0 -     96)
   259: mul                  ( 0 -     96)
   260: (                    ( 0 -     96)
   261: (                    ( 0 -     96)
   262: float3x3             ( 0 -     96)
   263: )                    ( 0 -     96)
   264: viewMat              ( 0 -     96)
   265: ,                    ( 0 -     96)
   266: rD                   ( 0 -     96)
   267: )                    ( 0 -     96)
   268: ;                    ( 0 -     96)
   269: if                   ( 0 -     98)
   270: (                    ( 0 -     98)
   271: rD_VS                ( 0 -     98)
   272: .                    ( 0 -     98)
   273: z                    ( 0 -     98)
   274: <                    ( 0 -     98)
   275: 0.000000             ( 0 -     98)
   276: )                    ( 0 -     98)
   277: {                    ( 0 -     99)
   278: return               ( 0 -    100)
   279: false                ( 0 -    100)
   280: ;                    ( 0 -    100)
   281: }                    ( 0 -    101)
   282: float                ( 0 -    103)
   283: denom                ( 0 -    103)
   284: =                    ( 0 -    103)
   285: dot                  ( 0 -    103)
   286: (                    ( 0 -    103)
   287: normalVec            ( 0 -    103)
   288: ,                    ( 0 -    103)
   289: rD                   ( 0 -    103)
   290: )                    ( 0 -    103)
   291: ;                    ( 0 -    103)
   292: if                   ( 0 -    105)
   293: (                    ( 0 -    105)
   294: denom                ( 0 -    105)
   295: <                    ( 0 -    105)
   296: 0.000000             ( 0 -    105)
   297: )                    ( 0 -    105)
   298: {                    ( 0 -    106)
   299: float3               ( 0 -    107)
   300: p0l0                 ( 0 -    107)
   301: =                    ( 0 -    107)
   302: centerPoint          ( 0 -    107)
   303: -                    ( 0 -    107)
   304: rO                   ( 0 -    107)
   305: ;                    ( 0 -    107)
   306: float                ( 0 -    108)
   307: t                    ( 0 -    108)
   308: =                    ( 0 -    108)
   309: dot                  ( 0 -    108)
   310: (                    ( 0 -    108)
   311: normalVec            ( 0 -    108)
   312: ,                    ( 0 -    108)
   313: p0l0                 ( 0 -    108)
   314: )                    ( 0 -    108)
   315: /                    ( 0 -    108)
   316: denom                ( 0 -    108)
   317: ;                    ( 0 -    108)
   318: if                   ( 0 -    110)
   319: (                    ( 0 -    110)
   320: t                    ( 0 -    110)
   321: unknown              ( 0 -    110)
   322: 0.000000             ( 0 -    110)
   323: )                    ( 0 -    110)
   324: {                    ( 0 -    111)
   325: return               ( 0 -    112)
   326: false                ( 0 -    112)
   327: ;                    ( 0 -    112)
   328: }                    ( 0 -    113)
   329: float3               ( 0 -    115)
   330: hitPoint             ( 0 -    115)
   331: =                    ( 0 -    115)
   332: rO                   ( 0 -    115)
   333: +                    ( 0 -    115)
   334: rD                   ( 0 -    115)
   335: *                    ( 0 -    115)
   336: t                    ( 0 -    115)
   337: ;                    ( 0 -    115)
   338: float3               ( 0 -    117)
   339: gap                  ( 0 -    117)
   340: =                    ( 0 -    117)
   341: hitPoint             ( 0 -    117)
   342: -                    ( 0 -    117)
   343: centerPoint          ( 0 -    117)
   344: ;                    ( 0 -    117)
   345: float                ( 0 -    119)
   346: xGap                 ( 0 -    119)
   347: =                    ( 0 -    119)
   348: dot                  ( 0 -    119)
   349: (                    ( 0 -    119)
   350: gap                  ( 0 -    119)
   351: ,                    ( 0 -    119)
   352: thisPlane            ( 0 -    119)
   353: .                    ( 0 -    119)
   354: rotMat               ( 0 -    119)
   355: [                    ( 0 -    119)
   356: 0                    ( 0 -    119)
   357: ]                    ( 0 -    119)
   358: .                    ( 0 -    119)
   359: xyz                  ( 0 -    119)
   360: )                    ( 0 -    119)
   361: ;                    ( 0 -    119)
   362: float                ( 0 -    120)
   363: yGap                 ( 0 -    120)
   364: =                    ( 0 -    120)
   365: dot                  ( 0 -    120)
   366: (                    ( 0 -    120)
   367: gap                  ( 0 -    120)
   368: ,                    ( 0 -    120)
   369: thisPlane            ( 0 -    120)
   370: .                    ( 0 -    120)
   371: rotMat               ( 0 -    120)
   372: [                    ( 0 -    120)
   373: 1                    ( 0 -    120)
   374: ]                    ( 0 -    120)
   375: .                    ( 0 -    120)
   376: xyz                  ( 0 -    120)
   377: )                    ( 0 -    120)
   378: ;                    ( 0 -    120)
   379: float                ( 0 -    125)
   380: width                ( 0 -    125)
   381: =                    ( 0 -    125)
   382: thisPlane            ( 0 -    125)
   383: .                    ( 0 -    125)
   384: size                 ( 0 -    125)
   385: .                    ( 0 -    125)
   386: x                    ( 0 -    125)
   387: *                    ( 0 -    125)
   388: 0.500000             ( 0 -    125)
   389: ;                    ( 0 -    125)
   390: float                ( 0 -    126)
   391: height               ( 0 -    126)
   392: =                    ( 0 -    126)
   393: thisPlane            ( 0 -    126)
   394: .                    ( 0 -    126)
   395: size                 ( 0 -    126)
   396: .                    ( 0 -    126)
   397: y                    ( 0 -    126)
   398: *                    ( 0 -    126)
   399: 0.500000             ( 0 -    126)
   400: ;                    ( 0 -    126)
   401: if                   ( 0 -    128)
   402: (                    ( 0 -    128)
   403: (                    ( 0 -    128)
   404: abs                  ( 0 -    128)
   405: (                    ( 0 -    128)
   406: xGap                 ( 0 -    128)
   407: )                    ( 0 -    128)
   408: unknown              ( 0 -    128)
   409: width                ( 0 -    128)
   410: )                    ( 0 -    128)
   411: unknown              ( 0 -    128)
   412: (                    ( 0 -    128)
   413: abs                  ( 0 -    128)
   414: (                    ( 0 -    128)
   415: yGap                 ( 0 -    128)
   416: )                    ( 0 -    128)
   417: unknown              ( 0 -    128)
   418: height               ( 0 -    128)
   419: )                    ( 0 -    128)
   420: )                    ( 0 -    128)
   421: {                    ( 0 -    129)
   422: reflectedPos         ( 0 -    130)
   423: =                    ( 0 -    130)
   424: mul                  ( 0 -    130)
   425: (                    ( 0 -    130)
   426: viewProjMat          ( 0 -    130)
   427: ,                    ( 0 -    130)
   428: float4               ( 0 -    130)
   429: (                    ( 0 -    130)
   430: hitPoint             ( 0 -    130)
   431: ,                    ( 0 -    130)
   432: 1.000000             ( 0 -    130)
   433: )                    ( 0 -    130)
   434: )                    ( 0 -    130)
   435: ;                    ( 0 -    130)
   436: reflectedPos         ( 0 -    131)
   437: /=                   ( 0 -    131)
   438: reflectedPos         ( 0 -    131)
   439: .                    ( 0 -    131)
   440: w                    ( 0 -    131)
   441: ;                    ( 0 -    131)
   442: reflectedPos         ( 0 -    133)
   443: .                    ( 0 -    133)
   444: xy                   ( 0 -    133)
   445: =                    ( 0 -    133)
   446: float2               ( 0 -    133)
   447: (                    ( 0 -    133)
   448: (                    ( 0 -    133)
   449: reflectedPos         ( 0 -    133)
   450: .                    ( 0 -    133)
   451: x                    ( 0 -    133)
   452: +                    ( 0 -    133)
   453: 1.000000             ( 0 -    133)
   454: )                    ( 0 -    133)
   455: *                    ( 0 -    133)
   456: 0.500000             ( 0 -    133)
   457: ,                    ( 0 -    133)
   458: (                    ( 0 -    133)
   459: 1.000000             ( 0 -    133)
   460: -                    ( 0 -    133)
   461: reflectedPos         ( 0 -    133)
   462: .                    ( 0 -    133)
   463: y                    ( 0 -    133)
   464: )                    ( 0 -    133)
   465: *                    ( 0 -    133)
   466: 0.500000             ( 0 -    133)
   467: )                    ( 0 -    133)
   468: ;                    ( 0 -    133)
   469: float                ( 0 -    135)
   470: depth                ( 0 -    135)
   471: =                    ( 0 -    135)
   472: DepthTexture         ( 0 -    135)
   473: .                    ( 0 -    135)
   474: SampleLevel          ( 0 -    135)
   475: (                    ( 0 -    135)
   476: defaultSampler       ( 0 -    135)
   477: ,                    ( 0 -    135)
   478: reflectedPos         ( 0 -    135)
   479: .                    ( 0 -    135)
   480: xy                   ( 0 -    135)
   481: ,                    ( 0 -    135)
   482: 0                    ( 0 -    135)
   483: )                    ( 0 -    135)
   484: .                    ( 0 -    135)
   485: r                    ( 0 -    135)
   486: ;                    ( 0 -    135)
   487: if                   ( 0 -    137)
   488: (                    ( 0 -    137)
   489: depth                ( 0 -    137)
   490: unknown              ( 0 -    137)
   491: reflectedPos         ( 0 -    137)
   492: .                    ( 0 -    137)
   493: z                    ( 0 -    137)
   494: )                    ( 0 -    137)
   495: {                    ( 0 -    138)
   496: return               ( 0 -    139)
   497: false                ( 0 -    139)
   498: ;                    ( 0 -    139)
   499: }                    ( 0 -    140)
   500: if                   ( 0 -    142)
   501: (                    ( 0 -    142)
   502: reflectedPos         ( 0 -    142)
   503: .                    ( 0 -    142)
   504: x                    ( 0 -    142)
   505: <                    ( 0 -    142)
   506: 0.000000             ( 0 -    142)
   507: unknown              ( 0 -    142)
   508: reflectedPos         ( 0 -    142)
   509: .                    ( 0 -    142)
   510: y                    ( 0 -    142)
   511: <                    ( 0 -    142)
   512: 0.000000             ( 0 -    142)
   513: unknown              ( 0 -    142)
   514: reflectedPos         ( 0 -    142)
   515: .                    ( 0 -    142)
   516: x                    ( 0 -    142)
   517: >                    ( 0 -    142)
   518: 1.000000             ( 0 -    142)
   519: unknown              ( 0 -    142)
   520: reflectedPos         ( 0 -    142)
   521: .                    ( 0 -    142)
   522: y                    ( 0 -    142)
   523: >                    ( 0 -    142)
   524: 1.000000             ( 0 -    142)
   525: )                    ( 0 -    142)
   526: {                    ( 0 -    143)
   527: return               ( 0 -    144)
   528: false                ( 0 -    144)
   529: ;                    ( 0 -    144)
   530: }                    ( 0 -    145)
   531: else                 ( 0 -    146)
   532: {                    ( 0 -    147)
   533: for                  ( 0 -    149)
   534: (                    ( 0 -    149)
   535: uint                 ( 0 -    149)
   536: i                    ( 0 -    149)
   537: =                    ( 0 -    149)
   538: 0                    ( 0 -    149)
   539: ;                    ( 0 -    149)
   540: i                    ( 0 -    149)
   541: <                    ( 0 -    149)
   542: numPlanes            ( 0 -    149)
   543: ;                    ( 0 -    149)
   544: i                    ( 0 -    149)
   545: ++                   ( 0 -    149)
   546: )                    ( 0 -    149)
   547: {                    ( 0 -    150)
   548: if                   ( 0 -    151)
   549: (                    ( 0 -    151)
   550: i                    ( 0 -    151)
   551: unknown              ( 0 -    151)
   552: index                ( 0 -    151)
   553: )                    ( 0 -    151)
   554: {                    ( 0 -    152)
   555: PlaneInfo            ( 0 -    153)
   556: otherPlane           ( 0 -    153)
   557: =                    ( 0 -    153)
   558: planeInfo            ( 0 -    153)
   559: [                    ( 0 -    153)
   560: i                    ( 0 -    153)
   561: ]                    ( 0 -    153)
   562: ;                    ( 0 -    153)
   563: float3               ( 0 -    156)
   564: otherNormalVec       ( 0 -    156)
   565: =                    ( 0 -    156)
   566: otherPlane           ( 0 -    156)
   567: .                    ( 0 -    156)
   568: rotMat               ( 0 -    156)
   569: [                    ( 0 -    156)
   570: 2                    ( 0 -    156)
   571: ]                    ( 0 -    156)
   572: .                    ( 0 -    156)
   573: xyz                  ( 0 -    156)
   574: ;                    ( 0 -    156)
   575: float3               ( 0 -    159)
   576: otherCenterPoint     ( 0 -    159)
   577: =                    ( 0 -    159)
   578: otherPlane           ( 0 -    159)
   579: .                    ( 0 -    159)
   580: centerPoint          ( 0 -    159)
   581: .                    ( 0 -    159)
   582: xyz                  ( 0 -    159)
   583: ;                    ( 0 -    159)
   584: float                ( 0 -    161)
   585: innerDenom           ( 0 -    161)
   586: =                    ( 0 -    161)
   587: dot                  ( 0 -    161)
   588: (                    ( 0 -    161)
   589: otherNormalVec       ( 0 -    161)
   590: ,                    ( 0 -    161)
   591: rD                   ( 0 -    161)
   592: )                    ( 0 -    161)
   593: ;                    ( 0 -    161)
   594: if                   ( 0 -    163)
   595: (                    ( 0 -    163)
   596: innerDenom           ( 0 -    163)
   597: <                    ( 0 -    163)
   598: 0.000000             ( 0 -    163)
   599: )                    ( 0 -    163)
   600: {                    ( 0 -    164)
   601: float3               ( 0 -    165)
   602: innerP0l0            ( 0 -    165)
   603: =                    ( 0 -    165)
   604: otherCenterPoint     ( 0 -    165)
   605: -                    ( 0 -    165)
   606: rO                   ( 0 -    165)
   607: ;                    ( 0 -    165)
   608: float                ( 0 -    166)
   609: innerT               ( 0 -    166)
   610: =                    ( 0 -    166)
   611: dot                  ( 0 -    166)
   612: (                    ( 0 -    166)
   613: otherNormalVec       ( 0 -    166)
   614: ,                    ( 0 -    166)
   615: innerP0l0            ( 0 -    166)
   616: )                    ( 0 -    166)
   617: /                    ( 0 -    166)
   618: innerDenom           ( 0 -    166)
   619: ;                    ( 0 -    166)
   620: if                   ( 0 -    168)
   621: (                    ( 0 -    168)
   622: innerT               ( 0 -    168)
   623: unknown              ( 0 -    168)
   624: 0.000000             ( 0 -    168)
   625: )                    ( 0 -    168)
   626: continue             ( 0 -    169)
   627: ;                    ( 0 -    169)
   628: else if              ( 0 -    170)
   629: (                    ( 0 -    170)
   630: innerT               ( 0 -    170)
   631: <                    ( 0 -    170)
   632: t                    ( 0 -    170)
   633: )                    ( 0 -    170)
   634: {                    ( 0 -    171)
   635: float3               ( 0 -    172)
   636: innerhitPoint        ( 0 -    172)
   637: =                    ( 0 -    172)
   638: rO                   ( 0 -    172)
   639: +                    ( 0 -    172)
   640: rD                   ( 0 -    172)
   641: *                    ( 0 -    172)
   642: innerT               ( 0 -    172)
   643: ;                    ( 0 -    172)
   644: float3               ( 0 -    173)
   645: innergap             ( 0 -    173)
   646: =                    ( 0 -    173)
   647: innerhitPoint        ( 0 -    173)
   648: -                    ( 0 -    173)
   649: otherCenterPoint     ( 0 -    173)
   650: ;                    ( 0 -    173)
   651: float                ( 0 -    175)
   652: innerxGap            ( 0 -    175)
   653: =                    ( 0 -    175)
   654: dot                  ( 0 -    175)
   655: (                    ( 0 -    175)
   656: innergap             ( 0 -    175)
   657: ,                    ( 0 -    175)
   658: otherPlane           ( 0 -    175)
   659: .                    ( 0 -    175)
   660: rotMat               ( 0 -    175)
   661: [                    ( 0 -    175)
   662: 0                    ( 0 -    175)
   663: ]                    ( 0 -    175)
   664: .                    ( 0 -    175)
   665: xyz                  ( 0 -    175)
   666: )                    ( 0 -    175)
   667: ;                    ( 0 -    175)
   668: float                ( 0 -    176)
   669: inneryGap            ( 0 -    176)
   670: =                    ( 0 -    176)
   671: dot                  ( 0 -    176)
   672: (                    ( 0 -    176)
   673: innergap             ( 0 -    176)
   674: ,                    ( 0 -    176)
   675: otherPlane           ( 0 -    176)
   676: .                    ( 0 -    176)
   677: rotMat               ( 0 -    176)
   678: [                    ( 0 -    176)
   679: 1                    ( 0 -    176)
   680: ]                    ( 0 -    176)
   681: .                    ( 0 -    176)
   682: xyz                  ( 0 -    176)
   683: )                    ( 0 -    176)
   684: ;                    ( 0 -    176)
   685: float                ( 0 -    178)
   686: innerWidth           ( 0 -    178)
   687: =                    ( 0 -    178)
   688: otherPlane           ( 0 -    178)
   689: .                    ( 0 -    178)
   690: size                 ( 0 -    178)
   691: .                    ( 0 -    178)
   692: x                    ( 0 -    178)
   693: *                    ( 0 -    178)
   694: 0.500000             ( 0 -    178)
   695: ;                    ( 0 -    178)
   696: float                ( 0 -    179)
   697: innerHeight          ( 0 -    179)
   698: =                    ( 0 -    179)
   699: otherPlane           ( 0 -    179)
   700: .                    ( 0 -    179)
   701: size                 ( 0 -    179)
   702: .                    ( 0 -    179)
   703: y                    ( 0 -    179)
   704: *                    ( 0 -    179)
   705: 0.500000             ( 0 -    179)
   706: ;                    ( 0 -    179)
   707: if                   ( 0 -    182)
   708: (                    ( 0 -    182)
   709: (                    ( 0 -    182)
   710: abs                  ( 0 -    182)
   711: (                    ( 0 -    182)
   712: innerxGap            ( 0 -    182)
   713: )                    ( 0 -    182)
   714: unknown              ( 0 -    182)
   715: innerWidth           ( 0 -    182)
   716: )                    ( 0 -    182)
   717: unknown              ( 0 -    182)
   718: (                    ( 0 -    182)
   719: abs                  ( 0 -    182)
   720: (                    ( 0 -    182)
   721: inneryGap            ( 0 -    182)
   722: )                    ( 0 -    182)
   723: unknown              ( 0 -    182)
   724: innerHeight          ( 0 -    182)
   725: )                    ( 0 -    182)
   726: )                    ( 0 -    182)
   727: {                    ( 0 -    183)
   728: return               ( 0 -    184)
   729: false                ( 0 -    184)
   730: ;                    ( 0 -    184)
   731: }                    ( 0 -    185)
   732: }                    ( 0 -    186)
   733: }                    ( 0 -    187)
   734: }                    ( 0 -    188)
   735: }                    ( 0 -    189)
   736: return               ( 0 -    191)
   737: true                 ( 0 -    191)
   738: ;                    ( 0 -    191)
   739: }                    ( 0 -    192)
   740: }                    ( 0 -    193)
   741: else                 ( 0 -    194)
   742: return               ( 0 -    195)
   743: false                ( 0 -    195)
   744: ;                    ( 0 -    195)
   745: }                    ( 0 -    196)
   746: else                 ( 0 -    197)
   747: return               ( 0 -    198)
   748: false                ( 0 -    198)
   749: ;                    ( 0 -    198)
   750: }                    ( 0 -    199)
   751: float4               ( 0 -    201)
   752: getWorldPosition     ( 0 -    201)
   753: (                    ( 0 -    201)
   754: float2               ( 0 -    201)
   755: UV                   ( 0 -    201)
   756: ,                    ( 0 -    201)
   757: float                ( 0 -    201)
   758: depth                ( 0 -    201)
   759: )                    ( 0 -    201)
   760: {                    ( 0 -    202)
   761: float4               ( 0 -    203)
   762: worldPos             ( 0 -    203)
   763: =                    ( 0 -    203)
   764: mul                  ( 0 -    203)
   765: (                    ( 0 -    203)
   766: InvViewProjMat       ( 0 -    203)
   767: ,                    ( 0 -    203)
   768: float4               ( 0 -    203)
   769: (                    ( 0 -    203)
   770: UV                   ( 0 -    203)
   771: .                    ( 0 -    203)
   772: x                    ( 0 -    203)
   773: *                    ( 0 -    203)
   774: 2.000000             ( 0 -    203)
   775: -                    ( 0 -    203)
   776: 1.000000             ( 0 -    203)
   777: ,                    ( 0 -    203)
   778: (                    ( 0 -    203)
   779: 1.000000             ( 0 -    203)
   780: -                    ( 0 -    203)
   781: UV                   ( 0 -    203)
   782: .                    ( 0 -    203)
   783: y                    ( 0 -    203)
   784: )                    ( 0 -    203)
   785: *                    ( 0 -    203)
   786: 2.000000             ( 0 -    203)
   787: -                    ( 0 -    203)
   788: 1.000000             ( 0 -    203)
   789: ,                    ( 0 -    203)
   790: depth                ( 0 -    203)
   791: ,                    ( 0 -    203)
   792: 1.000000             ( 0 -    203)
   793: )                    ( 0 -    203)
   794: )                    ( 0 -    203)
   795: ;                    ( 0 -    203)
   796: worldPos             ( 0 -    204)
   797: /=                   ( 0 -    204)
   798: worldPos             ( 0 -    204)
   799: .                    ( 0 -    204)
   800: w                    ( 0 -    204)
   801: ;                    ( 0 -    204)
   802: return               ( 0 -    205)
   803: worldPos             ( 0 -    205)
   804: ;                    ( 0 -    205)
   805: }                    ( 0 -    206)
   806: uint                 ( 0 -    208)
   807: packInfo             ( 0 -    208)
   808: (                    ( 0 -    208)
   809: float2               ( 0 -    208)
   810: offset               ( 0 -    208)
   811: )                    ( 0 -    208)
   812: {                    ( 0 -    209)
   813: uint                 ( 0 -    210)
   814: CoordSys             ( 0 -    210)
   815: =                    ( 0 -    210)
   816: 0                    ( 0 -    210)
   817: ;                    ( 0 -    210)
   818: uint                 ( 0 -    212)
   819: YInt                 ( 0 -    212)
   820: =                    ( 0 -    212)
   821: 0                    ( 0 -    212)
   822: ;                    ( 0 -    212)
   823: int                  ( 0 -    213)
   824: YFrac                ( 0 -    213)
   825: =                    ( 0 -    213)
   826: 0                    ( 0 -    213)
   827: ;                    ( 0 -    213)
   828: int                  ( 0 -    214)
   829: XInt                 ( 0 -    214)
   830: =                    ( 0 -    214)
   831: 0                    ( 0 -    214)
   832: ;                    ( 0 -    214)
   833: int                  ( 0 -    215)
   834: XFrac                ( 0 -    215)
   835: =                    ( 0 -    215)
   836: 0                    ( 0 -    215)
   837: ;                    ( 0 -    215)
   838: if                   ( 0 -    218)
   839: (                    ( 0 -    218)
   840: abs                  ( 0 -    218)
   841: (                    ( 0 -    218)
   842: offset               ( 0 -    218)
   843: .                    ( 0 -    218)
   844: y                    ( 0 -    218)
   845: )                    ( 0 -    218)
   846: <                    ( 0 -    218)
   847: abs                  ( 0 -    218)
   848: (                    ( 0 -    218)
   849: offset               ( 0 -    218)
   850: .                    ( 0 -    218)
   851: x                    ( 0 -    218)
   852: )                    ( 0 -    218)
   853: )                    ( 0 -    218)
   854: {                    ( 0 -    219)
   855: if                   ( 0 -    220)
   856: (                    ( 0 -    220)
   857: offset               ( 0 -    220)
   858: .                    ( 0 -    220)
   859: x                    ( 0 -    220)
   860: <                    ( 0 -    220)
   861: 0.000000             ( 0 -    220)
   862: )                    ( 0 -    220)
   863: {                    ( 0 -    221)
   864: YInt                 ( 0 -    222)
   865: =                    ( 0 -    222)
   866: uint                 ( 0 -    222)
   867: (                    ( 0 -    222)
   868: -                    ( 0 -    222)
   869: offset               ( 0 -    222)
   870: .                    ( 0 -    222)
   871: x                    ( 0 -    222)
   872: )                    ( 0 -    222)
   873: ;                    ( 0 -    222)
   874: YFrac                ( 0 -    223)
   875: =                    ( 0 -    223)
   876: int                  ( 0 -    223)
   877: (                    ( 0 -    223)
   878: frac                 ( 0 -    223)
   879: (                    ( 0 -    223)
   880: offset               ( 0 -    223)
   881: .                    ( 0 -    223)
   882: x                    ( 0 -    223)
   883: )                    ( 0 -    223)
   884: *                    ( 0 -    223)
   885: 8.000000             ( 0 -    223)
   886: )                    ( 0 -    223)
   887: ;                    ( 0 -    223)
   888: XInt                 ( 0 -    225)
   889: =                    ( 0 -    225)
   890: int                  ( 0 -    225)
   891: (                    ( 0 -    225)
   892: offset               ( 0 -    225)
   893: .                    ( 0 -    225)
   894: y                    ( 0 -    225)
   895: )                    ( 0 -    225)
   896: ;                    ( 0 -    225)
   897: XFrac                ( 0 -    226)
   898: =                    ( 0 -    226)
   899: int                  ( 0 -    226)
   900: (                    ( 0 -    226)
   901: frac                 ( 0 -    226)
   902: (                    ( 0 -    226)
   903: offset               ( 0 -    226)
   904: .                    ( 0 -    226)
   905: y                    ( 0 -    226)
   906: )                    ( 0 -    226)
   907: *                    ( 0 -    226)
   908: 8.000000             ( 0 -    226)
   909: )                    ( 0 -    226)
   910: ;                    ( 0 -    226)
   911: CoordSys             ( 0 -    228)
   912: =                    ( 0 -    228)
   913: 3                    ( 0 -    228)
   914: ;                    ( 0 -    228)
   915: }                    ( 0 -    229)
   916: else                 ( 0 -    230)
   917: {                    ( 0 -    231)
   918: YInt                 ( 0 -    232)
   919: =                    ( 0 -    232)
   920: uint                 ( 0 -    232)
   921: (                    ( 0 -    232)
   922: offset               ( 0 -    232)
   923: .                    ( 0 -    232)
   924: x                    ( 0 -    232)
   925: )                    ( 0 -    232)
   926: ;                    ( 0 -    232)
   927: YFrac                ( 0 -    233)
   928: =                    ( 0 -    233)
   929: int                  ( 0 -    233)
   930: (                    ( 0 -    233)
   931: frac                 ( 0 -    233)
   932: (                    ( 0 -    233)
   933: offset               ( 0 -    233)
   934: .                    ( 0 -    233)
   935: x                    ( 0 -    233)
   936: )                    ( 0 -    233)
   937: *                    ( 0 -    233)
   938: 8.000000             ( 0 -    233)
   939: )                    ( 0 -    233)
   940: ;                    ( 0 -    233)
   941: XInt                 ( 0 -    235)
   942: =                    ( 0 -    235)
   943: int                  ( 0 -    235)
   944: (                    ( 0 -    235)
   945: offset               ( 0 -    235)
   946: .                    ( 0 -    235)
   947: y                    ( 0 -    235)
   948: )                    ( 0 -    235)
   949: ;                    ( 0 -    235)
   950: XFrac                ( 0 -    236)
   951: =                    ( 0 -    236)
   952: int                  ( 0 -    236)
   953: (                    ( 0 -    236)
   954: frac                 ( 0 -    236)
   955: (                    ( 0 -    236)
   956: offset               ( 0 -    236)
   957: .                    ( 0 -    236)
   958: y                    ( 0 -    236)
   959: )                    ( 0 -    236)
   960: *                    ( 0 -    236)
   961: 8.000000             ( 0 -    236)
   962: )                    ( 0 -    236)
   963: ;                    ( 0 -    236)
   964: CoordSys             ( 0 -    238)
   965: =                    ( 0 -    238)
   966: 1                    ( 0 -    238)
   967: ;                    ( 0 -    238)
   968: }                    ( 0 -    239)
   969: }                    ( 0 -    240)
   970: else                 ( 0 -    241)
   971: {                    ( 0 -    242)
   972: if                   ( 0 -    243)
   973: (                    ( 0 -    243)
   974: offset               ( 0 -    243)
   975: .                    ( 0 -    243)
   976: y                    ( 0 -    243)
   977: <                    ( 0 -    243)
   978: 0.000000             ( 0 -    243)
   979: )                    ( 0 -    243)
   980: {                    ( 0 -    244)
   981: YInt                 ( 0 -    245)
   982: =                    ( 0 -    245)
   983: uint                 ( 0 -    245)
   984: (                    ( 0 -    245)
   985: -                    ( 0 -    245)
   986: offset               ( 0 -    245)
   987: .                    ( 0 -    245)
   988: y                    ( 0 -    245)
   989: )                    ( 0 -    245)
   990: ;                    ( 0 -    245)
   991: YFrac                ( 0 -    246)
   992: =                    ( 0 -    246)
   993: int                  ( 0 -    246)
   994: (                    ( 0 -    246)
   995: frac                 ( 0 -    246)
   996: (                    ( 0 -    246)
   997: offset               ( 0 -    246)
   998: .                    ( 0 -    246)
   999: y                    ( 0 -    246)
  1000: )                    ( 0 -    246)
  1001: *                    ( 0 -    246)
  1002: 8.000000             ( 0 -    246)
  1003: )                    ( 0 -    246)
  1004: ;                    ( 0 -    246)
  1005: XInt                 ( 0 -    248)
  1006: =                    ( 0 -    248)
  1007: int                  ( 0 -    248)
  1008: (                    ( 0 -    248)
  1009: offset               ( 0 -    248)
  1010: .                    ( 0 -    248)
  1011: x                    ( 0 -    248)
  1012: )                    ( 0 -    248)
  1013: ;                    ( 0 -    248)
  1014: XFrac                ( 0 -    249)
  1015: =                    ( 0 -    249)
  1016: int                  ( 0 -    249)
  1017: (                    ( 0 -    249)
  1018: frac                 ( 0 -    249)
  1019: (                    ( 0 -    249)
  1020: offset               ( 0 -    249)
  1021: .                    ( 0 -    249)
  1022: x                    ( 0 -    249)
  1023: )                    ( 0 -    249)
  1024: *                    ( 0 -    249)
  1025: 8.000000             ( 0 -    249)
  1026: )                    ( 0 -    249)
  1027: ;                    ( 0 -    249)
  1028: CoordSys             ( 0 -    251)
  1029: =                    ( 0 -    251)
  1030: 2                    ( 0 -    251)
  1031: ;                    ( 0 -    251)
  1032: }                    ( 0 -    252)
  1033: else                 ( 0 -    253)
  1034: {                    ( 0 -    254)
  1035: YInt                 ( 0 -    255)
  1036: =                    ( 0 -    255)
  1037: uint                 ( 0 -    255)
  1038: (                    ( 0 -    255)
  1039: offset               ( 0 -    255)
  1040: .                    ( 0 -    255)
  1041: y                    ( 0 -    255)
  1042: )                    ( 0 -    255)
  1043: ;                    ( 0 -    255)
  1044: YFrac                ( 0 -    256)
  1045: =                    ( 0 -    256)
  1046: int                  ( 0 -    256)
  1047: (                    ( 0 -    256)
  1048: frac                 ( 0 -    256)
  1049: (                    ( 0 -    256)
  1050: offset               ( 0 -    256)
  1051: .                    ( 0 -    256)
  1052: y                    ( 0 -    256)
  1053: )                    ( 0 -    256)
  1054: *                    ( 0 -    256)
  1055: 8.000000             ( 0 -    256)
  1056: )                    ( 0 -    256)
  1057: ;                    ( 0 -    256)
  1058: XInt                 ( 0 -    258)
  1059: =                    ( 0 -    258)
  1060: int                  ( 0 -    258)
  1061: (                    ( 0 -    258)
  1062: offset               ( 0 -    258)
  1063: .                    ( 0 -    258)
  1064: x                    ( 0 -    258)
  1065: )                    ( 0 -    258)
  1066: ;                    ( 0 -    258)
  1067: XFrac                ( 0 -    259)
  1068: =                    ( 0 -    259)
  1069: int                  ( 0 -    259)
  1070: (                    ( 0 -    259)
  1071: frac                 ( 0 -    259)
  1072: (                    ( 0 -    259)
  1073: offset               ( 0 -    259)
  1074: .                    ( 0 -    259)
  1075: x                    ( 0 -    259)
  1076: )                    ( 0 -    259)
  1077: *                    ( 0 -    259)
  1078: 8.000000             ( 0 -    259)
  1079: )                    ( 0 -    259)
  1080: ;                    ( 0 -    259)
  1081: CoordSys             ( 0 -    261)
  1082: =                    ( 0 -    261)
  1083: 0                    ( 0 -    261)
  1084: ;                    ( 0 -    261)
  1085: }                    ( 0 -    262)
  1086: }                    ( 0 -    263)
  1087: return               ( 0 -    265)
  1088: (                    ( 0 -    265)
  1089: (                    ( 0 -    265)
  1090: YInt                 ( 0 -    265)
  1091: &                    ( 0 -    265)
  1092: 4095                 ( 0 -    265)
  1093: )                    ( 0 -    265)
  1094: unknown              ( 0 -    265)
  1095: 20                   ( 0 -    265)
  1096: )                    ( 0 -    265)
  1097: |                    ( 0 -    265)
  1098: (                    ( 0 -    265)
  1099: (                    ( 0 -    265)
  1100: YFrac                ( 0 -    265)
  1101: &                    ( 0 -    265)
  1102: 7                    ( 0 -    265)
  1103: )                    ( 0 -    265)
  1104: unknown              ( 0 -    265)
  1105: 17                   ( 0 -    265)
  1106: )                    ( 0 -    265)
  1107: |                    ( 0 -    265)
  1108: (                    ( 0 -    265)
  1109: (                    ( 0 -    265)
  1110: XInt                 ( 0 -    265)
  1111: &                    ( 0 -    265)
  1112: 4095                 ( 0 -    265)
  1113: )                    ( 0 -    265)
  1114: unknown              ( 0 -    265)
  1115: 5                    ( 0 -    265)
  1116: )                    ( 0 -    265)
  1117: |                    ( 0 -    265)
  1118: (                    ( 0 -    265)
  1119: (                    ( 0 -    265)
  1120: XFrac                ( 0 -    265)
  1121: &                    ( 0 -    265)
  1122: 7                    ( 0 -    265)
  1123: )                    ( 0 -    265)
  1124: unknown              ( 0 -    265)
  1125: 2                    ( 0 -    265)
  1126: )                    ( 0 -    265)
  1127: |                    ( 0 -    265)
  1128: CoordSys             ( 0 -    265)
  1129: ;                    ( 0 -    265)
  1130: }                    ( 0 -    266)
  1131: [                    ( 0 -    268)
  1132: numthreads           ( 0 -    268)
  1133: (                    ( 0 -    268)
  1134: 128                  ( 0 -    268)
  1135: ,                    ( 0 -    268)
  1136: 1                    ( 0 -    268)
  1137: ,                    ( 0 -    268)
  1138: 1                    ( 0 -    268)
  1139: )                    ( 0 -    268)
  1140: ]                    ( 0 -    268)
  1141: void                 ( 0 -    269)
  1142: main                 ( 0 -    269)
  1143: (                    ( 0 -    269)
  1144: uint3                ( 0 -    269)
  1145: Gid                  ( 0 -    269)
  1146: :                    ( 0 -    269)
  1147: SV_GroupID           ( 0 -    269)
  1148: ,                    ( 0 -    269)
  1149: uint3                ( 0 -    269)
  1150: DTid                 ( 0 -    269)
  1151: :                    ( 0 -    269)
  1152: SV_DispatchThreadID  ( 0 -    269)
  1153: ,                    ( 0 -    269)
  1154: uint3                ( 0 -    269)
  1155: GTid                 ( 0 -    269)
  1156: :                    ( 0 -    269)
  1157: SV_GroupThreadID     ( 0 -    269)
  1158: ,                    ( 0 -    269)
  1159: uint                 ( 0 -    269)
  1160: GI                   ( 0 -    269)
  1161: :                    ( 0 -    269)
  1162: SV_GroupIndex        ( 0 -    269)
  1163: )                    ( 0 -    269)
  1164: {                    ( 0 -    270)
  1165: uint                 ( 0 -    271)
  1166: screenWidth          ( 0 -    271)
  1167: =                    ( 0 -    271)
  1168: uint                 ( 0 -    271)
  1169: (                    ( 0 -    271)
  1170: viewPortSize         ( 0 -    271)
  1171: .                    ( 0 -    271)
  1172: x                    ( 0 -    271)
  1173: )                    ( 0 -    271)
  1174: ;                    ( 0 -    271)
  1175: uint                 ( 0 -    272)
  1176: screenHeight         ( 0 -    272)
  1177: =                    ( 0 -    272)
  1178: uint                 ( 0 -    272)
  1179: (                    ( 0 -    272)
  1180: viewPortSize         ( 0 -    272)
  1181: .                    ( 0 -    272)
  1182: y                    ( 0 -    272)
  1183: )                    ( 0 -    272)
  1184: ;                    ( 0 -    272)
  1185: uint                 ( 0 -    274)
  1186: indexDX              ( 0 -    274)
  1187: =                    ( 0 -    274)
  1188: DTid                 ( 0 -    274)
  1189: .                    ( 0 -    274)
  1190: x                    ( 0 -    274)
  1191: ;                    ( 0 -    274)
  1192: if                   ( 0 -    276)
  1193: (                    ( 0 -    276)
  1194: indexDX              ( 0 -    276)
  1195: unknown              ( 0 -    276)
  1196: screenWidth          ( 0 -    276)
  1197: *                    ( 0 -    276)
  1198: screenHeight         ( 0 -    276)
  1199: )                    ( 0 -    276)
  1200: return               ( 0 -    277)
  1201: ;                    ( 0 -    277)
  1202: uint                 ( 0 -    279)
  1203: indexY               ( 0 -    279)
  1204: =                    ( 0 -    279)
  1205: indexDX              ( 0 -    279)
  1206: /                    ( 0 -    279)
  1207: screenWidth          ( 0 -    279)
  1208: ;                    ( 0 -    279)
  1209: uint                 ( 0 -    280)
  1210: indexX               ( 0 -    280)
  1211: =                    ( 0 -    280)
  1212: indexDX              ( 0 -    280)
  1213: -                    ( 0 -    280)
  1214: screenWidth          ( 0 -    280)
  1215: *                    ( 0 -    280)
  1216: indexY               ( 0 -    280)
  1217: ;                    ( 0 -    280)
  1218: float2               ( 0 -    282)
  1219: fragUV               ( 0 -    282)
  1220: =                    ( 0 -    282)
  1221: float2               ( 0 -    282)
  1222: (                    ( 0 -    282)
  1223: (                    ( 0 -    282)
  1224: (                    ( 0 -    282)
  1225: float                ( 0 -    282)
  1226: )                    ( 0 -    282)
  1227: indexX               ( 0 -    282)
  1228: )                    ( 0 -    282)
  1229: /                    ( 0 -    282)
  1230: (                    ( 0 -    282)
  1231: viewPortSize         ( 0 -    282)
  1232: .                    ( 0 -    282)
  1233: x                    ( 0 -    282)
  1234: )                    ( 0 -    282)
  1235: ,                    ( 0 -    282)
  1236: (                    ( 0 -    282)
  1237: (                    ( 0 -    282)
  1238: float                ( 0 -    282)
  1239: )                    ( 0 -    282)
  1240: indexY               ( 0 -    282)
  1241: )                    ( 0 -    282)
  1242: /                    ( 0 -    282)
  1243: (                    ( 0 -    282)
  1244: viewPortSize         ( 0 -    282)
  1245: .                    ( 0 -    282)
  1246: y                    ( 0 -    282)
  1247: )                    ( 0 -    282)
  1248: )                    ( 0 -    282)
  1249: ;                    ( 0 -    282)
  1250: float                ( 0 -    284)
  1251: depth                ( 0 -    284)
  1252: =                    ( 0 -    284)
  1253: DepthTexture         ( 0 -    284)
  1254: .                    ( 0 -    284)
  1255: SampleLevel          ( 0 -    284)
  1256: (                    ( 0 -    284)
  1257: defaultSampler       ( 0 -    284)
  1258: ,                    ( 0 -    284)
  1259: fragUV               ( 0 -    284)
  1260: ,                    ( 0 -    284)
  1261: 0                    ( 0 -    284)
  1262: )                    ( 0 -    284)
  1263: .                    ( 0 -    284)
  1264: r                    ( 0 -    284)
  1265: ;                    ( 0 -    284)
  1266: if                   ( 0 -    287)
  1267: (                    ( 0 -    287)
  1268: depth                ( 0 -    287)
  1269: unknown              ( 0 -    287)
  1270: 1.000000             ( 0 -    287)
  1271: )                    ( 0 -    287)
  1272: return               ( 0 -    288)
  1273: ;                    ( 0 -    288)
  1274: float4               ( 0 -    290)
  1275: worldPos             ( 0 -    290)
  1276: =                    ( 0 -    290)
  1277: getWorldPosition     ( 0 -    290)
  1278: (                    ( 0 -    290)
  1279: fragUV               ( 0 -    290)
  1280: ,                    ( 0 -    290)
  1281: depth                ( 0 -    290)
  1282: )                    ( 0 -    290)
  1283: ;                    ( 0 -    290)
  1284: float4               ( 0 -    292)
  1285: reflectedPos         ( 0 -    292)
  1286: =                    ( 0 -    292)
  1287: float4               ( 0 -    292)
  1288: (                    ( 0 -    292)
  1289: 0.000000             ( 0 -    292)
  1290: ,                    ( 0 -    292)
  1291: 0.000000             ( 0 -    292)
  1292: ,                    ( 0 -    292)
  1293: 0.000000             ( 0 -    292)
  1294: ,                    ( 0 -    292)
  1295: 0.000000             ( 0 -    292)
  1296: )                    ( 0 -    292)
  1297: ;                    ( 0 -    292)
  1298: float2               ( 0 -    293)
  1299: reflectedUV          ( 0 -    293)
  1300: ;                    ( 0 -    293)
  1301: float2               ( 0 -    294)
  1302: offset               ( 0 -    294)
  1303: ;                    ( 0 -    294)
  1304: float                ( 0 -    297)
  1305: minDist              ( 0 -    297)
  1306: =                    ( 0 -    297)
  1307: 1000000.000000       ( 0 -    297)
  1308: ;                    ( 0 -    297)
  1309: for                  ( 0 -    300)
  1310: (                    ( 0 -    300)
  1311: uint                 ( 0 -    300)
  1312: i                    ( 0 -    300)
  1313: =                    ( 0 -    300)
  1314: 0                    ( 0 -    300)
  1315: ;                    ( 0 -    300)
  1316: i                    ( 0 -    300)
  1317: <                    ( 0 -    300)
  1318: numPlanes            ( 0 -    300)
  1319: ;                    ( 0 -    300)
  1320: i                    ( 0 -    300)
  1321: ++                   ( 0 -    300)
  1322: )                    ( 0 -    300)
  1323: {                    ( 0 -    301)
  1324: if                   ( 0 -    302)
  1325: (                    ( 0 -    302)
  1326: intersectPlane       ( 0 -    302)
  1327: (                    ( 0 -    302)
  1328: i                    ( 0 -    302)
  1329: ,                    ( 0 -    302)
  1330: worldPos             ( 0 -    302)
  1331: .                    ( 0 -    302)
  1332: xyz                  ( 0 -    302)
  1333: ,                    ( 0 -    302)
  1334: fragUV               ( 0 -    302)
  1335: ,                    ( 0 -    302)
  1336: reflectedPos         ( 0 -    302)
  1337: )                    ( 0 -    302)
  1338: )                    ( 0 -    302)
  1339: {                    ( 0 -    303)
  1340: reflectedUV          ( 0 -    304)
  1341: =                    ( 0 -    304)
  1342: float2               ( 0 -    304)
  1343: (                    ( 0 -    304)
  1344: reflectedPos         ( 0 -    304)
  1345: .                    ( 0 -    304)
  1346: x                    ( 0 -    304)
  1347: *                    ( 0 -    304)
  1348: viewPortSize         ( 0 -    304)
  1349: .                    ( 0 -    304)
  1350: x                    ( 0 -    304)
  1351: ,                    ( 0 -    304)
  1352: reflectedPos         ( 0 -    304)
  1353: .                    ( 0 -    304)
  1354: y                    ( 0 -    304)
  1355: *                    ( 0 -    304)
  1356: viewPortSize         ( 0 -    304)
  1357: .                    ( 0 -    304)
  1358: y                    ( 0 -    304)
  1359: )                    ( 0 -    304)
  1360: ;                    ( 0 -    304)
  1361: offset               ( 0 -    305)
  1362: =                    ( 0 -    305)
  1363: float2               ( 0 -    305)
  1364: (                    ( 0 -    305)
  1365: (                    ( 0 -    305)
  1366: fragUV               ( 0 -    305)
  1367: .                    ( 0 -    305)
  1368: x                    ( 0 -    305)
  1369: -                    ( 0 -    305)
  1370: reflectedPos         ( 0 -    305)
  1371: .                    ( 0 -    305)
  1372: x                    ( 0 -    305)
  1373: )                    ( 0 -    305)
  1374: *                    ( 0 -    305)
  1375: viewPortSize         ( 0 -    305)
  1376: .                    ( 0 -    305)
  1377: x                    ( 0 -    305)
  1378: ,                    ( 0 -    305)
  1379: (                    ( 0 -    305)
  1380: fragUV               ( 0 -    305)
  1381: .                    ( 0 -    305)
  1382: y                    ( 0 -    305)
  1383: -                    ( 0 -    305)
  1384: reflectedPos         ( 0 -    305)
  1385: .                    ( 0 -    305)
  1386: y                    ( 0 -    305)
  1387: )                    ( 0 -    305)
  1388: *                    ( 0 -    305)
  1389: viewPortSize         ( 0 -    305)
  1390: .                    ( 0 -    305)
  1391: y                    ( 0 -    305)
  1392: )                    ( 0 -    305)
  1393: ;                    ( 0 -    305)
  1394: uint                 ( 0 -    307)
  1395: newIndex             ( 0 -    307)
  1396: =                    ( 0 -    307)
  1397: (                    ( 0 -    307)
  1398: uint                 ( 0 -    307)
  1399: )                    ( 0 -    307)
  1400: reflectedUV          ( 0 -    307)
  1401: .                    ( 0 -    307)
  1402: x                    ( 0 -    307)
  1403: +                    ( 0 -    307)
  1404: (                    ( 0 -    307)
  1405: uint                 ( 0 -    307)
  1406: )                    ( 0 -    307)
  1407: (                    ( 0 -    307)
  1408: reflectedUV          ( 0 -    307)
  1409: .                    ( 0 -    307)
  1410: y                    ( 0 -    307)
  1411: )                    ( 0 -    307)
  1412: *                    ( 0 -    307)
  1413: screenWidth          ( 0 -    307)
  1414: ;                    ( 0 -    307)
  1415: uint                 ( 0 -    310)
  1416: intermediateBufferValue ( 0 -    310)
  1417: =                    ( 0 -    310)
  1418: packInfo             ( 0 -    310)
  1419: (                    ( 0 -    310)
  1420: offset               ( 0 -    310)
  1421: )                    ( 0 -    310)
  1422: ;                    ( 0 -    310)
  1423: InterlockedMin       ( 0 -    311)
  1424: (                    ( 0 -    311)
  1425: IntermediateBuffer   ( 0 -    311)
  1426: [                    ( 0 -    311)
  1427: newIndex             ( 0 -    311)
  1428: ]                    ( 0 -    311)
  1429: ,                    ( 0 -    311)
  1430: intermediateBufferValue ( 0 -    311)
  1431: )                    ( 0 -    311)
  1432: ;                    ( 0 -    311)
  1433: }                    ( 0 -    312)
  1434: }                    ( 0 -    313)
  1435: }                    ( 0 -    314)
  1436: <eof>                ( 0 -    315)

 0: C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/10_PixelProjectedReflections/Shaders/D3D12/PPR_Projection.comp

