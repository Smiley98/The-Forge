cbuffer uniformBlock : register(b0, space1)
{
    float4x4 viewProj;
    float4 camPos;
    float dt;
    uint startIdx;
    uint endIdx;
    int numLODs;
    int indexOffsets[10];
};

struct AsteroidDynamic
{
    float4x4 transform;
    uint indexStart;
    uint indexEnd;
    uint padding[2];
};
struct AsteroidStatic
{
    float4 rotationAxis;
    float4 surfaceColor;
    float4 deepColor;
    float scale;
    float orbitSpeed;
    float rotationSpeed;
    uint textureID;
    uint vertexStart;
    uint padding[3];
};
struct IndirectDrawCommand
{
    uint drawID;
    uint indexCount;
    uint instanceCount;
    uint startIndex;
    int vertexOffset;
    uint startInstance;
    uint padding[2];
};
RWStructuredBuffer<AsteroidStatic> asteroidsStatic : register(u1);
RWStructuredBuffer<AsteroidDynamic> asteroidsDynamic : register(u2);
RWStructuredBuffer<IndirectDrawCommand> drawCmds : register(u3);
float4x4 MakeRotationMatrix(float angle, float3 axis)
{
    float s, c;
    sincos(-angle, s, c);
    float x, y, z;
    (x = axis.x);
    (y = axis.y);
    (z = axis.z);
    float xy, yz, zx;
    (xy = (axis.x * axis.y));
    (yz = (axis.y * axis.z));
    (zx = (axis.z * axis.x));
    float oneMinusC = ((float )(1.0) - c);
    return float4x4((((x * x) * oneMinusC) + c), ((xy * oneMinusC) + (z * s)), ((zx * oneMinusC) - (y * s)), 0.0, ((xy * oneMinusC) - (z * s)), (((y * y) * oneMinusC) + c), ((yz * oneMinusC) + (x * s)), 0.0, ((zx * oneMinusC) + (y * s)), ((yz * oneMinusC) - (x * s)), (((z * z) * oneMinusC) + c), 0.0, 0.0, 0.0, 0.0, 1.0);
};

const static float minSubdivSizeLog2 = (const static float )(log2(0.0019));
[numthreads(128, 1, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
    uint asteroidIdx = (threadID.x + uint(startIdx));
    if (asteroidIdx >= endIdx)
    {
        return;
    }
    AsteroidStatic asteroidStatic = asteroidsStatic[asteroidIdx];
    AsteroidDynamic asteroidDynamic = asteroidsDynamic[asteroidIdx];
    float4x4 orbit = MakeRotationMatrix((asteroidStatic.orbitSpeed * dt), float3(0.0, 1.0, 0.0));
    float4x4 rotate = MakeRotationMatrix((asteroidStatic.rotationSpeed * dt), asteroidStatic.rotationAxis.xyz);
    (asteroidDynamic.transform = mul(mul(orbit, asteroidDynamic.transform), rotate));
    float3 position = float3(asteroidDynamic.transform[0][3], asteroidDynamic.transform[1][3], asteroidDynamic.transform[2][3]);
    float distToEye = length((position - camPos.xyz));
    if (distToEye <= (float )(0))
    {
        return;
    }
    float relativeScreenSizeLog2 = log2((asteroidStatic.scale / distToEye));
    float LODfloat = max((const float )(0.0), (relativeScreenSizeLog2 - minSubdivSizeLog2));
    uint LOD = (uint )(min((numLODs - 1), (const int )(uint(LODfloat))));
    uint startIdx = (uint )(indexOffsets[LOD]);
    uint endIdx = (uint )(indexOffsets[LOD + (uint )(1)]);
    (drawCmds[threadID.x].drawID = asteroidIdx);
    (drawCmds[threadID.x].startIndex = startIdx);
    (drawCmds[threadID.x].indexCount = (endIdx - startIdx));
    (drawCmds[threadID.x].vertexOffset = (int )(asteroidStatic.vertexStart));
    (drawCmds[threadID.x].startInstance = (uint )(0));
    (drawCmds[threadID.x].instanceCount = (uint )(1));
    (asteroidsDynamic[asteroidIdx] = asteroidDynamic);
};

