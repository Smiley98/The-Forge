#line 1 "C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/stochasticShadow.frag"
#line 24 "C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/stochasticShadow.frag"
#line 1 "shading.h"
#line 27 "shading.h"
#line 1 "shaderDefs.h"
#line 22 "shaderDefs.h"
struct Material
{
	float4 Color;
	float4 Transmission;
	float RefractionRatio;
	float Collimation;
	float2 Padding;
	uint TextureFlags;
	uint AlbedoTexID;
	uint MetallicTexID;
	uint RoughnessTexID;
	uint EmissiveTexID;
	uint3 Padding2;
};

struct ObjectInfo
{
	float4x4 toWorld;
	float4x4 normalMat;
	uint matID;
};

cbuffer DrawInfoRootConstant :  register(b0, space0 )
{
	uint baseInstance = 0;
};

cbuffer ObjectUniformBlock :  register(b0, space1 )
{
	ObjectInfo objectInfo[ 128 ];
};

cbuffer LightUniformBlock :  register(b3, space1 )
{
	float4x4 lightViewProj;
	float4 lightDirection;
	float4 lightColor;
};

cbuffer CameraUniform :  register(b1, space1 )
{
	float4x4 camViewProj;
	float4x4 camViewMat;
	float4 camClipInfo;
	float4 camPosition;
};

cbuffer MaterialUniform :  register(b2, space1 )
{
	Material Materials[ 128 ];
};

Texture2D MaterialTextures[ 8 ] :  register(t100, space0 ) ;
SamplerState LinearSampler :  register(s0, space0 ) ;

Texture2D VSM :  register(t1, space0 ) ;
SamplerState VSMSampler :  register(s2, space0 ) ;
#line 28 "shading.h"
#line 30 "shading.h"
#line 1 "varianceShadowMapping.h"
#line 28 "varianceShadowMapping.h"
#line 1 "shaderDefs.h"
#line 29 "varianceShadowMapping.h"

float2 ComputeMoments(float depth)
{
	float2 moments;
	moments.x = depth;
	float2 pd = float2(ddx(depth), ddy(depth));
	moments.y = depth * depth + 0.25f * dot(pd, pd);
	return moments;
}

float ChebyshevUpperBound(float2 moments, float t)
{
	float p = t <= moments.x;
	float variance = moments.y - (moments.x * moments.x);
	variance = max(variance, 0.001f);
	float d = t - moments.x;
	float pMax = variance / (variance + d * d);
	return max(p, pMax);
}

float3 ShadowContribution(float2 shadowMapPos, float distanceToLight)
{
	float2 moments = VSM.Sample(VSMSampler, shadowMapPos).xy;
	float3 shadow = ChebyshevUpperBound(moments, distanceToLight);
#line 63 "varianceShadowMapping.h"
	return shadow;
}
#line 31 "shading.h"


float4 Shade(uint matID, float2 uv, float3 worldPos, float3 normal)
{
	float nDotl = dot(normal, -lightDirection.xyz);
	Material mat = Materials[matID];
	float4 matColor = mat.TextureFlags & 1 ? MaterialTextures[mat.AlbedoTexID].Sample(LinearSampler, uv) : mat.Color;
	float3 viewVec = normalize(worldPos - camPosition.xyz);
	if (nDotl < 0.05f)
		nDotl = 0.05f;
	float3 diffuse = lightColor.xyz * matColor.xyz * nDotl;
	float3 specular = lightColor.xyz * pow(saturate(dot(reflect(-lightDirection.xyz, normal), viewVec)),  10.0f );
	float3 finalColor = saturate(diffuse + specular * 0.5f);


	float4 shadowMapPos = mul(lightViewProj, float4(worldPos, 1.0f));
	shadowMapPos.y = -shadowMapPos.y;
	shadowMapPos.xy = (shadowMapPos.xy + 1.0f) * 0.5f;
	if (clamp(shadowMapPos.x, 0.01f, 0.99f) == shadowMapPos.x &&
		clamp(shadowMapPos.y, 0.01f, 0.99f) == shadowMapPos.y &&
		shadowMapPos.z > 0.0f)
	{
		float3 lighting = ShadowContribution(shadowMapPos.xy, shadowMapPos.z);
		finalColor *= lighting;
	}


	return float4(finalColor, matColor.a);
}
#line 25 "C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/stochasticShadow.frag"



float hash(float3 p)
{
	p = frac(p*0.3183099 + .1);
	p *= 17.0;
	return frac(p.x*p.y*p.z*(p.x + p.y + p.z));
}

float noise(in float3 x)
{
	float3 p = floor(x);
	float3 f = frac(x);
	f = f * f*(3.0 - 2.0*f);

	return lerp(lerp(lerp(hash(p + float3(0, 0, 0)),
		hash(p + float3(1, 0, 0)), f.x),
		lerp(hash(p + float3(0, 1, 0)),
		hash(p + float3(1, 1, 0)), f.x), f.y),
		lerp(lerp(hash(p + float3(0, 0, 1)),
		hash(p + float3(1, 0, 1)), f.x),
		lerp(hash(p + float3(0, 1, 1)),
		hash(p + float3(1, 1, 1)), f.x), f.y), f.z);
}

struct VSOutput
{
	float4 Position : SV_POSITION;
	float4 WorldPosition : POSITION;
	float4 Normal : NORMAL;
	float4 UV : TEXCOORD0;
	uint MatID : MAT_ID;
};

struct PSOutput
{
	float2 RedVarianceShadowMap : SV_Target0;
	float2 GreenVarianceShadowMap : SV_Target1;
	float2 BlueVarianceShadowMap : SV_Target2;
};

PSOutput main(VSOutput input)
{
	Material mat = Materials[input.MatID];
	float4 matColor = mat.TextureFlags & 1 ? MaterialTextures[mat.AlbedoTexID].Sample(LinearSampler, input.UV.xy) : mat.Color;
	float3 p = (1.0f - mat.Transmission) * matColor.a;
	float e = noise(input.WorldPosition.xyz * 10000.0f);

	float3 normal = normalize(input.Normal.xyz);

	float3 ld = float3(camViewMat[2][0], camViewMat[2][1], camViewMat[2][2]);
	float s = saturate((mat.RefractionRatio - 1.0f) * 0.5f);
	float g = 2.0f * saturate(1.0f - pow(dot(normalize(normal), -ld.xyz), 128.0f * s*s)) - 1.0f;
	p = min(1.0f, (1.0f + g * pow(s, 0.2f)) * p);

	PSOutput output;
	float2 moments = ComputeMoments(input.Position.z);
	output.RedVarianceShadowMap = max(moments, e > p.r);
	output.GreenVarianceShadowMap = max(moments, e > p.g);
	output.BlueVarianceShadowMap = max(moments, e > p.b);
	return output;
}
