     0: struct               ( 0 -     22)
     1: Material             ( 0 -     22)
     2: {                    ( 0 -     23)
     3: float4               ( 0 -     24)
     4: Color                ( 0 -     24)
     5: ;                    ( 0 -     24)
     6: float4               ( 0 -     25)
     7: Transmission         ( 0 -     25)
     8: ;                    ( 0 -     25)
     9: float                ( 0 -     26)
    10: RefractionRatio      ( 0 -     26)
    11: ;                    ( 0 -     26)
    12: float                ( 0 -     27)
    13: Collimation          ( 0 -     27)
    14: ;                    ( 0 -     27)
    15: float2               ( 0 -     28)
    16: Padding              ( 0 -     28)
    17: ;                    ( 0 -     28)
    18: uint                 ( 0 -     29)
    19: TextureFlags         ( 0 -     29)
    20: ;                    ( 0 -     29)
    21: uint                 ( 0 -     30)
    22: AlbedoTexID          ( 0 -     30)
    23: ;                    ( 0 -     30)
    24: uint                 ( 0 -     31)
    25: MetallicTexID        ( 0 -     31)
    26: ;                    ( 0 -     31)
    27: uint                 ( 0 -     32)
    28: RoughnessTexID       ( 0 -     32)
    29: ;                    ( 0 -     32)
    30: uint                 ( 0 -     33)
    31: EmissiveTexID        ( 0 -     33)
    32: ;                    ( 0 -     33)
    33: uint3                ( 0 -     34)
    34: Padding2             ( 0 -     34)
    35: ;                    ( 0 -     34)
    36: }                    ( 0 -     35)
    37: ;                    ( 0 -     35)
    38: struct               ( 0 -     37)
    39: ObjectInfo           ( 0 -     37)
    40: {                    ( 0 -     38)
    41: float4x4             ( 0 -     39)
    42: toWorld              ( 0 -     39)
    43: ;                    ( 0 -     39)
    44: float4x4             ( 0 -     40)
    45: normalMat            ( 0 -     40)
    46: ;                    ( 0 -     40)
    47: uint                 ( 0 -     41)
    48: matID                ( 0 -     41)
    49: ;                    ( 0 -     41)
    50: }                    ( 0 -     42)
    51: ;                    ( 0 -     42)
    52: cbuffer              ( 0 -     44)
    53: DrawInfoRootConstant ( 0 -     44)
    54: :                    ( 0 -     44)
    55: register             ( 0 -     44)
    56: (                    ( 0 -     44)
    57: b0                   ( 0 -     44)
    58: ,                    ( 0 -     44)
    59: space0               ( 0 -     44)
    60: )                    ( 0 -     44)
    61: {                    ( 0 -     45)
    62: uint                 ( 0 -     46)
    63: baseInstance         ( 0 -     46)
    64: =                    ( 0 -     46)
    65: 0                    ( 0 -     46)
    66: ;                    ( 0 -     46)
    67: }                    ( 0 -     47)
    68: ;                    ( 0 -     47)
    69: cbuffer              ( 0 -     49)
    70: ObjectUniformBlock   ( 0 -     49)
    71: :                    ( 0 -     49)
    72: register             ( 0 -     49)
    73: (                    ( 0 -     49)
    74: b0                   ( 0 -     49)
    75: ,                    ( 0 -     49)
    76: space1               ( 0 -     49)
    77: )                    ( 0 -     49)
    78: {                    ( 0 -     50)
    79: ObjectInfo           ( 0 -     51)
    80: objectInfo           ( 0 -     51)
    81: [                    ( 0 -     51)
    82: 128                  ( 0 -     51)
    83: ]                    ( 0 -     51)
    84: ;                    ( 0 -     51)
    85: }                    ( 0 -     52)
    86: ;                    ( 0 -     52)
    87: cbuffer              ( 0 -     54)
    88: LightUniformBlock    ( 0 -     54)
    89: :                    ( 0 -     54)
    90: register             ( 0 -     54)
    91: (                    ( 0 -     54)
    92: b3                   ( 0 -     54)
    93: ,                    ( 0 -     54)
    94: space1               ( 0 -     54)
    95: )                    ( 0 -     54)
    96: {                    ( 0 -     55)
    97: float4x4             ( 0 -     56)
    98: lightViewProj        ( 0 -     56)
    99: ;                    ( 0 -     56)
   100: float4               ( 0 -     57)
   101: lightDirection       ( 0 -     57)
   102: ;                    ( 0 -     57)
   103: float4               ( 0 -     58)
   104: lightColor           ( 0 -     58)
   105: ;                    ( 0 -     58)
   106: }                    ( 0 -     59)
   107: ;                    ( 0 -     59)
   108: cbuffer              ( 0 -     61)
   109: CameraUniform        ( 0 -     61)
   110: :                    ( 0 -     61)
   111: register             ( 0 -     61)
   112: (                    ( 0 -     61)
   113: b1                   ( 0 -     61)
   114: ,                    ( 0 -     61)
   115: space1               ( 0 -     61)
   116: )                    ( 0 -     61)
   117: {                    ( 0 -     62)
   118: float4x4             ( 0 -     63)
   119: camViewProj          ( 0 -     63)
   120: ;                    ( 0 -     63)
   121: float4x4             ( 0 -     64)
   122: camViewMat           ( 0 -     64)
   123: ;                    ( 0 -     64)
   124: float4               ( 0 -     65)
   125: camClipInfo          ( 0 -     65)
   126: ;                    ( 0 -     65)
   127: float4               ( 0 -     66)
   128: camPosition          ( 0 -     66)
   129: ;                    ( 0 -     66)
   130: }                    ( 0 -     67)
   131: ;                    ( 0 -     67)
   132: cbuffer              ( 0 -     69)
   133: MaterialUniform      ( 0 -     69)
   134: :                    ( 0 -     69)
   135: register             ( 0 -     69)
   136: (                    ( 0 -     69)
   137: b2                   ( 0 -     69)
   138: ,                    ( 0 -     69)
   139: space1               ( 0 -     69)
   140: )                    ( 0 -     69)
   141: {                    ( 0 -     70)
   142: Material             ( 0 -     71)
   143: Materials            ( 0 -     71)
   144: [                    ( 0 -     71)
   145: 128                  ( 0 -     71)
   146: ]                    ( 0 -     71)
   147: ;                    ( 0 -     71)
   148: }                    ( 0 -     72)
   149: ;                    ( 0 -     72)
   150: Texture2D            ( 0 -     74)
   151: MaterialTextures     ( 0 -     74)
   152: [                    ( 0 -     74)
   153: 8                    ( 0 -     74)
   154: ]                    ( 0 -     74)
   155: :                    ( 0 -     74)
   156: register             ( 0 -     74)
   157: (                    ( 0 -     74)
   158: t100                 ( 0 -     74)
   159: ,                    ( 0 -     74)
   160: space0               ( 0 -     74)
   161: )                    ( 0 -     74)
   162: ;                    ( 0 -     74)
   163: SamplerState         ( 0 -     75)
   164: LinearSampler        ( 0 -     75)
   165: :                    ( 0 -     75)
   166: register             ( 0 -     75)
   167: (                    ( 0 -     75)
   168: s0                   ( 0 -     75)
   169: ,                    ( 0 -     75)
   170: space0               ( 0 -     75)
   171: )                    ( 0 -     75)
   172: ;                    ( 0 -     75)
   173: Texture2D            ( 0 -     77)
   174: VSM                  ( 0 -     77)
   175: :                    ( 0 -     77)
   176: register             ( 0 -     77)
   177: (                    ( 0 -     77)
   178: t1                   ( 0 -     77)
   179: ,                    ( 0 -     77)
   180: space0               ( 0 -     77)
   181: )                    ( 0 -     77)
   182: ;                    ( 0 -     77)
   183: SamplerState         ( 0 -     78)
   184: VSMSampler           ( 0 -     78)
   185: :                    ( 0 -     78)
   186: register             ( 0 -     78)
   187: (                    ( 0 -     78)
   188: s2                   ( 0 -     78)
   189: ,                    ( 0 -     78)
   190: space0               ( 0 -     78)
   191: )                    ( 0 -     78)
   192: ;                    ( 0 -     78)
   193: float2               ( 1 -     30)
   194: ComputeMoments       ( 1 -     30)
   195: (                    ( 1 -     30)
   196: float                ( 1 -     30)
   197: depth                ( 1 -     30)
   198: )                    ( 1 -     30)
   199: {                    ( 1 -     31)
   200: float2               ( 1 -     32)
   201: moments              ( 1 -     32)
   202: ;                    ( 1 -     32)
   203: moments              ( 1 -     33)
   204: .                    ( 1 -     33)
   205: x                    ( 1 -     33)
   206: =                    ( 1 -     33)
   207: depth                ( 1 -     33)
   208: ;                    ( 1 -     33)
   209: float2               ( 1 -     34)
   210: pd                   ( 1 -     34)
   211: =                    ( 1 -     34)
   212: float2               ( 1 -     34)
   213: (                    ( 1 -     34)
   214: ddx                  ( 1 -     34)
   215: (                    ( 1 -     34)
   216: depth                ( 1 -     34)
   217: )                    ( 1 -     34)
   218: ,                    ( 1 -     34)
   219: ddy                  ( 1 -     34)
   220: (                    ( 1 -     34)
   221: depth                ( 1 -     34)
   222: )                    ( 1 -     34)
   223: )                    ( 1 -     34)
   224: ;                    ( 1 -     34)
   225: moments              ( 1 -     35)
   226: .                    ( 1 -     35)
   227: y                    ( 1 -     35)
   228: =                    ( 1 -     35)
   229: depth                ( 1 -     35)
   230: *                    ( 1 -     35)
   231: depth                ( 1 -     35)
   232: +                    ( 1 -     35)
   233: 0.250000             ( 1 -     35)
   234: *                    ( 1 -     35)
   235: dot                  ( 1 -     35)
   236: (                    ( 1 -     35)
   237: pd                   ( 1 -     35)
   238: ,                    ( 1 -     35)
   239: pd                   ( 1 -     35)
   240: )                    ( 1 -     35)
   241: ;                    ( 1 -     35)
   242: return               ( 1 -     36)
   243: moments              ( 1 -     36)
   244: ;                    ( 1 -     36)
   245: }                    ( 1 -     37)
   246: float                ( 1 -     39)
   247: ChebyshevUpperBound  ( 1 -     39)
   248: (                    ( 1 -     39)
   249: float2               ( 1 -     39)
   250: moments              ( 1 -     39)
   251: ,                    ( 1 -     39)
   252: float                ( 1 -     39)
   253: t                    ( 1 -     39)
   254: )                    ( 1 -     39)
   255: {                    ( 1 -     40)
   256: float                ( 1 -     41)
   257: p                    ( 1 -     41)
   258: =                    ( 1 -     41)
   259: t                    ( 1 -     41)
   260: unknown              ( 1 -     41)
   261: moments              ( 1 -     41)
   262: .                    ( 1 -     41)
   263: x                    ( 1 -     41)
   264: ;                    ( 1 -     41)
   265: float                ( 1 -     42)
   266: variance             ( 1 -     42)
   267: =                    ( 1 -     42)
   268: moments              ( 1 -     42)
   269: .                    ( 1 -     42)
   270: y                    ( 1 -     42)
   271: -                    ( 1 -     42)
   272: (                    ( 1 -     42)
   273: moments              ( 1 -     42)
   274: .                    ( 1 -     42)
   275: x                    ( 1 -     42)
   276: *                    ( 1 -     42)
   277: moments              ( 1 -     42)
   278: .                    ( 1 -     42)
   279: x                    ( 1 -     42)
   280: )                    ( 1 -     42)
   281: ;                    ( 1 -     42)
   282: variance             ( 1 -     43)
   283: =                    ( 1 -     43)
   284: max                  ( 1 -     43)
   285: (                    ( 1 -     43)
   286: variance             ( 1 -     43)
   287: ,                    ( 1 -     43)
   288: 0.001000             ( 1 -     43)
   289: )                    ( 1 -     43)
   290: ;                    ( 1 -     43)
   291: float                ( 1 -     44)
   292: d                    ( 1 -     44)
   293: =                    ( 1 -     44)
   294: t                    ( 1 -     44)
   295: -                    ( 1 -     44)
   296: moments              ( 1 -     44)
   297: .                    ( 1 -     44)
   298: x                    ( 1 -     44)
   299: ;                    ( 1 -     44)
   300: float                ( 1 -     45)
   301: pMax                 ( 1 -     45)
   302: =                    ( 1 -     45)
   303: variance             ( 1 -     45)
   304: /                    ( 1 -     45)
   305: (                    ( 1 -     45)
   306: variance             ( 1 -     45)
   307: +                    ( 1 -     45)
   308: d                    ( 1 -     45)
   309: *                    ( 1 -     45)
   310: d                    ( 1 -     45)
   311: )                    ( 1 -     45)
   312: ;                    ( 1 -     45)
   313: return               ( 1 -     46)
   314: max                  ( 1 -     46)
   315: (                    ( 1 -     46)
   316: p                    ( 1 -     46)
   317: ,                    ( 1 -     46)
   318: pMax                 ( 1 -     46)
   319: )                    ( 1 -     46)
   320: ;                    ( 1 -     46)
   321: }                    ( 1 -     47)
   322: float3               ( 1 -     49)
   323: ShadowContribution   ( 1 -     49)
   324: (                    ( 1 -     49)
   325: float2               ( 1 -     49)
   326: shadowMapPos         ( 1 -     49)
   327: ,                    ( 1 -     49)
   328: float                ( 1 -     49)
   329: distanceToLight      ( 1 -     49)
   330: )                    ( 1 -     49)
   331: {                    ( 1 -     50)
   332: float2               ( 1 -     51)
   333: moments              ( 1 -     51)
   334: =                    ( 1 -     51)
   335: VSM                  ( 1 -     51)
   336: .                    ( 1 -     51)
   337: Sample               ( 1 -     51)
   338: (                    ( 1 -     51)
   339: VSMSampler           ( 1 -     51)
   340: ,                    ( 1 -     51)
   341: shadowMapPos         ( 1 -     51)
   342: )                    ( 1 -     51)
   343: .                    ( 1 -     51)
   344: xy                   ( 1 -     51)
   345: ;                    ( 1 -     51)
   346: float3               ( 1 -     52)
   347: shadow               ( 1 -     52)
   348: =                    ( 1 -     52)
   349: ChebyshevUpperBound  ( 1 -     52)
   350: (                    ( 1 -     52)
   351: moments              ( 1 -     52)
   352: ,                    ( 1 -     52)
   353: distanceToLight      ( 1 -     52)
   354: )                    ( 1 -     52)
   355: ;                    ( 1 -     52)
   356: return               ( 1 -     63)
   357: shadow               ( 1 -     63)
   358: ;                    ( 1 -     63)
   359: }                    ( 1 -     64)
   360: float4               ( 2 -     33)
   361: Shade                ( 2 -     33)
   362: (                    ( 2 -     33)
   363: uint                 ( 2 -     33)
   364: matID                ( 2 -     33)
   365: ,                    ( 2 -     33)
   366: float2               ( 2 -     33)
   367: uv                   ( 2 -     33)
   368: ,                    ( 2 -     33)
   369: float3               ( 2 -     33)
   370: worldPos             ( 2 -     33)
   371: ,                    ( 2 -     33)
   372: float3               ( 2 -     33)
   373: normal               ( 2 -     33)
   374: )                    ( 2 -     33)
   375: {                    ( 2 -     34)
   376: float                ( 2 -     35)
   377: nDotl                ( 2 -     35)
   378: =                    ( 2 -     35)
   379: dot                  ( 2 -     35)
   380: (                    ( 2 -     35)
   381: normal               ( 2 -     35)
   382: ,                    ( 2 -     35)
   383: -                    ( 2 -     35)
   384: lightDirection       ( 2 -     35)
   385: .                    ( 2 -     35)
   386: xyz                  ( 2 -     35)
   387: )                    ( 2 -     35)
   388: ;                    ( 2 -     35)
   389: Material             ( 2 -     36)
   390: mat                  ( 2 -     36)
   391: =                    ( 2 -     36)
   392: Materials            ( 2 -     36)
   393: [                    ( 2 -     36)
   394: matID                ( 2 -     36)
   395: ]                    ( 2 -     36)
   396: ;                    ( 2 -     36)
   397: float4               ( 2 -     37)
   398: matColor             ( 2 -     37)
   399: =                    ( 2 -     37)
   400: mat                  ( 2 -     37)
   401: .                    ( 2 -     37)
   402: TextureFlags         ( 2 -     37)
   403: &                    ( 2 -     37)
   404: 1                    ( 2 -     37)
   405: ?                    ( 2 -     37)
   406: MaterialTextures     ( 2 -     37)
   407: [                    ( 2 -     37)
   408: mat                  ( 2 -     37)
   409: .                    ( 2 -     37)
   410: AlbedoTexID          ( 2 -     37)
   411: ]                    ( 2 -     37)
   412: .                    ( 2 -     37)
   413: Sample               ( 2 -     37)
   414: (                    ( 2 -     37)
   415: LinearSampler        ( 2 -     37)
   416: ,                    ( 2 -     37)
   417: uv                   ( 2 -     37)
   418: )                    ( 2 -     37)
   419: :                    ( 2 -     37)
   420: mat                  ( 2 -     37)
   421: .                    ( 2 -     37)
   422: Color                ( 2 -     37)
   423: ;                    ( 2 -     37)
   424: float3               ( 2 -     38)
   425: viewVec              ( 2 -     38)
   426: =                    ( 2 -     38)
   427: normalize            ( 2 -     38)
   428: (                    ( 2 -     38)
   429: worldPos             ( 2 -     38)
   430: -                    ( 2 -     38)
   431: camPosition          ( 2 -     38)
   432: .                    ( 2 -     38)
   433: xyz                  ( 2 -     38)
   434: )                    ( 2 -     38)
   435: ;                    ( 2 -     38)
   436: if                   ( 2 -     39)
   437: (                    ( 2 -     39)
   438: nDotl                ( 2 -     39)
   439: <                    ( 2 -     39)
   440: 0.050000             ( 2 -     39)
   441: )                    ( 2 -     39)
   442: nDotl                ( 2 -     40)
   443: =                    ( 2 -     40)
   444: 0.050000             ( 2 -     40)
   445: ;                    ( 2 -     40)
   446: float3               ( 2 -     41)
   447: diffuse              ( 2 -     41)
   448: =                    ( 2 -     41)
   449: lightColor           ( 2 -     41)
   450: .                    ( 2 -     41)
   451: xyz                  ( 2 -     41)
   452: *                    ( 2 -     41)
   453: matColor             ( 2 -     41)
   454: .                    ( 2 -     41)
   455: xyz                  ( 2 -     41)
   456: *                    ( 2 -     41)
   457: nDotl                ( 2 -     41)
   458: ;                    ( 2 -     41)
   459: float3               ( 2 -     42)
   460: specular             ( 2 -     42)
   461: =                    ( 2 -     42)
   462: lightColor           ( 2 -     42)
   463: .                    ( 2 -     42)
   464: xyz                  ( 2 -     42)
   465: *                    ( 2 -     42)
   466: pow                  ( 2 -     42)
   467: (                    ( 2 -     42)
   468: saturate             ( 2 -     42)
   469: (                    ( 2 -     42)
   470: dot                  ( 2 -     42)
   471: (                    ( 2 -     42)
   472: reflect              ( 2 -     42)
   473: (                    ( 2 -     42)
   474: -                    ( 2 -     42)
   475: lightDirection       ( 2 -     42)
   476: .                    ( 2 -     42)
   477: xyz                  ( 2 -     42)
   478: ,                    ( 2 -     42)
   479: normal               ( 2 -     42)
   480: )                    ( 2 -     42)
   481: ,                    ( 2 -     42)
   482: viewVec              ( 2 -     42)
   483: )                    ( 2 -     42)
   484: )                    ( 2 -     42)
   485: ,                    ( 2 -     42)
   486: 10.000000            ( 2 -     42)
   487: )                    ( 2 -     42)
   488: ;                    ( 2 -     42)
   489: float3               ( 2 -     43)
   490: finalColor           ( 2 -     43)
   491: =                    ( 2 -     43)
   492: saturate             ( 2 -     43)
   493: (                    ( 2 -     43)
   494: diffuse              ( 2 -     43)
   495: +                    ( 2 -     43)
   496: specular             ( 2 -     43)
   497: *                    ( 2 -     43)
   498: 0.500000             ( 2 -     43)
   499: )                    ( 2 -     43)
   500: ;                    ( 2 -     43)
   501: float4               ( 2 -     46)
   502: shadowMapPos         ( 2 -     46)
   503: =                    ( 2 -     46)
   504: mul                  ( 2 -     46)
   505: (                    ( 2 -     46)
   506: lightViewProj        ( 2 -     46)
   507: ,                    ( 2 -     46)
   508: float4               ( 2 -     46)
   509: (                    ( 2 -     46)
   510: worldPos             ( 2 -     46)
   511: ,                    ( 2 -     46)
   512: 1.000000             ( 2 -     46)
   513: )                    ( 2 -     46)
   514: )                    ( 2 -     46)
   515: ;                    ( 2 -     46)
   516: shadowMapPos         ( 2 -     47)
   517: .                    ( 2 -     47)
   518: y                    ( 2 -     47)
   519: =                    ( 2 -     47)
   520: -                    ( 2 -     47)
   521: shadowMapPos         ( 2 -     47)
   522: .                    ( 2 -     47)
   523: y                    ( 2 -     47)
   524: ;                    ( 2 -     47)
   525: shadowMapPos         ( 2 -     48)
   526: .                    ( 2 -     48)
   527: xy                   ( 2 -     48)
   528: =                    ( 2 -     48)
   529: (                    ( 2 -     48)
   530: shadowMapPos         ( 2 -     48)
   531: .                    ( 2 -     48)
   532: xy                   ( 2 -     48)
   533: +                    ( 2 -     48)
   534: 1.000000             ( 2 -     48)
   535: )                    ( 2 -     48)
   536: *                    ( 2 -     48)
   537: 0.500000             ( 2 -     48)
   538: ;                    ( 2 -     48)
   539: if                   ( 2 -     49)
   540: (                    ( 2 -     49)
   541: clamp                ( 2 -     49)
   542: (                    ( 2 -     49)
   543: shadowMapPos         ( 2 -     49)
   544: .                    ( 2 -     49)
   545: x                    ( 2 -     49)
   546: ,                    ( 2 -     49)
   547: 0.010000             ( 2 -     49)
   548: ,                    ( 2 -     49)
   549: 0.990000             ( 2 -     49)
   550: )                    ( 2 -     49)
   551: unknown              ( 2 -     49)
   552: shadowMapPos         ( 2 -     49)
   553: .                    ( 2 -     49)
   554: x                    ( 2 -     49)
   555: unknown              ( 2 -     49)
   556: clamp                ( 2 -     50)
   557: (                    ( 2 -     50)
   558: shadowMapPos         ( 2 -     50)
   559: .                    ( 2 -     50)
   560: y                    ( 2 -     50)
   561: ,                    ( 2 -     50)
   562: 0.010000             ( 2 -     50)
   563: ,                    ( 2 -     50)
   564: 0.990000             ( 2 -     50)
   565: )                    ( 2 -     50)
   566: unknown              ( 2 -     50)
   567: shadowMapPos         ( 2 -     50)
   568: .                    ( 2 -     50)
   569: y                    ( 2 -     50)
   570: unknown              ( 2 -     50)
   571: shadowMapPos         ( 2 -     51)
   572: .                    ( 2 -     51)
   573: z                    ( 2 -     51)
   574: >                    ( 2 -     51)
   575: 0.000000             ( 2 -     51)
   576: )                    ( 2 -     51)
   577: {                    ( 2 -     52)
   578: float3               ( 2 -     53)
   579: lighting             ( 2 -     53)
   580: =                    ( 2 -     53)
   581: ShadowContribution   ( 2 -     53)
   582: (                    ( 2 -     53)
   583: shadowMapPos         ( 2 -     53)
   584: .                    ( 2 -     53)
   585: xy                   ( 2 -     53)
   586: ,                    ( 2 -     53)
   587: shadowMapPos         ( 2 -     53)
   588: .                    ( 2 -     53)
   589: z                    ( 2 -     53)
   590: )                    ( 2 -     53)
   591: ;                    ( 2 -     53)
   592: finalColor           ( 2 -     54)
   593: *=                   ( 2 -     54)
   594: lighting             ( 2 -     54)
   595: ;                    ( 2 -     54)
   596: }                    ( 2 -     55)
   597: return               ( 2 -     58)
   598: float4               ( 2 -     58)
   599: (                    ( 2 -     58)
   600: finalColor           ( 2 -     58)
   601: ,                    ( 2 -     58)
   602: matColor             ( 2 -     58)
   603: .                    ( 2 -     58)
   604: a                    ( 2 -     58)
   605: )                    ( 2 -     58)
   606: ;                    ( 2 -     58)
   607: }                    ( 2 -     59)
   608: struct               ( 3 -     27)
   609: VSOutput             ( 3 -     27)
   610: {                    ( 3 -     28)
   611: float4               ( 3 -     29)
   612: Position             ( 3 -     29)
   613: :                    ( 3 -     29)
   614: SV_POSITION          ( 3 -     29)
   615: ;                    ( 3 -     29)
   616: float4               ( 3 -     30)
   617: WorldPosition        ( 3 -     30)
   618: :                    ( 3 -     30)
   619: POSITION             ( 3 -     30)
   620: ;                    ( 3 -     30)
   621: float4               ( 3 -     31)
   622: Normal               ( 3 -     31)
   623: :                    ( 3 -     31)
   624: NORMAL               ( 3 -     31)
   625: ;                    ( 3 -     31)
   626: float4               ( 3 -     32)
   627: UV                   ( 3 -     32)
   628: :                    ( 3 -     32)
   629: TEXCOORD0            ( 3 -     32)
   630: ;                    ( 3 -     32)
   631: uint                 ( 3 -     33)
   632: MatID                ( 3 -     33)
   633: :                    ( 3 -     33)
   634: MAT_ID               ( 3 -     33)
   635: ;                    ( 3 -     33)
   636: }                    ( 3 -     34)
   637: ;                    ( 3 -     34)
   638: struct               ( 3 -     36)
   639: PSOutput             ( 3 -     36)
   640: {                    ( 3 -     37)
   641: float4               ( 3 -     38)
   642: Accumulation         ( 3 -     38)
   643: :                    ( 3 -     38)
   644: SV_Target0           ( 3 -     38)
   645: ;                    ( 3 -     38)
   646: float4               ( 3 -     39)
   647: Revealage            ( 3 -     39)
   648: :                    ( 3 -     39)
   649: SV_Target1           ( 3 -     39)
   650: ;                    ( 3 -     39)
   651: }                    ( 3 -     40)
   652: ;                    ( 3 -     40)
   653: cbuffer              ( 3 -     42)
   654: WBOITSettings        ( 3 -     42)
   655: :                    ( 3 -     42)
   656: register             ( 3 -     42)
   657: (                    ( 3 -     42)
   658: b4                   ( 3 -     42)
   659: ,                    ( 3 -     42)
   660: space1               ( 3 -     42)
   661: )                    ( 3 -     42)
   662: {                    ( 3 -     43)
   663: float                ( 3 -     44)
   664: opacitySensitivity   ( 3 -     44)
   665: =                    ( 3 -     44)
   666: 3.000000             ( 3 -     44)
   667: ;                    ( 3 -     44)
   668: float                ( 3 -     45)
   669: weightBias           ( 3 -     45)
   670: =                    ( 3 -     45)
   671: 5.000000             ( 3 -     45)
   672: ;                    ( 3 -     45)
   673: float                ( 3 -     46)
   674: precisionScalar      ( 3 -     46)
   675: =                    ( 3 -     46)
   676: 10000.000000         ( 3 -     46)
   677: ;                    ( 3 -     46)
   678: float                ( 3 -     47)
   679: maximumWeight        ( 3 -     47)
   680: =                    ( 3 -     47)
   681: 20.000000            ( 3 -     47)
   682: ;                    ( 3 -     47)
   683: float                ( 3 -     48)
   684: maximumColorValue    ( 3 -     48)
   685: =                    ( 3 -     48)
   686: 1000.000000          ( 3 -     48)
   687: ;                    ( 3 -     48)
   688: float                ( 3 -     49)
   689: additiveSensitivity  ( 3 -     49)
   690: =                    ( 3 -     49)
   691: 10.000000            ( 3 -     49)
   692: ;                    ( 3 -     49)
   693: float                ( 3 -     50)
   694: emissiveSensitivityValue ( 3 -     50)
   695: =                    ( 3 -     50)
   696: 0.500000             ( 3 -     50)
   697: ;                    ( 3 -     50)
   698: }                    ( 3 -     51)
   699: ;                    ( 3 -     51)
   700: void                 ( 3 -     53)
   701: weighted_oit_process ( 3 -     53)
   702: (                    ( 3 -     53)
   703: out                  ( 3 -     53)
   704: float4               ( 3 -     53)
   705: accum                ( 3 -     53)
   706: ,                    ( 3 -     53)
   707: out                  ( 3 -     53)
   708: float                ( 3 -     53)
   709: revealage            ( 3 -     53)
   710: ,                    ( 3 -     53)
   711: out                  ( 3 -     53)
   712: float                ( 3 -     53)
   713: emissive_weight      ( 3 -     53)
   714: ,                    ( 3 -     53)
   715: float4               ( 3 -     53)
   716: premultiplied_alpha_color ( 3 -     53)
   717: ,                    ( 3 -     53)
   718: float                ( 3 -     53)
   719: raw_emissive_luminance ( 3 -     53)
   720: ,                    ( 3 -     53)
   721: float                ( 3 -     53)
   722: view_depth           ( 3 -     53)
   723: ,                    ( 3 -     53)
   724: float                ( 3 -     53)
   725: current_camera_exposure ( 3 -     53)
   726: )                    ( 3 -     53)
   727: {                    ( 3 -     54)
   728: float                ( 3 -     56)
   729: relative_emissive_luminance ( 3 -     56)
   730: =                    ( 3 -     56)
   731: raw_emissive_luminance ( 3 -     56)
   732: *                    ( 3 -     56)
   733: current_camera_exposure ( 3 -     56)
   734: ;                    ( 3 -     56)
   735: const                ( 3 -     62)
   736: float                ( 3 -     62)
   737: emissive_sensitivity ( 3 -     62)
   738: =                    ( 3 -     62)
   739: 1.000000             ( 3 -     62)
   740: /                    ( 3 -     62)
   741: emissiveSensitivityValue ( 3 -     62)
   742: ;                    ( 3 -     62)
   743: float                ( 3 -     64)
   744: clamped_emissive     ( 3 -     64)
   745: =                    ( 3 -     64)
   746: saturate             ( 3 -     64)
   747: (                    ( 3 -     64)
   748: relative_emissive_luminance ( 3 -     64)
   749: )                    ( 3 -     64)
   750: ;                    ( 3 -     64)
   751: float                ( 3 -     65)
   752: clamped_alpha        ( 3 -     65)
   753: =                    ( 3 -     65)
   754: saturate             ( 3 -     65)
   755: (                    ( 3 -     65)
   756: premultiplied_alpha_color ( 3 -     65)
   757: .                    ( 3 -     65)
   758: a                    ( 3 -     65)
   759: )                    ( 3 -     65)
   760: ;                    ( 3 -     65)
   761: float                ( 3 -     73)
   762: a                    ( 3 -     73)
   763: =                    ( 3 -     73)
   764: saturate             ( 3 -     73)
   765: (                    ( 3 -     73)
   766: (                    ( 3 -     73)
   767: clamped_alpha        ( 3 -     73)
   768: *                    ( 3 -     73)
   769: opacitySensitivity   ( 3 -     73)
   770: )                    ( 3 -     73)
   771: +                    ( 3 -     73)
   772: (                    ( 3 -     73)
   773: clamped_emissive     ( 3 -     73)
   774: *                    ( 3 -     73)
   775: emissive_sensitivity ( 3 -     73)
   776: )                    ( 3 -     73)
   777: )                    ( 3 -     73)
   778: ;                    ( 3 -     73)
   779: const                ( 3 -     77)
   780: float                ( 3 -     77)
   781: canonical_near_z     ( 3 -     77)
   782: =                    ( 3 -     77)
   783: 0.500000             ( 3 -     77)
   784: ;                    ( 3 -     77)
   785: const                ( 3 -     78)
   786: float                ( 3 -     78)
   787: canonical_far_z      ( 3 -     78)
   788: =                    ( 3 -     78)
   789: 300.000000           ( 3 -     78)
   790: ;                    ( 3 -     78)
   791: float                ( 3 -     79)
   792: range                ( 3 -     79)
   793: =                    ( 3 -     79)
   794: canonical_far_z      ( 3 -     79)
   795: -                    ( 3 -     79)
   796: canonical_near_z     ( 3 -     79)
   797: ;                    ( 3 -     79)
   798: float                ( 3 -     80)
   799: canonical_depth      ( 3 -     80)
   800: =                    ( 3 -     80)
   801: saturate             ( 3 -     80)
   802: (                    ( 3 -     80)
   803: canonical_far_z      ( 3 -     80)
   804: /                    ( 3 -     80)
   805: range                ( 3 -     80)
   806: -                    ( 3 -     80)
   807: (                    ( 3 -     80)
   808: canonical_far_z      ( 3 -     80)
   809: *                    ( 3 -     80)
   810: canonical_near_z     ( 3 -     80)
   811: )                    ( 3 -     80)
   812: /                    ( 3 -     80)
   813: (                    ( 3 -     80)
   814: view_depth           ( 3 -     80)
   815: *                    ( 3 -     80)
   816: range                ( 3 -     80)
   817: )                    ( 3 -     80)
   818: )                    ( 3 -     80)
   819: ;                    ( 3 -     80)
   820: float                ( 3 -     81)
   821: b                    ( 3 -     81)
   822: =                    ( 3 -     81)
   823: 1.000000             ( 3 -     81)
   824: -                    ( 3 -     81)
   825: canonical_depth      ( 3 -     81)
   826: ;                    ( 3 -     81)
   827: float3               ( 3 -     84)
   828: clamped_color        ( 3 -     84)
   829: =                    ( 3 -     84)
   830: min                  ( 3 -     84)
   831: (                    ( 3 -     84)
   832: premultiplied_alpha_color ( 3 -     84)
   833: .                    ( 3 -     84)
   834: rgb                  ( 3 -     84)
   835: ,                    ( 3 -     84)
   836: maximumColorValue    ( 3 -     84)
   837: )                    ( 3 -     84)
   838: ;                    ( 3 -     84)
   839: float                ( 3 -     86)
   840: w                    ( 3 -     86)
   841: =                    ( 3 -     86)
   842: precisionScalar      ( 3 -     86)
   843: *                    ( 3 -     86)
   844: b                    ( 3 -     86)
   845: *                    ( 3 -     86)
   846: b                    ( 3 -     86)
   847: *                    ( 3 -     86)
   848: b                    ( 3 -     86)
   849: ;                    ( 3 -     86)
   850: w                    ( 3 -     87)
   851: +=                   ( 3 -     87)
   852: weightBias           ( 3 -     87)
   853: ;                    ( 3 -     87)
   854: w                    ( 3 -     88)
   855: =                    ( 3 -     88)
   856: min                  ( 3 -     88)
   857: (                    ( 3 -     88)
   858: w                    ( 3 -     88)
   859: ,                    ( 3 -     88)
   860: maximumWeight        ( 3 -     88)
   861: )                    ( 3 -     88)
   862: ;                    ( 3 -     88)
   863: w                    ( 3 -     89)
   864: *=                   ( 3 -     89)
   865: a                    ( 3 -     89)
   866: *                    ( 3 -     89)
   867: a                    ( 3 -     89)
   868: *                    ( 3 -     89)
   869: a                    ( 3 -     89)
   870: ;                    ( 3 -     89)
   871: accum                ( 3 -     91)
   872: =                    ( 3 -     91)
   873: float4               ( 3 -     91)
   874: (                    ( 3 -     91)
   875: clamped_color        ( 3 -     91)
   876: *                    ( 3 -     91)
   877: w                    ( 3 -     91)
   878: ,                    ( 3 -     91)
   879: w                    ( 3 -     91)
   880: )                    ( 3 -     91)
   881: ;                    ( 3 -     91)
   882: revealage            ( 3 -     92)
   883: =                    ( 3 -     92)
   884: clamped_alpha        ( 3 -     92)
   885: ;                    ( 3 -     92)
   886: emissive_weight      ( 3 -     93)
   887: =                    ( 3 -     93)
   888: saturate             ( 3 -     93)
   889: (                    ( 3 -     93)
   890: relative_emissive_luminance ( 3 -     93)
   891: *                    ( 3 -     93)
   892: additiveSensitivity  ( 3 -     93)
   893: )                    ( 3 -     93)
   894: /                    ( 3 -     93)
   895: 8.000000             ( 3 -     93)
   896: ;                    ( 3 -     93)
   897: }                    ( 3 -     94)
   898: PSOutput             ( 3 -     96)
   899: main                 ( 3 -     96)
   900: (                    ( 3 -     96)
   901: VSOutput             ( 3 -     96)
   902: input                ( 3 -     96)
   903: )                    ( 3 -     96)
   904: {                    ( 3 -     97)
   905: PSOutput             ( 3 -     98)
   906: output               ( 3 -     98)
   907: ;                    ( 3 -     98)
   908: float4               ( 3 -    100)
   909: finalColor           ( 3 -    100)
   910: =                    ( 3 -    100)
   911: Shade                ( 3 -    100)
   912: (                    ( 3 -    100)
   913: input                ( 3 -    100)
   914: .                    ( 3 -    100)
   915: MatID                ( 3 -    100)
   916: ,                    ( 3 -    100)
   917: input                ( 3 -    100)
   918: .                    ( 3 -    100)
   919: UV                   ( 3 -    100)
   920: .                    ( 3 -    100)
   921: xy                   ( 3 -    100)
   922: ,                    ( 3 -    100)
   923: input                ( 3 -    100)
   924: .                    ( 3 -    100)
   925: WorldPosition        ( 3 -    100)
   926: .                    ( 3 -    100)
   927: xyz                  ( 3 -    100)
   928: ,                    ( 3 -    100)
   929: normalize            ( 3 -    100)
   930: (                    ( 3 -    100)
   931: input                ( 3 -    100)
   932: .                    ( 3 -    100)
   933: Normal               ( 3 -    100)
   934: .                    ( 3 -    100)
   935: xyz                  ( 3 -    100)
   936: )                    ( 3 -    100)
   937: )                    ( 3 -    100)
   938: ;                    ( 3 -    100)
   939: float                ( 3 -    102)
   940: d                    ( 3 -    102)
   941: =                    ( 3 -    102)
   942: input                ( 3 -    102)
   943: .                    ( 3 -    102)
   944: Position             ( 3 -    102)
   945: .                    ( 3 -    102)
   946: z                    ( 3 -    102)
   947: /                    ( 3 -    102)
   948: input                ( 3 -    102)
   949: .                    ( 3 -    102)
   950: Position             ( 3 -    102)
   951: .                    ( 3 -    102)
   952: w                    ( 3 -    102)
   953: ;                    ( 3 -    102)
   954: float4               ( 3 -    103)
   955: premultipliedColor   ( 3 -    103)
   956: =                    ( 3 -    103)
   957: float4               ( 3 -    103)
   958: (                    ( 3 -    103)
   959: finalColor           ( 3 -    103)
   960: .                    ( 3 -    103)
   961: rgb                  ( 3 -    103)
   962: *                    ( 3 -    103)
   963: finalColor           ( 3 -    103)
   964: .                    ( 3 -    103)
   965: a                    ( 3 -    103)
   966: ,                    ( 3 -    103)
   967: finalColor           ( 3 -    103)
   968: .                    ( 3 -    103)
   969: a                    ( 3 -    103)
   970: )                    ( 3 -    103)
   971: ;                    ( 3 -    103)
   972: float                ( 3 -    104)
   973: emissiveLuminance    ( 3 -    104)
   974: =                    ( 3 -    104)
   975: dot                  ( 3 -    104)
   976: (                    ( 3 -    104)
   977: finalColor           ( 3 -    104)
   978: .                    ( 3 -    104)
   979: rgb                  ( 3 -    104)
   980: ,                    ( 3 -    104)
   981: float3               ( 3 -    104)
   982: (                    ( 3 -    104)
   983: 0.212600             ( 3 -    104)
   984: ,                    ( 3 -    104)
   985: 0.715200             ( 3 -    104)
   986: ,                    ( 3 -    104)
   987: 0.072200             ( 3 -    104)
   988: )                    ( 3 -    104)
   989: )                    ( 3 -    104)
   990: ;                    ( 3 -    104)
   991: output               ( 3 -    106)
   992: .                    ( 3 -    106)
   993: Revealage            ( 3 -    106)
   994: =                    ( 3 -    106)
   995: 0.000000             ( 3 -    106)
   996: ;                    ( 3 -    106)
   997: weighted_oit_process ( 3 -    107)
   998: (                    ( 3 -    107)
   999: output               ( 3 -    107)
  1000: .                    ( 3 -    107)
  1001: Accumulation         ( 3 -    107)
  1002: ,                    ( 3 -    107)
  1003: output               ( 3 -    107)
  1004: .                    ( 3 -    107)
  1005: Revealage            ( 3 -    107)
  1006: .                    ( 3 -    107)
  1007: x                    ( 3 -    107)
  1008: ,                    ( 3 -    107)
  1009: output               ( 3 -    107)
  1010: .                    ( 3 -    107)
  1011: Revealage            ( 3 -    107)
  1012: .                    ( 3 -    107)
  1013: w                    ( 3 -    107)
  1014: ,                    ( 3 -    107)
  1015: premultipliedColor   ( 3 -    107)
  1016: ,                    ( 3 -    107)
  1017: emissiveLuminance    ( 3 -    107)
  1018: ,                    ( 3 -    107)
  1019: d                    ( 3 -    107)
  1020: ,                    ( 3 -    107)
  1021: 1.000000             ( 3 -    107)
  1022: )                    ( 3 -    107)
  1023: ;                    ( 3 -    107)
  1024: return               ( 3 -    109)
  1025: output               ( 3 -    109)
  1026: ;                    ( 3 -    109)
  1027: }                    ( 3 -    110)
  1028: <eof>                ( 3 -    111)

 0: shaderDefs.h
 1: varianceShadowMapping.h
 2: shading.h
 3: C:/Users/conno/Desktop/The-Forge/Examples_3/Unit_Tests/src/15_Transparency/Shaders/D3D12/weightedBlendedOITVolition.frag

